IMEM:0x00000000 INSTR:0x07F7B000    00000111111101111011000000000000   Start:		add r27, r27, 0	//noop
IMEM:0x00000001 INSTR:0x7FE20000    01111111111000100000000000000000    mov r17, 0
IMEM:0x00000002 INSTR:0x7FF40FFF    01111111111101000000111111111111   	mov r26,	4095
IMEM:0x00000003 INSTR:0x7FF6001C    01111111111101100000000000011100   	mov r27,	28
IMEM:0x00000004 INSTR:0x7F95AD80    01111111100101011010110110000000   	mov r10,	r26, r27 LSL		// r10 <- _INIT << _SHIFT
IMEM:0x00000005 INSTR:0x7FCA0002    01111111110010100000000000000010   	mov r5, 2	// FB1, color mode
IMEM:0x00000006 INSTR:0xD7954000    11010111100101010100000000000000   	strb r5, r10, 0
IMEM:0x00000007 INSTR:0x7FCA0000    01111111110010100000000000000000   	mov r5, 0	// get rid of extra color bit
IMEM:0x00000008 INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x00000009 INSTR:0xD7ED4010    11010111111011010100000000010000   	strb r27, r10, 16
IMEM:0x0000000A INSTR:0x7FC40000    01111111110001000000000000000000   	mov r2, 0
IMEM:0x0000000B INSTR:0x07F7B000    00000111111101111011000000000000   Main_menu_loop: add r27, r27, 0	//noop
IMEM:0x0000000C INSTR:0x7FF60002    01111111111101100000000000000010    mov r27, 2
IMEM:0x0000000D INSTR:0x18000000    00011000000000000000000000000000    RETURN 2
IMEM:0x0000000E INSTR:0xAFED400F    10101111111011010100000000001111   Main_wait_kbd:	ldrb r27, r10, 15
IMEM:0x0000000F INSTR:0x97F60002    10010111111101100000000000000010   	tst r27, 2 // is 2 set?
IMEM:0x00000010 INSTR:0x607FFFFC    01100000011111111111111111111100   	b_eq  -4
IMEM:0x00000011 INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x00000012 INSTR:0xD7ED400F    11010111111011010100000000001111   	strb r27, r10, 15
IMEM:0x00000013 INSTR:0x0FF71003    00001111111101110001000000000011    and r27, r17, 3
IMEM:0x00000014 INSTR:0x77F60000    01110111111101100000000000000000    cmp r27, 0
IMEM:0x00000015 INSTR:0x78420031    01111000010000100000000000110001    mov_eq r1, 49
IMEM:0x00000016 INSTR:0x77F60001    01110111111101100000000000000001    cmp r27, 1
IMEM:0x00000017 INSTR:0x78420011    01111000010000100000000000010001    mov_eq r1, 17		// selection 1 -- cyan screen
IMEM:0x00000018 INSTR:0x77F60002    01110111111101100000000000000010    cmp r27, 2
IMEM:0x00000019 INSTR:0x78420011    01111000010000100000000000010001    mov_eq r1, 17		// selection 2 -- magenta screen
IMEM:0x0000001A INSTR:0x77F60003    01110111111101100000000000000011    cmp r27, 3
IMEM:0x0000001B INSTR:0x78420037    01111000010000100000000000110111    mov_eq r1, 55	// "any key"
IMEM:0x0000001C INSTR:0x07E31001    00000111111000110001000000000001    add r17, r17, 1
IMEM:0x0000001D INSTR:0xAF854012    10101111100001010100000000010010   	ldrb r1, r10, 18	// get the key
IMEM:0x0000001E INSTR:0xD7854005    11010111100001010100000000000101   	strb r1, r10, 5	// store the key in the LEDs
IMEM:0x0000001F INSTR:0x7FF60011    01111111111101100000000000010001    mov r27, 17
IMEM:0x00000020 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000021 INSTR:0x65C00008    01100101110000000000000000001000   	b_lt	 8
IMEM:0x00000022 INSTR:0x7FF60014    01111111111101100000000000010100    mov r27, 20
IMEM:0x00000023 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000024 INSTR:0x66400005    01100110010000000000000000000101   	b_gt	 5
IMEM:0x00000025 INSTR:0x07C42001    00000111110001000010000000000001   	add r2, r2, 1
IMEM:0x00000026 INSTR:0x0FC42001    00001111110001000010000000000001   	and r2, r2, 1	// Toggle r2
IMEM:0x00000027 INSTR:0x07F02000    00000111111100000010000000000000   	add r24, r2, 0		// 0 or 1 for selection
IMEM:0x00000028 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0
IMEM:0x00000029 INSTR:0x67C00225    01100111110000000000001000100101   	b		 549
IMEM:0x0000002A INSTR:0x7FF0003F    01111111111100000000000000111111   Done_set_fb_0:	mov r24, 63
IMEM:0x0000002B INSTR:0x07F7B000    00000111111101111011000000000000   Main_not_an_arrow:	add r27, r27, 0	//noop
IMEM:0x0000002C INSTR:0x7FF60031    01111111111101100000000000110001    mov r27, 49
IMEM:0x0000002D INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000002E INSTR:0x78440000    01111000010001000000000000000000   	mov_eq	r2, 0				// if 1, set selection to 0
IMEM:0x0000002F INSTR:0x7FF60032    01111111111101100000000000110010    mov r27, 50
IMEM:0x00000030 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000031 INSTR:0x78440001    01111000010001000000000000000001   	mov_eq	r2, 1				// if 2, set selection to 1
IMEM:0x00000032 INSTR:0x77C40001    01110111110001000000000000000001   	cmp r2, 1
IMEM:0x00000033 INSTR:0x78F000F0    01111000111100000000000011110000   	mov_ne r24, 240
IMEM:0x00000034 INSTR:0x77C40001    01110111110001000000000000000001   	cmp r2, 1
IMEM:0x00000035 INSTR:0x787000CE    01111000011100000000000011001110   	mov_eq r24, 206
IMEM:0x00000036 INSTR:0x7FE60002    01111111111001100000000000000010   	mov r19, 2		// Signal to subroutine to return here
IMEM:0x00000037 INSTR:0x67C00202    01100111110000000000001000000010   	b		 514
IMEM:0x00000038 INSTR:0x77C40001    01110111110001000000000000000001   Done_switch_fb_1:	cmp r2, 1
IMEM:0x00000039 INSTR:0x78F000F0    01111000111100000000000011110000   	mov_ne r24, 240
IMEM:0x0000003A INSTR:0x77C40001    01110111110001000000000000000001   	cmp r2, 1
IMEM:0x0000003B INSTR:0x787000CE    01111000011100000000000011001110   	mov_eq r24, 206
IMEM:0x0000003C INSTR:0x7FE60020    01111111111001100000000000100000   	mov r19, 32
IMEM:0x0000003D INSTR:0x67C00211    01100111110000000000001000010001   	b		 529			// r24 has the appropriate color
IMEM:0x0000003E INSTR:0x7FE60010    01111111111001100000000000010000   Done_set_fb_1:	mov r19, 16
IMEM:0x0000003F INSTR:0x67C00285    01100111110000000000001010000101   	b		 645
IMEM:0x00000040 INSTR:0x97C40001    10010111110001000000000000000001   Done_copy_fb_1:	tst r2, 1
IMEM:0x00000041 INSTR:0x60400003    01100000010000000000000000000011   	b_eq	 3			// If r2=0, start Game of Life
IMEM:0x00000042 INSTR:0x67C00001    01100111110000000000000000000001   	b		 1	// Else, Image Processing
IMEM:0x00000043 INSTR:0xFF800000    11111111100000000000000000000000   	halt
IMEM:0x00000044 INSTR:0x67FFFFBA    01100111111111111111111110111010   	b	 -70		// start with Main_menu
IMEM:0x00000045 INSTR:0x7FF60000    01111111111101100000000000000000   Start_image_proc:	mov r27, 0
IMEM:0x00000046 INSTR:0x7FF60000    01111111111101100000000000000000   Start_gol:			mov r27, 0
IMEM:0x00000047 INSTR:0x7FF00000    01111111111100000000000000000000   	mov r24, 0
IMEM:0x00000048 INSTR:0x67C000ED    01100111110000000000000011101101   	b	 237
IMEM:0x00000049 INSTR:0x7FDE0101    01111111110111100000000100000001   Done_setup_lut:		mov	r15, 257			// 0x0101
IMEM:0x0000004A INSTR:0x7FF60010    01111111111101100000000000010000   	mov r27, 16				// Shift size
IMEM:0x0000004B INSTR:0x7F9EFD80    01111111100111101111110110000000   	mov r15, r15, r27 LSL	// Left shift by 2 bytes
IMEM:0x0000004C INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8
IMEM:0x0000004D INSTR:0x27DEF101    00100111110111101111000100000001   	or	r15, r15, 257		// r15 now has 0x01010101
IMEM:0x0000004E INSTR:0x7FB6FD80    01111111101101101111110110000000   	mov r27, r15, r27 LSL	// Left shift by 2 bytes
IMEM:0x0000004F INSTR:0x27DFB001    00100111110111111011000000000001   	or	r15, r27, 1			// r15 now has 0x0101010101
IMEM:0x00000050 INSTR:0x7FF40FFF    01111111111101000000111111111111   	MOV R26,	4095
IMEM:0x00000051 INSTR:0x7FF6001C    01111111111101100000000000011100   	MOV R27,	28
IMEM:0x00000052 INSTR:0x7F95AD80    01111111100101011010110110000000   	MOV R10,	R26, R27 LSL		// R10 <- _INIT << _SHIFT
IMEM:0x00000053 INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x00000054 INSTR:0x7FCA0002    01111111110010100000000000000010   	mov r5, 2	// FB1, color mode
IMEM:0x00000055 INSTR:0xD7954000    11010111100101010100000000000000   	strb r5, r10, 0
IMEM:0x00000056 INSTR:0x7FCA0000    01111111110010100000000000000000   	mov r5, 0	// get rid of extra color bit
IMEM:0x00000057 INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x00000058 INSTR:0xD7ED4010    11010111111011010100000000010000   	strb r27, r10, 16
IMEM:0x00000059 INSTR:0x7FC08000    01111111110000001000000000000000   	mov r0, 32768
IMEM:0x0000005A INSTR:0x07C0007F    00000111110000000000000001111111   	add r0, r0, 127		// move it to the middle of the row
IMEM:0x0000005B INSTR:0x07C60000    00000111110001100000000000000000   	add r3, r0, 0	//address
IMEM:0x0000005C INSTR:0xAF906000    10101111100100000110000000000000   	ldrb r4, r3, 0	//data
IMEM:0x0000005D INSTR:0x7FF600FF    01111111111101100000000011111111   	mov r27, 255
IMEM:0x0000005E INSTR:0xD7ED4005    11010111111011010100000000000101   	strb r27, r10, 5	// start with all LED's on
IMEM:0x0000005F INSTR:0x97B64000    10010111101101100100000000000000   	tst r27, r4, 1	// get bottom bit
IMEM:0x00000060 INSTR:0x7872003F    01111000011100100000000000111111   	mov_eq r25, 63		//is dead? => dark grey
IMEM:0x00000061 INSTR:0x97B64000    10010111101101100100000000000000   	tst r27, r4, 1	// get bottom bit
IMEM:0x00000062 INSTR:0x78F20031    01111000111100100000000000110001   	mov_ne r25, 49	//else => light grey
IMEM:0x00000063 INSTR:0xD7E40000    11010111111001000000000000000000   	strb r25, r0, 0
IMEM:0x00000064 INSTR:0x7FC40000    01111111110001000000000000000000   	mov r2, 0
IMEM:0x00000065 INSTR:0x7FE20000    01111111111000100000000000000000    mov r17, 0
IMEM:0x00000066 INSTR:0x18000000    00011000000000000000000000000000   	RETURN 2
IMEM:0x00000067 INSTR:0x7FF2FFFF    01111111111100101111111111111111   Main_loop: mov r25, 65535	// 0x0FFFF
IMEM:0x00000068 INSTR:0x07F59001    00000111111101011001000000000001   	add r26, r25, 1			// 0x10000
IMEM:0x00000069 INSTR:0x07B79D00    00000111101101111001110100000000   	add r27, r25, r26		// 0x1FFFF
IMEM:0x0000006A INSTR:0x0F800D80    00001111100000000000110110000000   	and r0, r0, r27	// don't let the cursor get out of the FB's
IMEM:0x0000006B INSTR:0x7FF60002    01111111111101100000000000000010    mov r27, 2
IMEM:0x0000006C INSTR:0xAFED400F    10101111111011010100000000001111   Wait_kbd:	ldrb r27, r10, 15
IMEM:0x0000006D INSTR:0x97F60002    10010111111101100000000000000010   	tst r27, 2 // is 2 set?
IMEM:0x0000006E INSTR:0x607FFFFC    01100000011111111111111111111100   	b_eq  -4
IMEM:0x0000006F INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x00000070 INSTR:0xD7ED400F    11010111111011010100000000001111   	strb r27, r10, 15
IMEM:0x00000071 INSTR:0x0FF71003    00001111111101110001000000000011    and r27, r17, 3
IMEM:0x00000072 INSTR:0x77F60000    01110111111101100000000000000000    cmp r27, 0
IMEM:0x00000073 INSTR:0x78420061    01111000010000100000000001100001    mov_eq r1, 97
IMEM:0x00000074 INSTR:0x77F60000    01110111111101100000000000000000    cmp r27, 0
IMEM:0x00000075 INSTR:0x00421001    00000000010000100001000000000001    add_eq r1, r1, 1
IMEM:0x00000076 INSTR:0x77F60001    01110111111101100000000000000001    cmp r27, 1
IMEM:0x00000077 INSTR:0x7842000D    01111000010000100000000000001101    mov_eq r1, 13
IMEM:0x00000078 INSTR:0x77F60002    01110111111101100000000000000010    cmp r27, 2
IMEM:0x00000079 INSTR:0x7842001B    01111000010000100000000000011011    mov_eq r1, 27
IMEM:0x0000007A INSTR:0x77F60003    01110111111101100000000000000011    cmp r27, 3
IMEM:0x0000007B INSTR:0x7842001B    01111000010000100000000000011011    mov_eq r1, 27
IMEM:0x0000007C INSTR:0x07E31001    00000111111000110001000000000001    add r17, r17, 1
IMEM:0x0000007D INSTR:0xAF854012    10101111100001010100000000010010   	ldrb r1, r10, 18	// get the key
IMEM:0x0000007E INSTR:0xD7854005    11010111100001010100000000000101   	strb r1, r10, 5	// store the key in the LEDs
IMEM:0x0000007F INSTR:0x7FF60030    01111111111101100000000000110000    mov r27, 48
IMEM:0x00000080 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000081 INSTR:0x65C0000A    01100101110000000000000000001010   	b_lt	 10
IMEM:0x00000082 INSTR:0x7FF60039    01111111111101100000000000111001    mov r27, 57
IMEM:0x00000083 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000084 INSTR:0x66400007    01100110010000000000000000000111   	b_gt	 7
IMEM:0x00000085 INSTR:0x7FF6000F    01111111111101100000000000001111   	mov r27, 15			// 0x0F
IMEM:0x00000086 INSTR:0x0FAA1D80    00001111101010100001110110000000   	and r21, r1, r27	// bottom hex digit of number (0-9)
IMEM:0x00000087 INSTR:0x77CDFFFF    01110111110011011111111111111111   	cmp r6, -1			// Was it set to -1?
IMEM:0x00000088 INSTR:0x784C0000    01111000010011000000000000000000   	mov_eq r6, 0		// If so, set r6 to 0
IMEM:0x00000089 INSTR:0x7FF20004    01111111111100100000000000000100   	mov r25, 4			// Shift amount
IMEM:0x0000008A INSTR:0x7FB46C80    01111111101101000110110010000000   	mov r26, r6, r25 LSL	// r26 <- Previous number << 4
IMEM:0x0000008B INSTR:0x078DAA80    00000111100011011010101010000000   	add r6, r26, r21
IMEM:0x0000008C INSTR:0x67FFFFDE    01100111111111111111111111011110   	b		 -34
IMEM:0x0000008D INSTR:0x07F5A000    00000111111101011010000000000000   Not_a_number: add r26, r26, 0	//noop
IMEM:0x0000008E INSTR:0x77CDFFFF    01110111110011011111111111111111   	cmp r6, -1			// Was it set to -1?
IMEM:0x0000008F INSTR:0x784C0001    01111000010011000000000000000001   	mov_eq r6, 1		// If so, set r6 to 1
IMEM:0x00000090 INSTR:0x07F7B000    00000111111101111011000000000000   RepeatKey_loop:	add r27, r27, 0	//noop
IMEM:0x00000091 INSTR:0x7FF60011    01111111111101100000000000010001    mov r27, 17
IMEM:0x00000092 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000093 INSTR:0x30400100    00110000010000000000000100000000   	sub_eq r0, r0, 256	// if so, move up a row
IMEM:0x00000094 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000095 INSTR:0x6040006B    01100000010000000000000001101011   	b_eq	 107
IMEM:0x00000096 INSTR:0x7FF60012    01111111111101100000000000010010    mov r27, 18
IMEM:0x00000097 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000098 INSTR:0x30400001    00110000010000000000000000000001   	sub_eq r0, r0, 1	// if so, move left a column
IMEM:0x00000099 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000009A INSTR:0x60400066    01100000010000000000000001100110   	b_eq	 102
IMEM:0x0000009B INSTR:0x7FF60013    01111111111101100000000000010011    mov r27, 19
IMEM:0x0000009C INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000009D INSTR:0x00400100    00000000010000000000000100000000   	add_eq r0, r0, 256	// if so, move down a row
IMEM:0x0000009E INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000009F INSTR:0x60400061    01100000010000000000000001100001   	b_eq	 97
IMEM:0x000000A0 INSTR:0x7FF60014    01111111111101100000000000010100    mov r27, 20
IMEM:0x000000A1 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000A2 INSTR:0x00400001    00000000010000000000000000000001   	add_eq r0, r0, 1	// if so, move right a row
IMEM:0x000000A3 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000A4 INSTR:0x6040005C    01100000010000000000000001011100   	b_eq	 92
IMEM:0x000000A5 INSTR:0x7FF60020    01111111111101100000000000100000    mov r27, 32
IMEM:0x000000A6 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000A7 INSTR:0x60C00005    01100000110000000000000000000101   	b_ne	 5	//skip ahead if not space
IMEM:0x000000A8 INSTR:0x0FF24001    00001111111100100100000000000001   	and r25, r4, 1		//get bottom bit of previous value
IMEM:0x000000A9 INSTR:0x77F20001    01110111111100100000000000000001   	cmp r25, 1			// check bit0
IMEM:0x000000AA INSTR:0x20C84001    00100000110010000100000000000001   	or_ne r4, r4, 1		// toggle off to on
IMEM:0x000000AB INSTR:0x77F20001    01110111111100100000000000000001   	cmp r25, 1			// check bit0
IMEM:0x000000AC INSTR:0x08484FFE    00001000010010000100111111111110   	and_eq r4, r4, -2	// toggle on to off	(and with 2_11110)
IMEM:0x000000AD INSTR:0x67C00053    01100111110000000000000001010011   	b	 83
IMEM:0x000000AE INSTR:0x07F7B000    00000111111101111011000000000000   Not_space:	add r27, r27, 0	//noop
IMEM:0x000000AF INSTR:0x7FF60009    01111111111101100000000000001001    mov r27, 9
IMEM:0x000000B0 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0	// Signal to switch_fb.s to return to ui_main.s
IMEM:0x000000B1 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000B2 INSTR:0x60C00001    01100000110000000000000000000001   	b_ne	 1	// if not 9, skip to next step in code
IMEM:0x000000B3 INSTR:0x67C00186    01100111110000000000000110000110   	b		 390	// branch to subroutine
IMEM:0x000000B4 INSTR:0x67C0004C    01100111110000000000000001001100   	b  76
IMEM:0x000000B5 INSTR:0x07F7B000    00000111111101111011000000000000   Not_tab:	add r27, r27, 0	//noop
IMEM:0x000000B6 INSTR:0x7FF6001B    01111111111101100000000000011011    mov r27, 27
IMEM:0x000000B7 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000B8 INSTR:0x60400250    01100000010000000000001001010000   	b_eq	 592	// branch to subroutine that returns to main menu
IMEM:0x000000B9 INSTR:0x7FF60041    01111111111101100000000001000001    mov r27, 65
IMEM:0x000000BA INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000BB INSTR:0x60C00005    01100000110000000000000000000101   	b_ne  5		// If not the 'a' key, skip to the next step in code
IMEM:0x000000BC INSTR:0xE7E40000    11100111111001000000000000000000   	ldneighbor r25, r0, 0		// get this neighborhood
IMEM:0x000000BD INSTR:0x0FB39780    00001111101100111001011110000000   	and r25, r25, r15			// and it with summing mask (masks out all but
IMEM:0x000000BE INSTR:0x0FB5A780    00001111101101011010011110000000   	and r26, r26, r15			// bit0 of each pixel
IMEM:0x000000BF INSTR:0x47B19D00    01000111101100011001110100000000   	accumbytes r24, r25, r26	// get the nbrhd sum
IMEM:0x000000C0 INSTR:0xD7E14005    11010111111000010100000000000101   	strb r24, r10, 5		// write the value to the LEDs
IMEM:0x000000C1 INSTR:0x67C0003F    01100111110000000000000000111111   	b  63
IMEM:0x000000C2 INSTR:0x07F7B000    00000111111101111011000000000000   Not_a:		add r27, r27, 0	//noop
IMEM:0x000000C3 INSTR:0x7FF60043    01111111111101100000000001000011    mov r27, 67
IMEM:0x000000C4 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000C5 INSTR:0x60C00003    01100000110000000000000000000011   	b_ne  3		// If not the 'c' key, skip to the next step in code
IMEM:0x000000C6 INSTR:0xD7900000    11010111100100000000000000000000   	strb r4, r0, 0		// Store the cursor with its previous value
IMEM:0x000000C7 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0			// Signal to return to ui_main.s
IMEM:0x000000C8 INSTR:0x67C001FC    01100111110000000000000111111100   	b	 508
IMEM:0x000000C9 INSTR:0xAF900000    10101111100100000000000000000000   Done_copy_fb_0:	ldrb r4, r0, 0	// Restore the cursor
IMEM:0x000000CA INSTR:0x07F7B000    00000111111101111011000000000000   Not_c:		add r27, r27, 0	//noop
IMEM:0x000000CB INSTR:0x7FF60053    01111111111101100000000001010011    mov r27, 83
IMEM:0x000000CC INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000CD INSTR:0x60C0000D    01100000110000000000000000001101   	b_ne  13		// If not the 's' key, skip to the next step in code
IMEM:0x000000CE INSTR:0x7FE60142    01111111111001100000000101000010   	mov r19, 322	// Signal to return to ui_main.s
IMEM:0x000000CF INSTR:0x77CC0000    01110111110011000000000000000000   	cmp r6, 0			// Did the user enter the easter-egg command? (Rainbow)
IMEM:0x000000D0 INSTR:0x604001C4    01100000010000000000000111000100   	b_eq	 452
IMEM:0x000000D1 INSTR:0x7FF000A8    01111111111100000000000010101000   	mov r24, 168
IMEM:0x000000D2 INSTR:0x77CC0002    01110111110011000000000000000010   	cmp r6, 2			// What was the user input?
IMEM:0x000000D3 INSTR:0x06706000    00000110011100000110000000000000   	add_gt	r24, r6, 0	// If it wasn't 0 or 1, use that as the color to set_fb
IMEM:0x000000D4 INSTR:0x7FE60142    01111111111001100000000101000010   	mov r19, 322	// Signal to return to ui_main.s
IMEM:0x000000D5 INSTR:0x67C00179    01100111110000000000000101111001   	b	 377
IMEM:0x000000D6 INSTR:0x07F7B000    00000111111101111011000000000000   Done_set_fb_3:		add r27, r27, 0	//noop
IMEM:0x000000D7 INSTR:0x7FE600A2    01111111111001100000000010100010   	mov r19, 162	// Signal to return to ui_main.s
IMEM:0x000000D8 INSTR:0x67C001EC    01100111110000000000000111101100   	b	 492
IMEM:0x000000D9 INSTR:0x07F7B000    00000111111101111011000000000000   Done_copy_fb_3:		add r27, r27, 0	//noop
IMEM:0x000000DA INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x000000DB INSTR:0x67FFFF8A    01100111111111111111111110001010   	b	 -118
IMEM:0x000000DC INSTR:0x07F7B000    00000111111101111011000000000000   Not_s:		add r27, r27, 0	//noop
IMEM:0x000000DD INSTR:0x7FF60008    01111111111101100000000000001000    mov r27, 8
IMEM:0x000000DE INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000DF INSTR:0x60C00006    01100000110000000000000000000110   	b_ne  6	// If not BACKSPACE, skip to the next step in code
IMEM:0x000000E0 INSTR:0x7FF000A8    01111111111100000000000010101000   	mov r24, 168_1
IMEM:0x000000E1 INSTR:0x97CA0001    10010111110010100000000000000001   	tst r5, 1
IMEM:0x000000E2 INSTR:0x78F000A8    01111000111100000000000010101000   	mov_ne r24, 168_2
IMEM:0x000000E3 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0	// Signal to clear_board.s to return to ui_main.s
IMEM:0x000000E4 INSTR:0x67C001C2    01100111110000000000000111000010   	b	 450		//branch to subroutine
IMEM:0x000000E5 INSTR:0x07F7B000    00000111111101111011000000000000   Done_clear_board_0: 	add r27, r27, 0	//noop
IMEM:0x000000E6 INSTR:0x07F7B000    00000111111101111011000000000000   Done_clear_board_1: 	add r27, r27, 0	//noop
IMEM:0x000000E7 INSTR:0x07F7B000    00000111111101111011000000000000   Not_backspace:		add r27, r27, 0	//noop
IMEM:0x000000E8 INSTR:0x7FF60071    01111111111101100000000001110001    mov r27, 113
IMEM:0x000000E9 INSTR:0x7783B000    01110111100000111011000000000000   	cmp	r1, r27
IMEM:0x000000EA INSTR:0x66400005    01100110010000000000000000000101   	b_gt	 5	// Bad input. Skip to next code
IMEM:0x000000EB INSTR:0x7FF60061    01111111111101100000000001100001    mov r27, 97
IMEM:0x000000EC INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000ED INSTR:0x65C00002    01100101110000000000000000000010   	b_lt	 2	// Bad input. Skip to next code
IMEM:0x000000EE INSTR:0x37821D80    00110111100000100001110110000000   	sub r1, r1, r27			// Get letter's index (0-16)
IMEM:0x000000EF INSTR:0x67C001EA    01100111110000000000000111101010   	b		 490
IMEM:0x000000F0 INSTR:0x07F7B000    00000111111101111011000000000000   Done_plot_obj:	add r27, r27, 0	//noop
IMEM:0x000000F1 INSTR:0x07F7B000    00000111111101111011000000000000   Not_a_letter:	add r27, r27, 0	//noop
IMEM:0x000000F2 INSTR:0x7FF6004E    01111111111101100000000001001110    mov r27, 78
IMEM:0x000000F3 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0	// Signal to proc_nbrhd.s to return to ui_main.s
IMEM:0x000000F4 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000F5 INSTR:0x604000FC    01100000010000000000000011111100   	b_eq	 252	// If so, process this nbrhd with GoL 
IMEM:0x000000F6 INSTR:0x7FF6000D    01111111111101100000000000001101    mov r27, 13
IMEM:0x000000F7 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000F8 INSTR:0x60C00005    01100000110000000000000000000101   	b_ne	 5	// If not, skip this code
IMEM:0x000000F9 INSTR:0xD7900000    11010111100100000000000000000000   	strb r4, r0, 0		// Replace the cursor with its previous value
IMEM:0x000000FA INSTR:0x7FE60001    01111111111001100000000000000001   	mov	r19, 1	// Signal to proc_nbrhd.s to return to proc_1_generation.s
IMEM:0x000000FB INSTR:0x67C000DB    01100111110000000000000011011011   	b	 219	// If so, process 1 GoL generation
IMEM:0x000000FC INSTR:0xAF900000    10101111100100000000000000000000   Done_Process_1_Gen:		ldrb r4, r0, 0
IMEM:0x000000FD INSTR:0x7FE60000    01111111111001100000000000000000   	mov	r19, 0			// Signal to proc_nbrhd.s to return to proc_1_generation.s
IMEM:0x000000FE INSTR:0x67C0013B    01100111110000000000000100111011   	b		 315	// branch to subroutine
IMEM:0x000000FF INSTR:0x07F7B000    00000111111101111011000000000000   Not_enter: 	add r27, r27, 0	//noop
IMEM:0x00000100 INSTR:0x07F7B000    00000111111101111011000000000000   Done_switch_fb_0:	add r27, r27, 0	//noop
IMEM:0x00000101 INSTR:0x07F7B000    00000111111101111011000000000000   Done_proc_nbrhd_0: 	add r27, r27, 0	//noop
IMEM:0x00000102 INSTR:0x07F7B000    00000111111101111011000000000000   Move_cursor:	add r27, r27, 0	// noop
IMEM:0x00000103 INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8				// Shift amount
IMEM:0x00000104 INSTR:0x7FB20DA0    01111111101100100000110110100000   	mov r25, r0, r27 LSR	// Get the Y-coord
IMEM:0x00000105 INSTR:0x7FF600FF    01111111111101100000000011111111   	mov r27, 255			// Lower byte mask
IMEM:0x00000106 INSTR:0x0FB39D80    00001111101100111001110110000000   	and r25, r25, r27		// Mask off the FB bit if it was there
IMEM:0x00000107 INSTR:0x0FB40D80    00001111101101000000110110000000   	and r26, r0, r27		// Get the X-coord
IMEM:0x00000108 INSTR:0x7FF00003    01111111111100000000000000000011   	mov r24, 3
IMEM:0x00000109 INSTR:0x7FF600C8    01111111111101100000000011001000   	mov r27, 200
IMEM:0x0000010A INSTR:0x77B38000    01110111101100111000000000000000   	cmp r25, r24		// Compare Y-coord to TOP of board
IMEM:0x0000010B INSTR:0x05F3B000    00000101111100111011000000000000   	add_lt	r25, r27, 0	// If Y-coord is above boundary, wrap to bottom
IMEM:0x0000010C INSTR:0x77B3B000    01110111101100111011000000000000   	cmp r25, r27		// Compare Y-coord to BOTTOM of board
IMEM:0x0000010D INSTR:0x06738000    00000110011100111000000000000000   	add_gt	r25, r24, 0	// If below bottom, wrap to top
IMEM:0x0000010E INSTR:0x7FF000FC    01111111111100000000000011111100   	mov r24, 252
IMEM:0x0000010F INSTR:0x7FF60003    01111111111101100000000000000011   	mov r27, 3
IMEM:0x00000110 INSTR:0x77B58000    01110111101101011000000000000000   	cmp r26, r24
IMEM:0x00000111 INSTR:0x0675B000    00000110011101011011000000000000   	add_gt	r26, r27, 0	// If X-coord is right of boundary, wrap to left
IMEM:0x00000112 INSTR:0x77B5B000    01110111101101011011000000000000   	cmp r26, r27
IMEM:0x00000113 INSTR:0x05F58000    00000101111101011000000000000000   	add_lt	r26, r24, 0	// If left of boundary, wrap to right
IMEM:0x00000114 INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8			// Shift amount
IMEM:0x00000115 INSTR:0x7FB19D80    01111111101100011001110110000000   	mov r24, r25, r27 LSL
IMEM:0x00000116 INSTR:0x07818D00    00000111100000011000110100000000   	add r0, r24, r26	// r0 has [Y][X]
IMEM:0x00000117 INSTR:0x7FF4FFFF    01111111111101001111111111111111   	mov r26, 65535		// r26 has 0x0FFFF
IMEM:0x00000118 INSTR:0x07F7A001    00000111111101111010000000000001   	add r27, r26, 1		// r27 has 0x10000
IMEM:0x00000119 INSTR:0x77CA0001    01110111110010100000000000000001   	cmp r5, 1			// In FB2?
IMEM:0x0000011A INSTR:0x00000D80    00000000000000000000110110000000   	add_eq r0, r0, r27	// If so, add 0x10000
IMEM:0x0000011B INSTR:0xD7906000    11010111100100000110000000000000   	strb r4, r3, 0
IMEM:0x0000011C INSTR:0x07C60000    00000111110001100000000000000000   	add r3, r0, 0
IMEM:0x0000011D INSTR:0xAF900000    10101111100100000000000000000000   	ldrb r4, r0, 0 	//pixel's current value
IMEM:0x0000011E INSTR:0x0FF64001    00001111111101100100000000000001   	and r27, r4, 1	// get bottom bit
IMEM:0x0000011F INSTR:0x77F60000    01110111111101100000000000000000   	cmp r27, 0	
IMEM:0x00000120 INSTR:0x7870003F    01111000011100000000000000111111   	mov_eq r24, 63
IMEM:0x00000121 INSTR:0x77F60000    01110111111101100000000000000000   	cmp r27, 0
IMEM:0x00000122 INSTR:0x78F00031    01111000111100000000000000110001   	mov_ne r24, 49
IMEM:0x00000123 INSTR:0xD7E00000    11010111111000000000000000000000   	strb r24, r0, 0
IMEM:0x00000124 INSTR:0x77CC0000    01110111110011000000000000000000   	cmp r6, 0	
IMEM:0x00000125 INSTR:0x60C00006    01100000110000000000000000000110   	b_ne	 6
IMEM:0x00000126 INSTR:0xAFED400F    10101111111011010100000000001111   	ldrb r27, r10, 15
IMEM:0x00000127 INSTR:0x97F60002    10010111111101100000000000000010   	tst r27, 2 				// is 2 set?
IMEM:0x00000128 INSTR:0x607FFF66    01100000011111111111111101100110   	b_eq	 -154		// if not, continue looping
IMEM:0x00000129 INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x0000012A INSTR:0xD7ED400F    11010111111011010100000000001111   	strb r27, r10, 15
IMEM:0x0000012B INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x0000012C INSTR:0x67FFFF39    01100111111111111111111100111001   	b  -199
IMEM:0x0000012D INSTR:0xAFED400F    10101111111011010100000000001111   Not_infinite_loop:	ldrb r27, r10, 15
IMEM:0x0000012E INSTR:0x97F60002    10010111111101100000000000000010   	tst r27, 2 				// is 2 set?
IMEM:0x0000012F INSTR:0x78CDFFFF    01111000110011011111111111111111   	mov_ne r6, -1					// if so, reset repeat counter
IMEM:0x00000130 INSTR:0x97F60002    10010111111101100000000000000010   	tst r27, 2 				// is 2 set?
IMEM:0x00000131 INSTR:0x60FFFF34    01100000111111111111111100110100   	b_ne	 -204				// if so, break out of loop
IMEM:0x00000132 INSTR:0x37CC6001    00110111110011000110000000000001   	sub r6, r6, 1			// Decrement repeat counter
IMEM:0x00000133 INSTR:0x60FFFF5B    01100000111111111111111101011011   	b_ne	 -165
IMEM:0x00000134 INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x00000135 INSTR:0x67FFFF30    01100111111111111111111100110000   	b  -208
IMEM:0x00000136 INSTR:0x67FFFEC8    01100111111111111111111011001000   	b	 -312
IMEM:0x00000137 INSTR:0x0FF5A000    00001111111101011010000000000000    and r26,r26, 0
IMEM:0x00000138 INSTR:0x07F9A00B    00000111111110011010000000001011    add R28,r26, 11
IMEM:0x00000139 INSTR:0x27F5A000    00100111111101011010000000000000    or r26,r26, 0
IMEM:0x0000013A INSTR:0x7FB5AE00    01111111101101011010111000000000    mov r26, r26, R28 lsl
IMEM:0x0000013B INSTR:0x27F5A040    00100111111101011010000001000000    or r26, r26, 64
IMEM:0x0000013C INSTR:0x7FB5AE00    01111111101101011010111000000000    mov r26, r26, R28 lsl
IMEM:0x0000013D INSTR:0x27F5A00A    00100111111101011010000000001010    or r26, r26, 10
IMEM:0x0000013E INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000013F INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000140 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000141 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000142 INSTR:0x27F7B040    00100111111101111011000001000000    or r27, r27, 64
IMEM:0x00000143 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000144 INSTR:0x27F7B0FF    00100111111101111011000011111111    or r27, r27, 255
IMEM:0x00000145 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000146 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000147 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000148 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000149 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000014A INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000014B INSTR:0x27F7B040    00100111111101111011000001000000    or r27, r27, 64
IMEM:0x0000014C INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000014D INSTR:0x27F7B37D    00100111111101111011001101111101    or r27, r27, 893
IMEM:0x0000014E INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x0000014F INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000150 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000151 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000152 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000153 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000154 INSTR:0x27F7B040    00100111111101111011000001000000    or r27, r27, 64
IMEM:0x00000155 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000156 INSTR:0x27F7B3BD    00100111111101111011001110111101    or r27, r27, 957
IMEM:0x00000157 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000158 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000159 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000015A INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000015B INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000015C INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000015D INSTR:0x27F7B040    00100111111101111011000001000000    or r27, r27, 64
IMEM:0x0000015E INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000015F INSTR:0x27F7B40E    00100111111101111011010000001110    or r27, r27, 1038
IMEM:0x00000160 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000161 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000162 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000163 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000164 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000165 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000166 INSTR:0x27F7B040    00100111111101111011000001000000    or r27, r27, 64
IMEM:0x00000167 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000168 INSTR:0x27F7B4B7    00100111111101111011010010110111    or r27, r27, 1207
IMEM:0x00000169 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x0000016A INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x0000016B INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000016C INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000016D INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000016E INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000016F INSTR:0x27F7B041    00100111111101111011000001000001    or r27, r27, 65
IMEM:0x00000170 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000171 INSTR:0x27F7B13B    00100111111101111011000100111011    or r27, r27, 315
IMEM:0x00000172 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000173 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000174 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000175 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000176 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000177 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000178 INSTR:0x27F7B041    00100111111101111011000001000001    or r27, r27, 65
IMEM:0x00000179 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000017A INSTR:0x27F7B232    00100111111101111011001000110010    or r27, r27, 562
IMEM:0x0000017B INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x0000017C INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x0000017D INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000017E INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000017F INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000180 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000181 INSTR:0x27F7B041    00100111111101111011000001000001    or r27, r27, 65
IMEM:0x00000182 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000183 INSTR:0x27F7B39A    00100111111101111011001110011010    or r27, r27, 922
IMEM:0x00000184 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000185 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000186 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000187 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000188 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000189 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000018A INSTR:0x27F7B041    00100111111101111011000001000001    or r27, r27, 65
IMEM:0x0000018B INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000018C INSTR:0x27F7B3AF    00100111111101111011001110101111    or r27, r27, 943
IMEM:0x0000018D INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x0000018E INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x0000018F INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000190 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000191 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000192 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000193 INSTR:0x27F7B041    00100111111101111011000001000001    or r27, r27, 65
IMEM:0x00000194 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000195 INSTR:0x27F7B46C    00100111111101111011010001101100    or r27, r27, 1132
IMEM:0x00000196 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000197 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000198 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000199 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000019A INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000019B INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000019C INSTR:0x27F7B043    00100111111101111011000001000011    or r27, r27, 67
IMEM:0x0000019D INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000019E INSTR:0x27F7B205    00100111111101111011001000000101    or r27, r27, 517
IMEM:0x0000019F INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001A0 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001A1 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001A2 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001A3 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001A4 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001A5 INSTR:0x27F7B044    00100111111101111011000001000100    or r27, r27, 68
IMEM:0x000001A6 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001A7 INSTR:0x27F7B728    00100111111101111011011100101000    or r27, r27, 1832
IMEM:0x000001A8 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001A9 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001AA INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001AB INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001AC INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001AD INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001AE INSTR:0x27F7B045    00100111111101111011000001000101    or r27, r27, 69
IMEM:0x000001AF INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001B0 INSTR:0x27F7B2D9    00100111111101111011001011011001    or r27, r27, 729
IMEM:0x000001B1 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001B2 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001B3 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001B4 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001B5 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001B6 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001B7 INSTR:0x27F7B045    00100111111101111011000001000101    or r27, r27, 69
IMEM:0x000001B8 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001B9 INSTR:0x27F7B333    00100111111101111011001100110011    or r27, r27, 819
IMEM:0x000001BA INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001BB INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001BC INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001BD INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001BE INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001BF INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001C0 INSTR:0x27F7B045    00100111111101111011000001000101    or r27, r27, 69
IMEM:0x000001C1 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001C2 INSTR:0x27F7B643    00100111111101111011011001000011    or r27, r27, 1603
IMEM:0x000001C3 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001C4 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001C5 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001C6 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001C7 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001C8 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001C9 INSTR:0x27F7B045    00100111111101111011000001000101    or r27, r27, 69
IMEM:0x000001CA INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001CB INSTR:0x27F7B66A    00100111111101111011011001101010    or r27, r27, 1642
IMEM:0x000001CC INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001CD INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001CE INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001CF INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001D0 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001D1 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001D2 INSTR:0x27F7B045    00100111111101111011000001000101    or r27, r27, 69
IMEM:0x000001D3 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001D4 INSTR:0x27F7B74B    00100111111101111011011101001011    or r27, r27, 1867
IMEM:0x000001D5 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001D6 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001D7 INSTR:0x67FFFE70    01100111111111111111111001110000   	b	 -400		// Return from subroutine
IMEM:0x000001D8 INSTR:0x07F7B000    00000111111101111011000000000000   Process_1_Gen:	add r27, r27, 0	//noop
IMEM:0x000001D9 INSTR:0x07EA0000    00000111111010100000000000000000   	add r21, r0, 0
IMEM:0x000001DA INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8			// Shift value
IMEM:0x000001DB INSTR:0x7FB25D80    01111111101100100101110110000000   	mov r25, r5, r27 LSL	// Shift the FB bit to 0x100
IMEM:0x000001DC INSTR:0x07F39003    00000111111100111001000000000011   	add r25, r25, 3
IMEM:0x000001DD INSTR:0x7FF40003    01111111111101000000000000000011   	mov r26, 3
IMEM:0x000001DE INSTR:0x7F819D80    01111111100000011001110110000000   	mov r0, r25, r27 LSL	// Shift FB-bit & Y-coord over a byte
IMEM:0x000001DF INSTR:0x07800D00    00000111100000000000110100000000   	add r0, r0, r26			// Add in the X-coord to bottom byte
IMEM:0x000001E0 INSTR:0x7FEC00FC    01111111111011000000000011111100   	mov r22, 252
IMEM:0x000001E1 INSTR:0x7FF400C8    01111111111101000000000011001000   	mov r26, 200
IMEM:0x000001E2 INSTR:0x7FAE5D80    01111111101011100101110110000000   	mov r23, r5, r27 LSL	// Shift FB-bit to 0x100 or 0x000
IMEM:0x000001E3 INSTR:0x07AF7D00    00000111101011110111110100000000   	add r23, r23, r26		// Add Bottom y-coord to it
IMEM:0x000001E4 INSTR:0x7FAF7D80    01111111101011110111110110000000   	mov r23, r23, r27 LSL	// Shift them over a byte
IMEM:0x000001E5 INSTR:0x07AF7B00    00000111101011110111101100000000   	add r23, r23, r22		// r23 has bottom right corner
IMEM:0x000001E6 INSTR:0x07F7B000    00000111111101111011000000000000   Generation_loop:	add r27, r27, 0	//noop
IMEM:0x000001E7 INSTR:0x67C0000A    01100111110000000000000000001010   	b	 10
IMEM:0x000001E8 INSTR:0x07F7B000    00000111111101111011000000000000   Done_proc_nbrhd_1:	add r27, r27, 0	//noop
IMEM:0x000001E9 INSTR:0x7FF600FF    01111111111101100000000011111111   	mov r27, 255		// 0x00FF
IMEM:0x000001EA INSTR:0x0FB40D80    00001111101101000000110110000000   	and r26, r0, r27	// Grab X-coord
IMEM:0x000001EB INSTR:0x77B56000    01110111101101010110000000000000   	cmp r26, r22		// Check if we're at the right border
IMEM:0x000001EC INSTR:0x00400007    00000000010000000000000000000111   	add_eq r0, r0, 7	// If so, add MARGIN amount to get to beginning of next row
IMEM:0x000001ED INSTR:0x77B56000    01110111101101010110000000000000   	cmp r26, r22		
IMEM:0x000001EE INSTR:0x00C00001    00000000110000000000000000000001   	add_ne r0, r0, 1	// If not, increment by 1
IMEM:0x000001EF INSTR:0x77817000    01110111100000010111000000000000   	cmp r0, r23			// Are we out of the board?
IMEM:0x000001F0 INSTR:0x66FFFFF4    01100110111111111111111111110100   	b_le	 -12
IMEM:0x000001F1 INSTR:0x07C15000    00000111110000010101000000000000   	add r0, r21, 0
IMEM:0x000001F2 INSTR:0x67FFFF08    01100111111111111111111100001000   	b  -248
IMEM:0x000001F3 INSTR:0x07F7B000    00000111111101111011000000000000   Process_this_nbrhd: add r27, r27, 0	//noop
IMEM:0x000001F4 INSTR:0x7FF00017    01111111111100000000000000010111   	mov r24, 23
IMEM:0x000001F5 INSTR:0xB7E30000    10110111111000110000000000000000   	ldrh r24, r24, 0		//a halfword mmr?
IMEM:0x000001F6 INSTR:0x37B60C00    00110111101101100000110000000000   	sub r27, r0, r24
IMEM:0x000001F7 INSTR:0xA7DB7FFF    10100111110110110111111111111111   	ldr r22, r27, -1
IMEM:0x000001F8 INSTR:0x7FF20008    01111111111100100000000000001000   	mov r25, 8			//amount to shift
IMEM:0x000001F9 INSTR:0x7FB36CA0    01111111101100110110110010100000   	mov r25, r22, r25 LSR
IMEM:0x000001FA INSTR:0x07B60C00    00000111101101100000110000000000   	add r27, r0, r24
IMEM:0x000001FB INSTR:0xA7DB7FFF    10100111110110110111111111111111   	ldr r22, r27, -1
IMEM:0x000001FC INSTR:0x7FF40010    01111111111101000000000000010000   	mov r26, 16			//amount to shift
IMEM:0x000001FD INSTR:0x7FB56D20    01111111101101010110110100100000   	mov r26, r22, r26 LSR
IMEM:0x000001FE INSTR:0xA7EC1FFF    10100111111011000001111111111111   	ldr r27, r0, -1
IMEM:0x000001FF INSTR:0x7FEC0018    01111111111011000000000000011000   	mov r22, 24			//amount to shift
IMEM:0x00000200 INSTR:0x7FB7BB20    01111111101101111011101100100000   	mov r27, r27, r22 LSR
IMEM:0x00000201 INSTR:0x7FEE00FF    01111111111011100000000011111111   	mov r23, 255			//lower byte mask
IMEM:0x00000202 INSTR:0x17B39B80    00010111101100111001101110000000   	bic r25, r25, r23		//clear lower byte of top reg
IMEM:0x00000203 INSTR:0x0FAD7D80    00001111101011010111110110000000   	and r22, r23, r27		//isolate lower byte of loaded
IMEM:0x00000204 INSTR:0x27B39B00    00100111101100111001101100000000   	or r25, r25, r22		//mix 'em - part F
IMEM:0x00000205 INSTR:0x7FEC0018    01111111111011000000000000011000   	mov r22, 24			//amount to shift offset
IMEM:0x00000206 INSTR:0x7FAF7B00    01111111101011110111101100000000   	mov r23, r23, r22 LSL
IMEM:0x00000207 INSTR:0x7FEC0008    01111111111011000000000000001000   	mov r22, 8			//amount to shift
IMEM:0x00000208 INSTR:0x7FB7BB00    01111111101101111011101100000000   	mov r27, r27, r22 LSL
IMEM:0x00000209 INSTR:0x0FB17D80    00001111101100010111110110000000   	and r24, r23, r27
IMEM:0x0000020A INSTR:0x27B58D00    00100111101101011000110100000000   	or r26, r24, r26		//mix - for part D
IMEM:0x0000020B INSTR:0x7FAF7B00    01111111101011110111101100000000   	mov r23, r23, r22 LSL
IMEM:0x0000020C INSTR:0x7FB7BB00    01111111101101111011101100000000   	mov r27, r27, r22 LSL
IMEM:0x0000020D INSTR:0x7FB7BB00    01111111101101111011101100000000   	mov r27, r27, r22 LSL
IMEM:0x0000020E INSTR:0x0FB1BB80    00001111101100011011101110000000   	and r24, r27, r23
IMEM:0x0000020F INSTR:0x27B5AC00    00100111101101011010110000000000   	or r26, r26, r24		//mix - for part E
IMEM:0x00000210 INSTR:0x0FB39780    00001111101100111001011110000000   	and r25, r25, r15			// and it with summing mask (masks out all but
IMEM:0x00000211 INSTR:0x0FB5A780    00001111101101011010011110000000   	and r26, r26, r15			// 		bit0 of each pixel)
IMEM:0x00000212 INSTR:0x7FF00000    01111111111100000000000000000000   	mov r24, 0			//accumulator
IMEM:0x00000213 INSTR:0x7FEE00FF    01111111111011100000000011111111   	mov r23, 255			//lower byte mask
IMEM:0x00000214 INSTR:0x7FEC0008    01111111111011000000000000001000   	mov r22, 8			//shift amount
IMEM:0x00000215 INSTR:0x7FF60004    01111111111101100000000000000100   	mov r27, 4			//loop counter
IMEM:0x00000216 INSTR:0x0FA97C80    00001111101010010111110010000000   Rlow_loop:	and r20, r23, r25	//(borrowed reserved r20, later will be initialized)
IMEM:0x00000217 INSTR:0x07B18A00    00000111101100011000101000000000   	add r24, r24, r20
IMEM:0x00000218 INSTR:0x7FB39B20    01111111101100111001101100100000   	mov r25, r25, r22 LSR
IMEM:0x00000219 INSTR:0x37F7B001    00110111111101111011000000000001   	sub r27, r27, 1
IMEM:0x0000021A INSTR:0x60FFFFFA    01100000111111111111111111111010   	b_ne  -6
IMEM:0x0000021B INSTR:0x7FF60005    01111111111101100000000000000101   	mov r27, 5			//loop counter
IMEM:0x0000021C INSTR:0x0FA97D00    00001111101010010111110100000000   Rhi_loop:	and r20, r23, r26	//(borrowed reserved r20, later will be initialized)
IMEM:0x0000021D INSTR:0x07B18A00    00000111101100011000101000000000   	add r24, r24, r20
IMEM:0x0000021E INSTR:0x7FB5AB20    01111111101101011010101100100000   	mov r26, r26, r22 LSR
IMEM:0x0000021F INSTR:0x37F7B001    00110111111101111011000000000001   	sub r27, r27, 1
IMEM:0x00000220 INSTR:0x60FFFFFA    01100000111111111111111111111010   	b_ne  -6
IMEM:0x00000221 INSTR:0x7FF6FFFF    01111111111101101111111111111111   	mov r27, 65535
IMEM:0x00000222 INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1
IMEM:0x00000223 INSTR:0x07A80D80    00000111101010000000110110000000   	add r20, r0, r27		// add 0x10000 to pixel address
IMEM:0x00000224 INSTR:0x7FF4FFFF    01111111111101001111111111111111   	mov r26, 65535
IMEM:0x00000225 INSTR:0x07B7AD80    00000111101101111010110110000000   	add r27, r26, r27		// r27 has 0x1FFFF
IMEM:0x00000226 INSTR:0x0FA94D80    00001111101010010100110110000000   	and r20, r20, r27		// mask pixel address to stay within the two FBs
IMEM:0x00000227 INSTR:0xAFE68000    10101111111001101000000000000000   	ldrb	r25, r20, 0		// Get pixel value in other FB
IMEM:0x00000228 INSTR:0xAFEC0000    10101111111011000000000000000000   	ldrb	r27, r0, 0		// Get current pixel value
IMEM:0x00000229 INSTR:0x97F60001    10010111111101100000000000000001   	tst		r27, 1			// Check bit0
IMEM:0x0000022A INSTR:0x60400005    01100000010000000000000000000101   	b_eq	 5
IMEM:0x0000022B INSTR:0x0FF59FFE    00001111111101011001111111111110   Was_alive:	and r26, r25, -2	// Default to dead (-2 = 0x1111110)
IMEM:0x0000022C INSTR:0x77F00003    01110111111100000000000000000011   	cmp r24, 3
IMEM:0x0000022D INSTR:0x2075A001    00100000011101011010000000000001   	or_eq r26, r26, 1			// stays alive
IMEM:0x0000022E INSTR:0x77F00004    01110111111100000000000000000100   	cmp r24, 4
IMEM:0x0000022F INSTR:0x2075A001    00100000011101011010000000000001   	or_eq r26, r26, 1			// stays alive
IMEM:0x00000230 INSTR:0x67C00002    01100111110000000000000000000010   	b	 2
IMEM:0x00000231 INSTR:0x0FF59FFE    00001111111101011001111111111110   Was_dead:	and r26, r25, -2	// Default to dead (-2 = 0x1111110)
IMEM:0x00000232 INSTR:0x77F00003    01110111111100000000000000000011   	cmp r24, 3
IMEM:0x00000233 INSTR:0x2075A001    00100000011101011010000000000001   	or_eq r26, r26, 1			// stays alive
IMEM:0x00000234 INSTR:0xD7EA8000    11010111111010101000000000000000   Store_cell:	strb r26, r20, 0	// store result in other FB
IMEM:0x00000235 INSTR:0xD7E94005    11010111111010010100000000000101   	strb r26, r10, 5	// write it to LEDs too
IMEM:0x00000236 INSTR:0x0FF73001    00001111111101110011000000000001   	and r27, r19, 1
IMEM:0x00000237 INSTR:0x77F60000    01110111111101100000000000000000   	cmp r27, 0
IMEM:0x00000238 INSTR:0x607FFEC7    01100000011111111111111011000111   	b_eq	 -313	// exit subroutine w/ 1st option
IMEM:0x00000239 INSTR:0x67FFFFAD    01100111111111111111111110101101   	b		 -83	// exit subroutine w/ 2nd option
IMEM:0x0000023A INSTR:0x67FFFDC4    01100111111111111111110111000100   	b  -572
IMEM:0x0000023B INSTR:0x07F7B000    00000111111101111011000000000000   Switch_fb: 	add r27, r27, 0	//noop
IMEM:0x0000023C INSTR:0x07CA5001    00000111110010100101000000000001   	add r5, r5, 1
IMEM:0x0000023D INSTR:0x0FCA5001    00001111110010100101000000000001   	and r5, r5, 1
IMEM:0x0000023E INSTR:0x07CA5002    00000111110010100101000000000010   	add r5, r5, 2	// Set to color mode
IMEM:0x0000023F INSTR:0xD7954000    11010111100101010100000000000000   	strb r5, r10, 0
IMEM:0x00000240 INSTR:0x0FCA5001    00001111110010100101000000000001   	and r5, r5, 1	// Get rid of the extra bit
IMEM:0x00000241 INSTR:0x7FF4FFFF    01111111111101001111111111111111   	mov r26, 65535		// r26 has 0x0FFFF
IMEM:0x00000242 INSTR:0x07F7A001    00000111111101111010000000000001   	add r27, r26, 1		// r27 has 0x10000
IMEM:0x00000243 INSTR:0x77CA0001    01110111110010100000000000000001   	cmp r5, 1				// Switch to FB2 or FB1?
IMEM:0x00000244 INSTR:0x60400002    01100000010000000000000000000010   	b_eq  2	// Was in FB1
IMEM:0x00000245 INSTR:0x07F7B000    00000111111101111011000000000000   Switch_to_FB1:		add r27, r27, 0	//noop
IMEM:0x00000246 INSTR:0x0F800D00    00001111100000000000110100000000   	and r0, r0, r26	// if FB1, clear bit 0x1....
IMEM:0x00000247 INSTR:0x67C00001    01100111110000000000000000000001   	b  1
IMEM:0x00000248 INSTR:0x07F7B000    00000111111101111011000000000000   Switch_to_FB2:		add r27, r27, 0	//noop
IMEM:0x00000249 INSTR:0x27800D80    00100111100000000000110110000000   	or	r0, r0, r27	// if FB2, set bit 0x1....
IMEM:0x0000024A INSTR:0x07F7B000    00000111111101111011000000000000   Done_switching:		add r27, r27, 0	//noop
IMEM:0x0000024B INSTR:0x0FF73002    00001111111101110011000000000010   	and r27, r19, 2
IMEM:0x0000024C INSTR:0x77F60000    01110111111101100000000000000000   	cmp r27, 0
IMEM:0x0000024D INSTR:0x607FFEB1    01100000011111111111111010110001   	b_eq	 -335	// exit subroutine w/ 1st option
IMEM:0x0000024E INSTR:0x67FFFDE8    01100111111111111111110111101000   	b		 -536	// exit subroutine w/ 2nd option
IMEM:0x0000024F INSTR:0x67FFFDAF    01100111111111111111110110101111   	b  -593
IMEM:0x00000250 INSTR:0x07EA0000    00000111111010100000000000000000   Set_fb:	add r21, r0, 0	// Store the old "current cursor"
IMEM:0x00000251 INSTR:0x7FECFFFF    01111111111011001111111111111111   	mov r22, 65535	// 0x0FFFF
IMEM:0x00000252 INSTR:0x07F56001    00000111111101010110000000000001   	add r26, r22, 1	// 0x10000
IMEM:0x00000253 INSTR:0x0FB60D00    00001111101101100000110100000000   	and r27, r0, r26	// get 0x00000 or 0x10000 depending on current cursor
IMEM:0x00000254 INSTR:0x7FF200F0    01111111111100100000000011110000   	mov r25, 240
IMEM:0x00000255 INSTR:0x27F39001    00100111111100111001000000000001   	or r25, r25, 1
IMEM:0x00000256 INSTR:0x77F00000    01110111111100000000000000000000   	cmp r24, 0		// Which selection should we highlight?
IMEM:0x00000257 INSTR:0x60400021    01100000010000000000000000100001   	b_eq	 33		// Selection 2
IMEM:0x00000258 INSTR:0x7FF200CE    01111111111100100000000011001110   	mov r25, 206
IMEM:0x00000259 INSTR:0x27F39001    00100111111100111001000000000001   	or r25, r25, 1
IMEM:0x0000025A INSTR:0x77F00001    01110111111100000000000000000001   	cmp r24, 1		// Which selection should we highlight?
IMEM:0x0000025B INSTR:0x60400009    01100000010000000000000000001001   	b_eq	 9		// Selection 1
IMEM:0x0000025C INSTR:0xAFDF6000    10101111110111110110000000000000   Set_fb_loop_norm:	ldrb r23, r27, 0
IMEM:0x0000025D INSTR:0x97EE0001    10010111111011100000000000000001   	tst r23, 1				// Was it alive?
IMEM:0x0000025E INSTR:0x20F18001    00100000111100011000000000000001   	or_ne	r24, r24, 1		// If so, set r24 to alive
IMEM:0x0000025F INSTR:0x97EE0001    10010111111011100000000000000001   	tst r23, 1				// Was it alive?
IMEM:0x00000260 INSTR:0x08718FFE    00001000011100011000111111111110   	and_eq	r24, r24, -2	// If not, set r24 to dead
IMEM:0x00000261 INSTR:0xD7E36000    11010111111000110110000000000000   	strb r24, r27, 0		// Store the new pixel
IMEM:0x00000262 INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1
IMEM:0x00000263 INSTR:0x97B76000    10010111101101110110000000000000   	tst r27, r22		// check if we are at the end of the FB
IMEM:0x00000264 INSTR:0x60FFFFF6    01100000111111111111111111110110   	b_ne  -10
IMEM:0x00000265 INSTR:0x67C00028    01100111110000000000000000101000   	b	 40
IMEM:0x00000266 INSTR:0xAFDF6000    10101111110111110110000000000000   Set_fb_loop_sel_1:	ldrb r23, r27, 0
IMEM:0x00000267 INSTR:0x07F57000    00000111111101010111000000000000   	add r26, r23, 0
IMEM:0x00000268 INSTR:0x77EE0000    01110111111011100000000000000000   	cmp r23, 0
IMEM:0x00000269 INSTR:0x78740000    01111000011101000000000000000000   	mov_eq r26, 0			// If 0, stays 0
IMEM:0x0000026A INSTR:0x7FF200F0    01111111111100100000000011110000   	mov r25, 240
IMEM:0x0000026B INSTR:0x27F39001    00100111111100111001000000000001   	or r25, r25, 1
IMEM:0x0000026C INSTR:0x77AF9000    01110111101011111001000000000000   	cmp r23, r25
IMEM:0x0000026D INSTR:0x787400CE    01111000011101000000000011001110   	mov_eq r26, 206
IMEM:0x0000026E INSTR:0x77AF9000    01110111101011111001000000000000   	cmp r23, r25
IMEM:0x0000026F INSTR:0x2075A001    00100000011101011010000000000001   	or_eq r26, r26, 1		// If SEL_2-on, gets SEL_1-on
IMEM:0x00000270 INSTR:0x77EE00F0    01110111111011100000000011110000   	cmp r23, 240
IMEM:0x00000271 INSTR:0x20757001    00100000011101010111000000000001   	or_eq r26, r23, 1		// If SEL_2-off, gets SEL_2-on
IMEM:0x00000272 INSTR:0x7FF200CE    01111111111100100000000011001110   	mov r25, 206
IMEM:0x00000273 INSTR:0x27F39001    00100111111100111001000000000001   	or r25, r25, 1
IMEM:0x00000274 INSTR:0x77AF9000    01110111101011111001000000000000   	cmp r23, r25
IMEM:0x00000275 INSTR:0x787400CE    01111000011101000000000011001110   	mov_eq r26, 206	// If SEL_1-on, gets SEL_1-off
IMEM:0x00000276 INSTR:0xD7EB6000    11010111111010110110000000000000   	strb r26, r27, 0
IMEM:0x00000277 INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1
IMEM:0x00000278 INSTR:0x97B76000    10010111101101110110000000000000   	tst r27, r22			// check if we are at the end of the FB
IMEM:0x00000279 INSTR:0x60FFFFEB    01100000111111111111111111101011   	b_ne  -21
IMEM:0x0000027A INSTR:0xAFDF6000    10101111110111110110000000000000   Set_fb_loop_sel_2:	ldrb r23, r27, 0
IMEM:0x0000027B INSTR:0x07F57000    00000111111101010111000000000000   	add r26, r23, 0
IMEM:0x0000027C INSTR:0x77EE0000    01110111111011100000000000000000   	cmp r23, 0
IMEM:0x0000027D INSTR:0x78740000    01111000011101000000000000000000   	mov_eq r26, 0			// If 0, stays 0
IMEM:0x0000027E INSTR:0x7FF200CE    01111111111100100000000011001110   	mov r25, 206
IMEM:0x0000027F INSTR:0x27F39001    00100111111100111001000000000001   	or r25, r25, 1
IMEM:0x00000280 INSTR:0x77AF9000    01110111101011111001000000000000   	cmp r23, r25
IMEM:0x00000281 INSTR:0x787400F0    01111000011101000000000011110000   	mov_eq r26, 240
IMEM:0x00000282 INSTR:0x77AF9000    01110111101011111001000000000000   	cmp r23, r25
IMEM:0x00000283 INSTR:0x2075A001    00100000011101011010000000000001   	or_eq r26, r26, 1		// If SEL_1-on, gets SEL_2-on
IMEM:0x00000284 INSTR:0x77EE00CE    01110111111011100000000011001110   	cmp r23, 206
IMEM:0x00000285 INSTR:0x20757001    00100000011101010111000000000001   	or_eq r26, r23, 1		// If SEL_1-off, gets SEL_1-on
IMEM:0x00000286 INSTR:0x7FF200F0    01111111111100100000000011110000   	mov r25, 240
IMEM:0x00000287 INSTR:0x27F39001    00100111111100111001000000000001   	or r25, r25, 1
IMEM:0x00000288 INSTR:0x77AF9000    01110111101011111001000000000000   	cmp r23, r25
IMEM:0x00000289 INSTR:0x787400F0    01111000011101000000000011110000   	mov_eq r26, 240	// If SEL_2-on, gets SEL_2-off
IMEM:0x0000028A INSTR:0xD7EB6000    11010111111010110110000000000000   	strb r26, r27, 0
IMEM:0x0000028B INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1
IMEM:0x0000028C INSTR:0x97B76000    10010111101101110110000000000000   	tst r27, r22			// check if we are at the end of the FB
IMEM:0x0000028D INSTR:0x60FFFFEB    01100000111111111111111111101011   	b_ne  -21
IMEM:0x0000028E INSTR:0x67FFFFFF    01100111111111111111111111111111   	b	 -1
IMEM:0x0000028F INSTR:0x7FC80000    01111111110010000000000000000000   Set_wrapup:		mov r4, 0
IMEM:0x00000290 INSTR:0x07C15000    00000111110000010101000000000000   	add r0, r21, 0
IMEM:0x00000291 INSTR:0x97E60142    10010111111001100000000101000010   	tst r19, 322
IMEM:0x00000292 INSTR:0x60FFFE42    01100000111111111111111001000010   	b_ne	 -446		// exit subroutine w/ 3rd option
IMEM:0x00000293 INSTR:0x97E60020    10010111111001100000000000100000   	tst r19, 32
IMEM:0x00000294 INSTR:0x607FFD94    01100000011111111111110110010100   	b_eq	 -620		// exit subroutine w/ 1st option
IMEM:0x00000295 INSTR:0x67FFFDA7    01100111111111111111110110100111   	b		 -601		// exit subroutine w/ 2nd option
IMEM:0x00000296 INSTR:0x07EA0000    00000111111010100000000000000000   Set_fb_rainbow:	add r21, r0, 0	// Store the old "current cursor"
IMEM:0x00000297 INSTR:0x7FECFFFF    01111111111011001111111111111111   	mov r22, 65535	// 0x0FFFF
IMEM:0x00000298 INSTR:0x07F56001    00000111111101010110000000000001   	add r26, r22, 1	// 0x10000
IMEM:0x00000299 INSTR:0x0FB60D00    00001111101101100000110100000000   	and r27, r0, r26	// get 0x00000 or 0x10000 depending on current cursor
IMEM:0x0000029A INSTR:0x7FF00002    01111111111100000000000000000010   	mov r24, 2
IMEM:0x0000029B INSTR:0xAFDF6000    10101111110111110110000000000000   Set_fb_loop_rainbow:	ldrb r23, r27, 0
IMEM:0x0000029C INSTR:0x97EE0001    10010111111011100000000000000001   	tst r23, 1				// Was it alive?
IMEM:0x0000029D INSTR:0x20F18001    00100000111100011000000000000001   	or_ne	r24, r24, 1		// If so, set r24 to alive
IMEM:0x0000029E INSTR:0x97EE0001    10010111111011100000000000000001   	tst r23, 1				// Was it alive?
IMEM:0x0000029F INSTR:0x08718FFE    00001000011100011000111111111110   	and_eq	r24, r24, -2	// If not, set r24 to dead
IMEM:0x000002A0 INSTR:0xD7E36000    11010111111000110110000000000000   	strb r24, r27, 0		// Store the new pixel
IMEM:0x000002A1 INSTR:0x07F18001    00000111111100011000000000000001   	add r24, r24, 1		// Increment our rainbow color
IMEM:0x000002A2 INSTR:0x27F18002    00100111111100011000000000000010   	or r24, r24, 2		// Make sure Red[0] is always set so we don't have black spots
IMEM:0x000002A3 INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1
IMEM:0x000002A4 INSTR:0x97B76000    10010111101101110110000000000000   	tst r27, r22		// check if we are at the end of the FB
IMEM:0x000002A5 INSTR:0x60FFFFF4    01100000111111111111111111110100   	b_ne  -12
IMEM:0x000002A6 INSTR:0x67FFFFE7    01100111111111111111111111100111   	b	 -25
IMEM:0x000002A7 INSTR:0x67FFFD57    01100111111111111111110101010111   	b  -681
IMEM:0x000002A8 INSTR:0x07EA0000    00000111111010100000000000000000   Clear_board:	add r21, r0, 0	// Store the old "current cursor"
IMEM:0x000002A9 INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8
IMEM:0x000002AA INSTR:0x7FEC00FD    01111111111011000000000011111101   	mov r22, 253
IMEM:0x000002AB INSTR:0x7FF400C9    01111111111101000000000011001001   	mov r26, 201
IMEM:0x000002AC INSTR:0x7FAE5D80    01111111101011100101110110000000   	mov r23, r5, r27 LSL	// Shift FB-bit to 0x100 or 0x000
IMEM:0x000002AD INSTR:0x07AF7D00    00000111101011110111110100000000   	add r23, r23, r26		// Add Bottom y-coord to it
IMEM:0x000002AE INSTR:0x7FAF7D80    01111111101011110111110110000000   	mov r23, r23, r27 LSL	// Shift them over a byte
IMEM:0x000002AF INSTR:0x07AF7B00    00000111101011110111101100000000   	add r23, r23, r22		// r23 has bottom right corner
IMEM:0x000002B0 INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8			// Shift value
IMEM:0x000002B1 INSTR:0x7FB25D80    01111111101100100101110110000000   	mov r25, r5, r27 LSL	// Shift the FB bit to 0x100
IMEM:0x000002B2 INSTR:0x07F39002    00000111111100111001000000000010   	add r25, r25, 2
IMEM:0x000002B3 INSTR:0x7FF40002    01111111111101000000000000000010   	mov r26, 2
IMEM:0x000002B4 INSTR:0x7F819D80    01111111100000011001110110000000   	mov r0, r25, r27 LSL	// Shift FB-bit & Y-coord over a byte
IMEM:0x000002B5 INSTR:0x07800D00    00000111100000000000110100000000   	add r0, r0, r26			// Add in the X-coord to bottom byte
IMEM:0x000002B6 INSTR:0xAFEC0000    10101111111011000000000000000000   Clear_board_loop:		ldrb r27, r0, 0	// Grab the current pixel
IMEM:0x000002B7 INSTR:0x0FF1BFFE    00001111111100011011111111111110   	and r24, r27, -2	// Turn off bit0
IMEM:0x000002B8 INSTR:0xD7E00000    11010111111000000000000000000000   	strb r24, r0, 0		// Store the new dead pixel
IMEM:0x000002B9 INSTR:0x7FF600FF    01111111111101100000000011111111   	mov r27, 255		// 0x00FF
IMEM:0x000002BA INSTR:0x0FB40D80    00001111101101000000110110000000   	and r26, r0, r27	// Grab X-coord
IMEM:0x000002BB INSTR:0x77B56000    01110111101101010110000000000000   	cmp r26, r22		// Check if we're at the right border
IMEM:0x000002BC INSTR:0x00400005    00000000010000000000000000000101   	add_eq r0, r0, 5	// If so, add MARGIN amount to get to beginning of next row
IMEM:0x000002BD INSTR:0x77B56000    01110111101101010110000000000000   	cmp r26, r22		
IMEM:0x000002BE INSTR:0x00C00001    00000000110000000000000000000001   	add_ne r0, r0, 1	// If not, increment by 1
IMEM:0x000002BF INSTR:0x77817000    01110111100000010111000000000000   	cmp r0, r23			// Are we out of the board?
IMEM:0x000002C0 INSTR:0x66FFFFF4    01100110111111111111111111110100   	b_le	 -12
IMEM:0x000002C1 INSTR:0x07C15000    00000111110000010101000000000000   	add r0, r21, 0
IMEM:0x000002C2 INSTR:0x97E60004    10010111111001100000000000000100   	tst r19, 4
IMEM:0x000002C3 INSTR:0x607FFE20    01100000011111111111111000100000   	b_eq	 -480	// exit subroutine w/ 1st option
IMEM:0x000002C4 INSTR:0x67FFFE20    01100111111111111111111000100000   	b		 -480	// exit subroutine w/ 2nd option
IMEM:0x000002C5 INSTR:0x67FFFD39    01100111111111111111110100111001   	b  -711
IMEM:0x000002C6 INSTR:0x07F7B000    00000111111101111011000000000000   Copy_fb: 	add r27, r27, 0	//noop
IMEM:0x000002C7 INSTR:0x7FF0FFFF    01111111111100001111111111111111   	mov r24, 65535		// r26 has 0x0FFFF
IMEM:0x000002C8 INSTR:0x07F78001    00000111111101111000000000000001   	add r27, r24, 1		// r27 has 0x10000
IMEM:0x000002C9 INSTR:0x7FF20000    01111111111100100000000000000000   	mov r25, 0			// initialize this addr to 0
IMEM:0x000002CA INSTR:0x7FF40000    01111111111101000000000000000000   	mov r26, 0			// initialize that addr to 0
IMEM:0x000002CB INSTR:0x97CA0001    10010111110010100000000000000001   	tst r5, 1			// Are we in FB2?
IMEM:0x000002CC INSTR:0x00F3B000    00000000111100111011000000000000   	add_ne r25, r27, 0	// If so, this addr gets 0x10000
IMEM:0x000002CD INSTR:0x97CA0001    10010111110010100000000000000001   	tst r5, 1			// Are we in FB2?
IMEM:0x000002CE INSTR:0x0075B000    00000000011101011011000000000000   	add_eq r26, r27, 0	// If not, that addr gets 0x10000
IMEM:0x000002CF INSTR:0xAFEF2000    10101111111011110010000000000000   Copy_loop:	ldrb r27, r25, 0	// Get this pixel
IMEM:0x000002D0 INSTR:0xD7EF4000    11010111111011110100000000000000   	strb r27, r26, 0			// Store into that pixel
IMEM:0x000002D1 INSTR:0x07F39001    00000111111100111001000000000001   	add r25, r25, 1
IMEM:0x000002D2 INSTR:0x07F5A001    00000111111101011010000000000001   	add r26, r26, 1
IMEM:0x000002D3 INSTR:0x97B38000    10010111101100111000000000000000   	tst r25, r24		// Done?
IMEM:0x000002D4 INSTR:0x60FFFFF9    01100000111111111111111111111001   	b_ne	 -7	// If not, continue looping
IMEM:0x000002D5 INSTR:0x97E600A2    10010111111001100000000010100010   	tst r19, 162
IMEM:0x000002D6 INSTR:0x60FFFE01    01100000111111111111111000000001   	b_ne	 -511	// exit subroutine w/ 3rd option
IMEM:0x000002D7 INSTR:0x97E60010    10010111111001100000000000010000   	tst r19, 16
IMEM:0x000002D8 INSTR:0x607FFDEF    01100000011111111111110111101111   	b_eq	 -529	// exit subroutine w/ 1st option
IMEM:0x000002D9 INSTR:0x67FFFD65    01100111111111111111110101100101   	b		 -667	// exit subroutine w/ 2nd option
IMEM:0x000002DA INSTR:0x67FFFD24    01100111111111111111110100100100   	B	 -732
IMEM:0x000002DB INSTR:0xD7900000    11010111100100000000000000000000   Plot_obj:	strb r4, r0, 0		// Replace the cursor with its previous value
IMEM:0x000002DC INSTR:0x07E80000    00000111111010000000000000000000   	add r20, r0, 0				// Store original r0
IMEM:0x000002DD INSTR:0x77C20000    01110111110000100000000000000000   	cmp r1, 0					// If index is 0, don't bother "multiplying"
IMEM:0x000002DE INSTR:0x60400005    01100000010000000000000000000101   	b_eq	 5
IMEM:0x000002DF INSTR:0x7FF4000F    01111111111101000000000000001111   	mov r26, 15		// Counter to do it 15 times
IMEM:0x000002E0 INSTR:0x7FF60000    01111111111101100000000000000000   	mov r27, 0		// Accumulation of the "multiplication" result
IMEM:0x000002E1 INSTR:0x07B61D80    00000111101101100001110110000000   Mult_by_15_loop:	add r27, r1, r27
IMEM:0x000002E2 INSTR:0x37F5A001    00110111111101011010000000000001   	sub r26, r26, 1	// Dec counter
IMEM:0x000002E3 INSTR:0x60FFFFFC    01100000111111111111111111111100   	b_ne	 -4
IMEM:0x000002E4 INSTR:0x07C3B000    00000111110000111011000000000000   	add r1, r27, 0	// Mov the offset into r1
IMEM:0x000002E5 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000002E6 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000002E7 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000002E8 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000002E9 INSTR:0x27F7B040    00100111111101111011000001000000    or r27, r27, 64
IMEM:0x000002EA INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000002EB INSTR:0x27F7B000    00100111111101111011000000000000    or r27, r27, 0
IMEM:0x000002EC INSTR:0x07B7B080    00000111101101111011000010000000   	add r27, r27, r1	// Move to this object's offset within LUT
IMEM:0x000002ED INSTR:0xA7D76000    10100111110101110110000000000000   	ldr	r21, r27, 0		// WIDTH
IMEM:0x000002EE INSTR:0xA7DB6005    10100111110110110110000000000101   	ldr	r22, r27, 5		// HEIGHT
IMEM:0x000002EF INSTR:0xA7DF600A    10100111110111110110000000001010   	ldr	r23, r27, 10	// OBJECT ADDRESS
IMEM:0x000002F0 INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8				// Shift value
IMEM:0x000002F1 INSTR:0x7FB56D80    01111111101101010110110110000000   	mov r26, r22, r27 LSL	// Shift obj#Height over to Y-byte
IMEM:0x000002F2 INSTR:0x07B3AA80    00000111101100111010101010000000   	add r25, r26, r21		// r25 has distance from upper-left to lower-right
IMEM:0x000002F3 INSTR:0x07B20C80    00000111101100100000110010000000   	add r25, r0, r25		// Add the pixel addr to get addr of lower-right
IMEM:0x000002F4 INSTR:0x7FF60101    01111111111101100000000100000001   	mov r27, 257
IMEM:0x000002F5 INSTR:0x37B39D80    00110111101100111001110110000000   	sub r25, r25, r27		// Move it up a row and left a column to fix off-by-one indexing
IMEM:0x000002F6 INSTR:0x7FF40000    01111111111101000000000000000000   	mov r26, 0
IMEM:0x000002F7 INSTR:0xAFE2E000    10101111111000101110000000000000   Plot_obj_loop:	ldrb r24, r23, 0	// Get obj value at this location
IMEM:0x000002F8 INSTR:0xD7E00000    11010111111000000000000000000000   	strb r24, r0, 0					// Place it in the FB
IMEM:0x000002F9 INSTR:0x07F5A001    00000111111101011010000000000001   	add r26, r26, 1		// Count within row
IMEM:0x000002FA INSTR:0x77B55000    01110111101101010101000000000000   	cmp r26, r21		// Check if we ran off the end of this row
IMEM:0x000002FB INSTR:0x78740000    01111000011101000000000000000000   	mov_eq r26, 0		// If so, reset to 0
IMEM:0x000002FC INSTR:0x7FF60100    01111111111101100000000100000000   	mov r27, 256
IMEM:0x000002FD INSTR:0x77F40000    01110111111101000000000000000000   	cmp r26, 0
IMEM:0x000002FE INSTR:0x00000D80    00000000000000000000110110000000   	add_eq r0, r0, r27	// Move down a row
IMEM:0x000002FF INSTR:0x77F40000    01110111111101000000000000000000   	cmp r26, 0
IMEM:0x00000300 INSTR:0x30000A80    00110000000000000000101010000000   	sub_eq r0, r0, r21	// Get back to the left side of the obj
IMEM:0x00000301 INSTR:0x07C00001    00000111110000000000000000000001   	add r0, r0, 1
IMEM:0x00000302 INSTR:0x07EF7001    00000111111011110111000000000001   	add r23, r23, 1	// Increment our location in the obj dmem
IMEM:0x00000303 INSTR:0x77819000    01110111100000011001000000000000   	cmp r0, r25		// Are we past the end of the obj? (i.e. done)
IMEM:0x00000304 INSTR:0x66FFFFF1    01100110111111111111111111110001   	b_le	 -15		// If not, continue looping
IMEM:0x00000305 INSTR:0x07C14000    00000111110000010100000000000000   	add r0, r20, 0	// Restore original r0
IMEM:0x00000306 INSTR:0xAF900000    10101111100100000000000000000000   	ldrb r4, r0, 0	// Reload cursor loc's value
IMEM:0x00000307 INSTR:0x18000000    00011000000000000000000000000000    RETURN 2
IMEM:0x00000308 INSTR:0x67FFFDE6    01100111111111111111110111100110   	b  -538
IMEM:0x00000309 INSTR:0x67FFFCF5    01100111111111111111110011110101   	b  -779
IMEM:0x0000030A INSTR:0x0FF39000    00001111111100111001000000000000    and r25,r25, 0
IMEM:0x0000030B INSTR:0x07F9900B    00000111111110011001000000001011    add R28,r25, 11
IMEM:0x0000030C INSTR:0x27F39000    00100111111100111001000000000000    or r25,r25, 0
IMEM:0x0000030D INSTR:0x7FB39E00    01111111101100111001111000000000    mov r25, r25, R28 lsl
IMEM:0x0000030E INSTR:0x27F39046    00100111111100111001000001000110    or r25, r25, 70
IMEM:0x0000030F INSTR:0x7FB39E00    01111111101100111001111000000000    mov r25, r25, R28 lsl
IMEM:0x00000310 INSTR:0x27F39224    00100111111100111001001000100100    or r25, r25, 548
IMEM:0x00000311 INSTR:0x7FF40000    01111111111101000000000000000000   	mov r26, 0			// initialize that addr to FB1
IMEM:0x00000312 INSTR:0x7FF0FFFF    01111111111100001111111111111111   	mov r24, 65535		// 0x0FFFF
IMEM:0x00000313 INSTR:0xAFEF2000    10101111111011110010000000000000   Menu_setup_loop:	ldrb r27, r25, 0	// Get this pixel
IMEM:0x00000314 INSTR:0xD7EF4000    11010111111011110100000000000000   	strb r27, r26, 0			// Store into that pixel
IMEM:0x00000315 INSTR:0x07F39001    00000111111100111001000000000001   	add r25, r25, 1
IMEM:0x00000316 INSTR:0x07F5A001    00000111111101011010000000000001   	add r26, r26, 1
IMEM:0x00000317 INSTR:0x97B58000    10010111101101011000000000000000   	tst r26, r24		// Done?
IMEM:0x00000318 INSTR:0x60FFFFF9    01100000111111111111111111111001   	b_ne	 -7	// If not, continue looping
IMEM:0x00000319 INSTR:0x7FCA0002    01111111110010100000000000000010   	mov r5, 2	// Color, FB1
IMEM:0x0000031A INSTR:0xD7954000    11010111100101010100000000000000   	strb r5, r10, 0
IMEM:0x0000031B INSTR:0x7FCA0000    01111111110010100000000000000000   	mov r5, 0	// Get rid of extra bit
IMEM:0x0000031C INSTR:0x67FFFCE2    01100111111111111111110011100010   	b  -798
IMEM:0x0000031D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000031E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000031F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000320 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000321 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000322 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000323 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000324 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000325 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000326 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000327 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000328 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000329 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000032A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000032B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000032C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000032D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000032E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000032F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000330 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000331 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000332 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000333 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000334 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000335 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000336 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000337 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000338 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000339 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000033A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000033B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000033C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000033D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000033E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000033F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000340 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000341 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000342 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000343 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000344 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000345 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000346 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000347 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000348 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000349 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000034A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000034B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000034C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000034D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000034E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000034F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000350 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000351 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000352 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000353 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000354 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000355 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000356 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000357 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000358 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000359 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000035A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000035B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000035C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000035D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000035E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000035F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000360 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000361 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000362 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000363 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000364 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000365 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000366 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000367 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000368 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000369 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000036A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000036B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000036C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000036D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000036E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000036F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000370 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000371 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000372 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000373 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000374 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000375 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000376 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000377 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000378 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000379 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000037A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000037B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000037C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000037D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000037E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000037F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000380 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000381 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000382 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000383 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000384 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000385 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000386 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000387 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000388 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000389 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000038A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000038B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000038C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000038D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000038E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000038F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000390 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000391 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000392 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000393 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000394 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000395 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000396 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000397 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000398 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000399 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000039A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000039B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000039C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000039D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000039E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000039F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003A0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003A1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003A2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003A3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003A4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003A5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003A6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003A7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003A8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003A9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003AA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003AB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003AC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003AD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003AE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003AF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003B0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003B1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003B2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003B3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003B4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003B5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003B6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003B7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003B8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003B9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003BA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003BB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003BC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003BD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003BE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003BF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003C0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003C1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003C2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003C3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003C4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003C5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003C6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003C7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003C8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003C9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003CA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003CB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003CC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003CD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003CE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003CF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003D0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003D1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003D2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003D3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003D4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003D5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003D6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003D7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003D8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003D9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003DA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003DB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003DC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003DD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003DE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003DF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003E0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003E1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003E2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003E3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003E4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003E5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003E6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003E7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003E8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003E9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003EA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003EB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003EC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003ED INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003EE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003EF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003F0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003F1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003F2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003F3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003F4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003F5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003F6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003F7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003F8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003F9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003FA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003FB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003FC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003FD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000003FE INSTR:0xFF800000    11111111100000000000000000000000   
