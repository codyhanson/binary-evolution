IMEM:0x00000000 INSTR:0x07F7B000    00000111111101111011000000000000   Start:		add r27, r27, 0	//noop
IMEM:0x00000001 INSTR:0x7FF40FFF    01111111111101000000111111111111   	mov r26,	4095
IMEM:0x00000002 INSTR:0x7FF6001C    01111111111101100000000000011100   	mov r27,	28
IMEM:0x00000003 INSTR:0x7F95AD80    01111111100101011010110110000000   	mov r10,	r26, r27 LSL		// r10 <- _INIT << _SHIFT
IMEM:0x00000004 INSTR:0x7FCA0002    01111111110010100000000000000010   	mov r5, 2	// FB1, color mode
IMEM:0x00000005 INSTR:0xD7954000    11010111100101010100000000000000   	strb r5, r10, 0
IMEM:0x00000006 INSTR:0x7FCA0000    01111111110010100000000000000000   	mov r5, 0	// get rid of extra color bit
IMEM:0x00000007 INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x00000008 INSTR:0xD7ED4010    11010111111011010100000000010000   	strb r27, r10, 16
IMEM:0x00000009 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0			// Signal to return here
IMEM:0x0000000A INSTR:0x67C003EC    01100111110000000000001111101100   	b	 1004
IMEM:0x0000000B INSTR:0x7FC40000    01111111110001000000000000000000   Done_menu_setup_0:	mov r2, 0		// Initialize selection
IMEM:0x0000000C INSTR:0x07F7B000    00000111111101111011000000000000   Main_menu_loop: add r27, r27, 0	//noop
IMEM:0x0000000D INSTR:0xAFED400F    10101111111011010100000000001111   Main_wait_kbd:	ldrb r27, r10, 15
IMEM:0x0000000E INSTR:0x97F60002    10010111111101100000000000000010   	tst r27, 2 // is 2 set?
IMEM:0x0000000F INSTR:0x607FFFFC    01100000011111111111111111111100   	b_eq  -4
IMEM:0x00000010 INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x00000011 INSTR:0xD7ED400F    11010111111011010100000000001111   	strb r27, r10, 15
IMEM:0x00000012 INSTR:0xAF854012    10101111100001010100000000010010   	ldrb r1, r10, 18	// get the key
IMEM:0x00000013 INSTR:0xD7854005    11010111100001010100000000000101   	strb r1, r10, 5	// store the key in the LEDs
IMEM:0x00000014 INSTR:0x7FF60011    01111111111101100000000000010001    mov r27, 17
IMEM:0x00000015 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000016 INSTR:0x65C00008    01100101110000000000000000001000   	b_lt	 8
IMEM:0x00000017 INSTR:0x7FF60014    01111111111101100000000000010100    mov r27, 20
IMEM:0x00000018 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000019 INSTR:0x66400005    01100110010000000000000000000101   	b_gt	 5
IMEM:0x0000001A INSTR:0x07C42001    00000111110001000010000000000001   	add r2, r2, 1
IMEM:0x0000001B INSTR:0x0FC42001    00001111110001000010000000000001   	and r2, r2, 1
IMEM:0x0000001C INSTR:0x07CA5001    00000111110010100101000000000001   	add r5, r5, 1
IMEM:0x0000001D INSTR:0x27CA5002    00100111110010100101000000000010   	or r5, r5, 2	// Set the color bit
IMEM:0x0000001E INSTR:0xD7954000    11010111100101010100000000000000   	strb r5, r10, 0	// Switch to the new FB
IMEM:0x0000001F INSTR:0x67FFFFEB    01100111111111111111111111101011   	b	 -21
IMEM:0x00000020 INSTR:0x07F7B000    00000111111101111011000000000000   Main_not_an_arrow:	add r27, r27, 0	//noop
IMEM:0x00000021 INSTR:0x7FF60031    01111111111101100000000000110001    mov r27, 49
IMEM:0x00000022 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000023 INSTR:0x78440000    01111000010001000000000000000000   	mov_eq	r2, 0				// if 1, set selection to 0
IMEM:0x00000024 INSTR:0x7FF60032    01111111111101100000000000110010    mov r27, 50
IMEM:0x00000025 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000026 INSTR:0x78440001    01111000010001000000000000000001   	mov_eq	r2, 1				// if 2, set selection to 1
IMEM:0x00000027 INSTR:0x7FC0EFFF    01111111110000001110111111111111   Soft_reset:	mov r0, 61439		// End of the visible FB
IMEM:0x00000028 INSTR:0x7FF6FFFF    01111111111101101111111111111111   	mov r27, 65535
IMEM:0x00000029 INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1
IMEM:0x0000002A INSTR:0x07820D80    00000111100000100000110110000000   	add r1, r0, r27				// Addr in FB2
IMEM:0x0000002B INSTR:0x7FC60000    01111111110001100000000000000000   	mov r3, 0					// Value to clear the FB's to
IMEM:0x0000002C INSTR:0xD78C0000    11010111100011000000000000000000   Menu_clear_fb_loop: strb r3, r0, 0	// FB1
IMEM:0x0000002D INSTR:0xD78C2000    11010111100011000010000000000000   	strb r3, r1, 0					// FB2
IMEM:0x0000002E INSTR:0x37C21001    00110111110000100001000000000001   	sub r1, r1, 1		// Dec by 1
IMEM:0x0000002F INSTR:0x37C00001    00110111110000000000000000000001   	sub r0, r0, 1		// Dec by 1
IMEM:0x00000030 INSTR:0x60FFFFFA    01100000111111111111111111111010   	b_ne	 -6
IMEM:0x00000031 INSTR:0x97C40001    10010111110001000000000000000001   	tst r2, 1
IMEM:0x00000032 INSTR:0x60400001    01100000010000000000000000000001   	b_eq	 1			// If r3=0, start Game of Life
IMEM:0x00000033 INSTR:0x67C00455    01100111110000000000010001010101   	b		 1109	// Else, Image Processing
IMEM:0x00000034 INSTR:0x67FFFFCA    01100111111111111111111111001010   	b	 -54		// start with Main_menu
IMEM:0x00000035 INSTR:0x7FF40FFF    01111111111101000000111111111111   Start_gol:	MOV R26,	4095
IMEM:0x00000036 INSTR:0x7FF6001C    01111111111101100000000000011100   	MOV R27,	28
IMEM:0x00000037 INSTR:0x7F95AD80    01111111100101011010110110000000   	MOV R10,	R26, R27 LSL		// R10 <- _INIT << _SHIFT
IMEM:0x00000038 INSTR:0x7FCA0002    01111111110010100000000000000010   	mov r5, 2		// FB1, 63
IMEM:0x00000039 INSTR:0xD7954000    11010111100101010100000000000000   	strb r5, r10, 0	// Set FB to 1 and color mode
IMEM:0x0000003A INSTR:0x67C00185    01100111110000000000000110000101   	b	 389
IMEM:0x0000003B INSTR:0x7FF0003F    01111111111100000000000000111111   Done_setup_lut:	mov r24, 63		// Set the color to paint this FB
IMEM:0x0000003C INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0	// Signal to set_fb to return here
IMEM:0x0000003D INSTR:0x67C002FB    01100111110000000000001011111011   	b	 763
IMEM:0x0000003E INSTR:0x7FF000DF    01111111111100000000000011011111   Done_set_fb_0:		mov r24, 223	// Location to place the specific line at
IMEM:0x0000003F INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0	// Signal to make_border to return here
IMEM:0x00000040 INSTR:0x67C0040E    01100111110000000000010000001110   	b	 1038
IMEM:0x00000041 INSTR:0x7FC0E105    01111111110000001110000100000101   Done_make_border_0:	mov r0, 57605
IMEM:0x00000042 INSTR:0x7FC2001A    01111111110000100000000000011010   	mov r1, 26	// GoL text "object"
IMEM:0x00000043 INSTR:0x7FE62000    01111111111001100010000000000000   	mov r19, 8192
IMEM:0x00000044 INSTR:0x67C00367    01100111110000000000001101100111   	b	 871
IMEM:0x00000045 INSTR:0x7FC0666E    01111111110000000110011001101110   Done_plot_obj_3:	mov r0, 26222	// Put cursor where we want to intialize the default GoL object
IMEM:0x00000046 INSTR:0x7FC20000    01111111110000100000000000000000   	mov r1, 0	// Default object
IMEM:0x00000047 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0	// Signal to plot_obj to return here
IMEM:0x00000048 INSTR:0x67C00363    01100111110000000000001101100011   	b	 867
IMEM:0x00000049 INSTR:0x7FE60010    01111111111001100000000000010000   Done_plot_obj_0: mov r19, 16
IMEM:0x0000004A INSTR:0x67C00349    01100111110000000000001101001001   	b	 841
IMEM:0x0000004B INSTR:0x7FDE0101    01111111110111100000000100000001   Done_copy_fb_1:		mov	r15, 257			// 0x0101
IMEM:0x0000004C INSTR:0x7FF60010    01111111111101100000000000010000   	mov r27, 16				// Shift size
IMEM:0x0000004D INSTR:0x7F9EFD80    01111111100111101111110110000000   	mov r15, r15, r27 LSL	// Left shift by 2 bytes
IMEM:0x0000004E INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8
IMEM:0x0000004F INSTR:0x27DEF101    00100111110111101111000100000001   	or	r15, r15, 257		// r15 now has 0x01010101
IMEM:0x00000050 INSTR:0x7FB6FD80    01111111101101101111110110000000   	mov r27, r15, r27 LSL	// Left shift by 2 bytes
IMEM:0x00000051 INSTR:0x27DFB001    00100111110111111011000000000001   	or	r15, r27, 1			// r15 now has 0x0101010101
IMEM:0x00000052 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000053 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000054 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000055 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000056 INSTR:0x27F7B06D    00100111111101111011000001101101    or r27, r27, 109
IMEM:0x00000057 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000058 INSTR:0x27F7B734    00100111111101111011011100110100    or r27, r27, 1844
IMEM:0x00000059 INSTR:0x7FF40000    01111111111101000000000000000000   	mov r26, 0
IMEM:0x0000005A INSTR:0xCFEB6000    11001111111010110110000000000000   	str r26, r27, 0		// Set numStickyPixels to 0
IMEM:0x0000005B INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x0000005C INSTR:0x7FCA0002    01111111110010100000000000000010   	mov r5, 2	// FB1, color mode
IMEM:0x0000005D INSTR:0xD7954000    11010111100101010100000000000000   	strb r5, r10, 0
IMEM:0x0000005E INSTR:0x7FCA0000    01111111110010100000000000000000   	mov r5, 0	// get rid of extra color bit
IMEM:0x0000005F INSTR:0x7FF600FF    01111111111101100000000011111111   	mov r27, 255
IMEM:0x00000060 INSTR:0xD7ED4005    11010111111011010100000000000101   	strb r27, r10, 5	// start with all LED's on
IMEM:0x00000061 INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x00000062 INSTR:0xD7ED4010    11010111111011010100000000010000   	strb r27, r10, 16
IMEM:0x00000063 INSTR:0x7FC0666E    01111111110000000110011001101110   	mov r0, 26222
IMEM:0x00000064 INSTR:0x07C60000    00000111110001100000000000000000   	add r3, r0, 0	//address
IMEM:0x00000065 INSTR:0xAF906000    10101111100100000110000000000000   	ldrb r4, r3, 0	//data
IMEM:0x00000066 INSTR:0x97C80001    10010111110010000000000000000001   	tst r4, 1	// get bottom bit
IMEM:0x00000067 INSTR:0x7872000F    01111000011100100000000000001111   	mov_eq r25, 15		//is dead? => dark grey
IMEM:0x00000068 INSTR:0x97C80001    10010111110010000000000000000001   	tst r4, 1	// get bottom bit
IMEM:0x00000069 INSTR:0x78F20031    01111000111100100000000000110001   	mov_ne r25, 49	//else => light grey
IMEM:0x0000006A INSTR:0xD7E40000    11010111111001000000000000000000   	strb r25, r0, 0
IMEM:0x0000006B INSTR:0x7FC40000    01111111110001000000000000000000   	mov r2, 0
IMEM:0x0000006C INSTR:0x7FE20000    01111111111000100000000000000000    mov r17, 0
IMEM:0x0000006D INSTR:0x7FF2FFFF    01111111111100101111111111111111   Main_loop: mov r25, 65535	// 0x0FFFF
IMEM:0x0000006E INSTR:0x07F59001    00000111111101011001000000000001   	add r26, r25, 1			// 0x10000
IMEM:0x0000006F INSTR:0x07B79D00    00000111101101111001110100000000   	add r27, r25, r26		// 0x1FFFF
IMEM:0x00000070 INSTR:0x0F800D80    00001111100000000000110110000000   	and r0, r0, r27			// don't let the cursor get out of the FB's
IMEM:0x00000071 INSTR:0x7FF60002    01111111111101100000000000000010    mov r27, 2
IMEM:0x00000072 INSTR:0xAFED400F    10101111111011010100000000001111   Wait_kbd:	ldrb r27, r10, 15
IMEM:0x00000073 INSTR:0x97F60002    10010111111101100000000000000010   	tst r27, 2 // is 2 set?
IMEM:0x00000074 INSTR:0x607FFFFC    01100000011111111111111111111100   	b_eq  -4
IMEM:0x00000075 INSTR:0x18000000    00011000000000000000000000000000   	RETURN 2
IMEM:0x00000076 INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x00000077 INSTR:0xD7ED400F    11010111111011010100000000001111   	strb r27, r10, 15
IMEM:0x00000078 INSTR:0x0FF71003    00001111111101110001000000000011    and r27, r17, 3
IMEM:0x00000079 INSTR:0x77F60000    01110111111101100000000000000000    cmp r27, 0
IMEM:0x0000007A INSTR:0x78420061    01111000010000100000000001100001    mov_eq r1, 97			// Gen 2
IMEM:0x0000007B INSTR:0x77F60001    01110111111101100000000000000001    cmp r27, 1
IMEM:0x0000007C INSTR:0x78420030    01111000010000100000000000110000    mov_eq r1, 48		// Gen 3
IMEM:0x0000007D INSTR:0x77F60002    01110111111101100000000000000010    cmp r27, 2
IMEM:0x0000007E INSTR:0x78420053    01111000010000100000000001010011    mov_eq r1, 83			// Gen 3
IMEM:0x0000007F INSTR:0x07E31001    00000111111000110001000000000001    add r17, r17, 1
IMEM:0x00000080 INSTR:0xAF854012    10101111100001010100000000010010   	ldrb r1, r10, 18	// get the key
IMEM:0x00000081 INSTR:0xA7ED4016    10100111111011010100000000010110   	ldr r27, r10, 22
IMEM:0x00000082 INSTR:0x87B7B000    10000111101101111011000000000000   	not r27, r27
IMEM:0x00000083 INSTR:0x0FF7B0FF    00001111111101111011000011111111   	and r27, r27, 255
IMEM:0x00000084 INSTR:0xD7ED4005    11010111111011010100000000000101   	strb r27, r10, 5	// store the dipswitch status to the LEDs
IMEM:0x00000085 INSTR:0x7FF60030    01111111111101100000000000110000    mov r27, 48
IMEM:0x00000086 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000087 INSTR:0x65C0000A    01100101110000000000000000001010   	b_lt	 10
IMEM:0x00000088 INSTR:0x7FF60039    01111111111101100000000000111001    mov r27, 57
IMEM:0x00000089 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000008A INSTR:0x66400007    01100110010000000000000000000111   	b_gt	 7
IMEM:0x0000008B INSTR:0x7FF6000F    01111111111101100000000000001111   	mov r27, 15			// 0x0F
IMEM:0x0000008C INSTR:0x0FAA1D80    00001111101010100001110110000000   	and r21, r1, r27	// bottom hex digit of number (0-9)
IMEM:0x0000008D INSTR:0x77CDFFFF    01110111110011011111111111111111   	cmp r6, -1			// Was it set to -1?
IMEM:0x0000008E INSTR:0x784C0000    01111000010011000000000000000000   	mov_eq r6, 0		// If so, set r6 to 0
IMEM:0x0000008F INSTR:0x7FF20004    01111111111100100000000000000100   	mov r25, 4			// Shift amount
IMEM:0x00000090 INSTR:0x7FB46C80    01111111101101000110110010000000   	mov r26, r6, r25 LSL	// r26 <- Previous number << 4
IMEM:0x00000091 INSTR:0x078DAA80    00000111100011011010101010000000   	add r6, r26, r21
IMEM:0x00000092 INSTR:0x67FFFFDE    01100111111111111111111111011110   	b		 -34
IMEM:0x00000093 INSTR:0x07F5A000    00000111111101011010000000000000   Not_a_number: add r26, r26, 0	//noop
IMEM:0x00000094 INSTR:0x77CDFFFF    01110111110011011111111111111111   	cmp r6, -1			// Was it set to -1?
IMEM:0x00000095 INSTR:0x784C0001    01111000010011000000000000000001   	mov_eq r6, 1		// If so, set r6 to 1
IMEM:0x00000096 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0
IMEM:0x00000097 INSTR:0x67C00398    01100111110000000000001110011000   	b	 920
IMEM:0x00000098 INSTR:0x07F7B000    00000111111101111011000000000000   Done_bcd_to_bin_0: add r27, r27, 0 //noop
IMEM:0x00000099 INSTR:0x07F7B000    00000111111101111011000000000000   RepeatKey_loop:	add r27, r27, 0	//noop
IMEM:0x0000009A INSTR:0x7FF60011    01111111111101100000000000010001    mov r27, 17
IMEM:0x0000009B INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000009C INSTR:0x30400100    00110000010000000000000100000000   	sub_eq r0, r0, 256	// if so, move up a row
IMEM:0x0000009D INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000009E INSTR:0x604000CF    01100000010000000000000011001111   	b_eq	 207
IMEM:0x0000009F INSTR:0x7FF60012    01111111111101100000000000010010    mov r27, 18
IMEM:0x000000A0 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000A1 INSTR:0x30400001    00110000010000000000000000000001   	sub_eq r0, r0, 1	// if so, move left a column
IMEM:0x000000A2 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000A3 INSTR:0x604000CA    01100000010000000000000011001010   	b_eq	 202
IMEM:0x000000A4 INSTR:0x7FF60013    01111111111101100000000000010011    mov r27, 19
IMEM:0x000000A5 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000A6 INSTR:0x00400100    00000000010000000000000100000000   	add_eq r0, r0, 256	// if so, move down a row
IMEM:0x000000A7 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000A8 INSTR:0x604000C5    01100000010000000000000011000101   	b_eq	 197
IMEM:0x000000A9 INSTR:0x7FF60014    01111111111101100000000000010100    mov r27, 20
IMEM:0x000000AA INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000AB INSTR:0x00400001    00000000010000000000000000000001   	add_eq r0, r0, 1	// if so, move right a row
IMEM:0x000000AC INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000AD INSTR:0x604000C0    01100000010000000000000011000000   	b_eq	 192
IMEM:0x000000AE INSTR:0x7FF60020    01111111111101100000000000100000    mov r27, 32
IMEM:0x000000AF INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000B0 INSTR:0x60C00005    01100000110000000000000000000101   	b_ne	 5	//skip ahead if not space
IMEM:0x000000B1 INSTR:0x0FF24001    00001111111100100100000000000001   	and r25, r4, 1		//get bottom bit of previous value
IMEM:0x000000B2 INSTR:0x77F20001    01110111111100100000000000000001   	cmp r25, 1			// check bit0
IMEM:0x000000B3 INSTR:0x20C84001    00100000110010000100000000000001   	or_ne r4, r4, 1		// toggle off to on
IMEM:0x000000B4 INSTR:0x77F20001    01110111111100100000000000000001   	cmp r25, 1			// check bit0
IMEM:0x000000B5 INSTR:0x08484FFE    00001000010010000100111111111110   	and_eq r4, r4, -2	// toggle on to off	(and with 2_11110)
IMEM:0x000000B6 INSTR:0x67C000B7    01100111110000000000000010110111   	b	 183
IMEM:0x000000B7 INSTR:0x07F7B000    00000111111101111011000000000000   Not_space:	add r27, r27, 0	//noop
IMEM:0x000000B8 INSTR:0x7FF60009    01111111111101100000000000001001    mov r27, 9
IMEM:0x000000B9 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0	// Signal to switch_fb.s to return to ui_main.s
IMEM:0x000000BA INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000BB INSTR:0x60C00001    01100000110000000000000000000001   	b_ne	 1	// if not 9, skip to next step in code
IMEM:0x000000BC INSTR:0x67C0026D    01100111110000000000001001101101   	b		 621	// branch to subroutine
IMEM:0x000000BD INSTR:0x67C000B0    01100111110000000000000010110000   	b  176
IMEM:0x000000BE INSTR:0x07F7B000    00000111111101111011000000000000   Not_tab:	add r27, r27, 0	//noop
IMEM:0x000000BF INSTR:0x7FF6001B    01111111111101100000000000011011    mov r27, 27
IMEM:0x000000C0 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000C1 INSTR:0x607FFF3D    01100000011111111111111100111101   	b_eq	 -195	// branch to subroutine that returns to main menu
IMEM:0x000000C2 INSTR:0x7FF60041    01111111111101100000000001000001    mov r27, 65
IMEM:0x000000C3 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000C4 INSTR:0x60C00005    01100000110000000000000000000101   	b_ne  5		// If not the 'a' key, skip to the next step in code
IMEM:0x000000C5 INSTR:0xE7E40000    11100111111001000000000000000000   	ldneighbor r25, r0, 0		// get this neighborhood
IMEM:0x000000C6 INSTR:0x0FB39780    00001111101100111001011110000000   	and r25, r25, r15			// and it with summing mask (masks out all but
IMEM:0x000000C7 INSTR:0x0FB5A780    00001111101101011010011110000000   	and r26, r26, r15			// bit0 of each pixel
IMEM:0x000000C8 INSTR:0x47B19D00    01000111101100011001110100000000   	accumbytes r24, r25, r26	// get the nbrhd sum
IMEM:0x000000C9 INSTR:0xD7E14005    11010111111000010100000000000101   	strb r24, r10, 5		// write the value to the LEDs
IMEM:0x000000CA INSTR:0x67C000A3    01100111110000000000000010100011   	b  163
IMEM:0x000000CB INSTR:0x07F7B000    00000111111101111011000000000000   Not_a:		add r27, r27, 0	//noop
IMEM:0x000000CC INSTR:0x7FF60043    01111111111101100000000001000011   Upper_c:  mov r27, 67
IMEM:0x000000CD INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000CE INSTR:0x60C00003    01100000110000000000000000000011   	b_ne  3		// If not the 'c' key, skip to the next step in code
IMEM:0x000000CF INSTR:0xD7900000    11010111100100000000000000000000   	strb r4, r0, 0		// Store the cursor with its previous value
IMEM:0x000000D0 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0			// Signal to return to ui_main.s
IMEM:0x000000D1 INSTR:0x67C002C2    01100111110000000000001011000010   	b	 706
IMEM:0x000000D2 INSTR:0xAF900000    10101111100100000000000000000000   Done_copy_fb_0:	ldrb r4, r0, 0	// Restore the cursor
IMEM:0x000000D3 INSTR:0x07F7B000    00000111111101111011000000000000   Not_c:		add r27, r27, 0	//noop
IMEM:0x000000D4 INSTR:0x7FF60049    01111111111101100000000001001001    mov r27, 73
IMEM:0x000000D5 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000D6 INSTR:0x604004F2    01100000010000000000010011110010   	b_eq	 1266
IMEM:0x000000D7 INSTR:0x07F7B000    00000111111101111011000000000000   Done_invert_board:	add r27, r27, 0	//noop
IMEM:0x000000D8 INSTR:0x7FF60052    01111111111101100000000001010010    mov r27, 82
IMEM:0x000000D9 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000DA INSTR:0x78440000    01111000010001000000000000000000   	mov_eq r2, 0	// Tell main_menu.s to clear then go to Start_gol
IMEM:0x000000DB INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000DC INSTR:0x607FFF49    01100000011111111111111101001001   	b_eq	 -183
IMEM:0x000000DD INSTR:0x7FF6003C    01111111111101100000000000111100    mov r27, 60
IMEM:0x000000DE INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000DF INSTR:0x60C00006    01100000110000000000000000000110   	b_ne	 6
IMEM:0x000000E0 INSTR:0x7FF60000    01111111111101100000000000000000   	mov r27, 0
IMEM:0x000000E1 INSTR:0xAFE36000    10101111111000110110000000000000   	ldrb r24, r27, 0	// Sample
IMEM:0x000000E2 INSTR:0x37F18002    00110111111100011000000000000010   	sub r24, r24, 2		// Decrement
IMEM:0x000000E3 INSTR:0x97F000FE    10010111111100000000000011111110   	tst r24, 254		// Check the top 7 bits. If 0, set to white
IMEM:0x000000E4 INSTR:0x787000FF    01111000011100000000000011111111   	mov_eq r24, 255
IMEM:0x000000E5 INSTR:0x7FE60142    01111111111001100000000101000010   	mov r19, 322
IMEM:0x000000E6 INSTR:0x67C00038    01100111110000000000000000111000   	b	 56	// Back door entrance to the "S" set_fb
IMEM:0x000000E7 INSTR:0x07F7B000    00000111111101111011000000000000   Not_less_than:	add r27, r27, 0 //noop
IMEM:0x000000E8 INSTR:0x7FF6003E    01111111111101100000000000111110    mov r27, 62
IMEM:0x000000E9 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000EA INSTR:0x60C00006    01100000110000000000000000000110   	b_ne	 6
IMEM:0x000000EB INSTR:0x7FF60000    01111111111101100000000000000000   	mov r27, 0
IMEM:0x000000EC INSTR:0xAFE36000    10101111111000110110000000000000   	ldrb r24, r27, 0	// Sample
IMEM:0x000000ED INSTR:0x07F18002    00000111111100011000000000000010   	add r24, r24, 2		// Increment
IMEM:0x000000EE INSTR:0x97F000FE    10010111111100000000000011111110   	tst r24, 254		// Check the top 7 bits. If 0, set to next color
IMEM:0x000000EF INSTR:0x78700003    01111000011100000000000000000011   	mov_eq r24, 3
IMEM:0x000000F0 INSTR:0x7FE60142    01111111111001100000000101000010   	mov r19, 322
IMEM:0x000000F1 INSTR:0x67C0002D    01100111110000000000000000101101   	b	 45	// Back door entrance to the "S" set_fb
IMEM:0x000000F2 INSTR:0x07F7B000    00000111111101111011000000000000   Not_greater_than:	add r27, r27, 0 //noop
IMEM:0x000000F3 INSTR:0x7FF60027    01111111111101100000000000100111    mov r27, 39
IMEM:0x000000F4 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000000F5 INSTR:0x60C0001C    01100000110000000000000000011100   	b_ne	 28
IMEM:0x000000F6 INSTR:0x07E80000    00000111111010000000000000000000   	add r20, r0, 0	// Store cursor
IMEM:0x000000F7 INSTR:0x0FED6000    00001111111011010110000000000000    and r22,r22, 0
IMEM:0x000000F8 INSTR:0x07F9600B    00000111111110010110000000001011    add R28,r22, 11
IMEM:0x000000F9 INSTR:0x27ED6000    00100111111011010110000000000000    or r22,r22, 0
IMEM:0x000000FA INSTR:0x7FAD6E00    01111111101011010110111000000000    mov r22, r22, R28 lsl
IMEM:0x000000FB INSTR:0x27ED6040    00100111111011010110000001000000    or r22, r22, 64
IMEM:0x000000FC INSTR:0x7FAD6E00    01111111101011010110111000000000    mov r22, r22, R28 lsl
IMEM:0x000000FD INSTR:0x27ED6000    00100111111011010110000000000000    or r22, r22, 0
IMEM:0x000000FE INSTR:0x07ED6001    00000111111011010110000000000001   	add r22, r22, 1
IMEM:0x000000FF INSTR:0x7FC00101    01111111110000000000000100000001   	mov r0, 257
IMEM:0x00000100 INSTR:0x7FF6FFFF    01111111111101101111111111111111   	mov r27, 65535
IMEM:0x00000101 INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1
IMEM:0x00000102 INSTR:0x07B00D80    00000111101100000000110110000000   	add r24, r0, r27	// addr in FB2
IMEM:0x00000103 INSTR:0xAFDEC000    10101111110111101100000000000000   Secret_set_img_loop: ldrb r23, r22, 0	// Get the image's pixel
IMEM:0x00000104 INSTR:0xD7DC0000    11010111110111000000000000000000   	strb r23, r0, 0		// Store it in FB1
IMEM:0x00000105 INSTR:0xD7DF0000    11010111110111110000000000000000   	strb r23, r24, 0	// Store it in FB2
IMEM:0x00000106 INSTR:0x07ED6001    00000111111011010110000000000001   	add r22, r22, 1
IMEM:0x00000107 INSTR:0x07C00001    00000111110000000000000000000001   	add r0, r0, 1
IMEM:0x00000108 INSTR:0x07F18001    00000111111100011000000000000001   	add r24, r24, 1
IMEM:0x00000109 INSTR:0x0FF600FF    00001111111101100000000011111111   	and r27, r0, 255	// Get x-coord
IMEM:0x0000010A INSTR:0x77F600FF    01110111111101100000000011111111   	cmp r27, 255
IMEM:0x0000010B INSTR:0x00400002    00000000010000000000000000000010   	add_eq r0, r0, 2
IMEM:0x0000010C INSTR:0x77F600FF    01110111111101100000000011111111   	cmp r27, 255
IMEM:0x0000010D INSTR:0x00718002    00000000011100011000000000000010   	add_eq r24, r24, 2
IMEM:0x0000010E INSTR:0x77F600FF    01110111111101100000000011111111   	cmp r27, 255
IMEM:0x0000010F INSTR:0x006D6002    00000000011011010110000000000010   	add_eq r22, r22, 2
IMEM:0x00000110 INSTR:0x77C0DEFE    01110111110000001101111011111110   	cmp r0, 57086
IMEM:0x00000111 INSTR:0x66FFFFF0    01100110111111111111111111110000   	b_le	 -16
IMEM:0x00000112 INSTR:0x07C14000    00000111110000010100000000000000   	add r0, r20, 0	// Restore the cursor
IMEM:0x00000113 INSTR:0x07F7B000    00000111111101111011000000000000   Not_secret_image: add r27, r27, 0 //noop
IMEM:0x00000114 INSTR:0x7FF60022    01111111111101100000000000100010    mov r27, 34
IMEM:0x00000115 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000116 INSTR:0x60C00002    01100000110000000000000000000010   	b_ne	 2
IMEM:0x00000117 INSTR:0x7FE61000    01111111111001100001000000000000   	mov r19, 4096		// Signal to return to here
IMEM:0x00000118 INSTR:0x67C002DE    01100111110000000000001011011110   	b	 734
IMEM:0x00000119 INSTR:0x67FFFF30    01100111111111111111111100110000   Done_menu_setup_1:	b  -208
IMEM:0x0000011A INSTR:0x07F7B000    00000111111101111011000000000000   Not_secret_main: add r27, r27, 0 //noop
IMEM:0x0000011B INSTR:0x7FF60053    01111111111101100000000001010011    mov r27, 83
IMEM:0x0000011C INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000011D INSTR:0x60C00009    01100000110000000000000000001001   	b_ne  9		// If not the 's' key, skip to the next step in code
IMEM:0x0000011E INSTR:0x7FE60142    01111111111001100000000101000010   	mov r19, 322	// Signal to return to ui_main.s
IMEM:0x0000011F INSTR:0x07F06000    00000111111100000110000000000000   	add r24, r6, 0			// Make the input the number that was entered
IMEM:0x00000120 INSTR:0x7FE60142    01111111111001100000000101000010   Sneaky_set:	mov r19, 322	// Signal to return to ui_main.s
IMEM:0x00000121 INSTR:0x67C00217    01100111110000000000001000010111   	b	 535
IMEM:0x00000122 INSTR:0x07F7B000    00000111111101111011000000000000   Done_set_fb_3:		add r27, r27, 0	//noop
IMEM:0x00000123 INSTR:0x7FE600A2    01111111111001100000000010100010   	mov r19, 162	// Signal to return to ui_main.s
IMEM:0x00000124 INSTR:0x67C0026F    01100111110000000000001001101111   	b	 623
IMEM:0x00000125 INSTR:0x07F7B000    00000111111101111011000000000000   Done_copy_fb_3:		add r27, r27, 0	//noop
IMEM:0x00000126 INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x00000127 INSTR:0x67FFFF44    01100111111111111111111101000100   	b	 -188
IMEM:0x00000128 INSTR:0x07F7B000    00000111111101111011000000000000   Not_s:		add r27, r27, 0	//noop
IMEM:0x00000129 INSTR:0x7FF6003D    01111111111101100000000000111101    mov r27, 61
IMEM:0x0000012A INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000012B INSTR:0x60C00001    01100000110000000000000000000001   	b_ne  1	// If not 61, skip to the next step in code
IMEM:0x0000012C INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0	// Signal to clear_board.s to return to ui_main.s
IMEM:0x0000012D INSTR:0x67C00248    01100111110000000000001001001000   	b	 584		//branch to subroutine
IMEM:0x0000012E INSTR:0x07F7B000    00000111111101111011000000000000   Not_equal:		add r27, r27, 0	//noop
IMEM:0x0000012F INSTR:0x7FF60008    01111111111101100000000000001000    mov r27, 8
IMEM:0x00000130 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000131 INSTR:0x60C00003    01100000110000000000000000000011   	b_ne  3	// If not BACKSPACE, skip to the next step in code
IMEM:0x00000132 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0	// Signal to clear_board.s to return to ui_main.s
IMEM:0x00000133 INSTR:0x67C00239    01100111110000000000001000111001   	b	 569		//branch to subroutine
IMEM:0x00000134 INSTR:0x07F7B000    00000111111101111011000000000000   Done_clear_board_0: 	add r27, r27, 0	//noop
IMEM:0x00000135 INSTR:0x07F7B000    00000111111101111011000000000000   Done_clear_board_1: 	add r27, r27, 0	//noop
IMEM:0x00000136 INSTR:0x07F7B000    00000111111101111011000000000000   Not_backspace:		add r27, r27, 0	//noop
IMEM:0x00000137 INSTR:0x7FF6007A    01111111111101100000000001111010    mov r27, 122
IMEM:0x00000138 INSTR:0x7783B000    01110111100000111011000000000000   	cmp	r1, r27
IMEM:0x00000139 INSTR:0x66400006    01100110010000000000000000000110   	b_gt	 6	// Bad input. Skip to next code
IMEM:0x0000013A INSTR:0x7FF60061    01111111111101100000000001100001    mov r27, 97
IMEM:0x0000013B INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000013C INSTR:0x65C00003    01100101110000000000000000000011   	b_lt	 3	// Bad input. Skip to next code
IMEM:0x0000013D INSTR:0x37821D80    00110111100000100001110110000000   	sub r1, r1, r27			// Get letter's index (0-16)
IMEM:0x0000013E INSTR:0x7FE60100    01111111111001100000000100000000   	mov r19, 256	// Signal to plot_obj to return here
IMEM:0x0000013F INSTR:0x67C0026C    01100111110000000000001001101100   	b		 620
IMEM:0x00000140 INSTR:0x07F7B000    00000111111101111011000000000000   Done_plot_obj_1:	add r27, r27, 0	//noop
IMEM:0x00000141 INSTR:0x07F7B000    00000111111101111011000000000000   Not_a_letter:		add r27, r27, 0	//noop
IMEM:0x00000142 INSTR:0x7FF6004E    01111111111101100000000001001110    mov r27, 78
IMEM:0x00000143 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0	// Signal to proc_nbrhd.s to return to ui_main.s
IMEM:0x00000144 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000145 INSTR:0x60400192    01100000010000000000000110010010   	b_eq	 402	// If so, process this nbrhd with GoL  (just use nbrhd ops... it's one operation so who cares)
IMEM:0x00000146 INSTR:0x7FF60050    01111111111101100000000001010000    mov r27, 80
IMEM:0x00000147 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000148 INSTR:0x60C00018    01100000110000000000000000011000   	b_ne	 24		// if not "P", skip this code
IMEM:0x00000149 INSTR:0x7FF6FFFF    01111111111101101111111111111111   	mov r27, 65535
IMEM:0x0000014A INSTR:0x0FB00D80    00001111101100000000110110000000   	and r24, r0, r27	// Get the cursor's index within a FB
IMEM:0x0000014B INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000014C INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000014D INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000014E INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000014F INSTR:0x27F7B06D    00100111111101111011000001101101    or r27, r27, 109
IMEM:0x00000150 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000151 INSTR:0x27F7B734    00100111111101111011011100110100    or r27, r27, 1844
IMEM:0x00000152 INSTR:0x0FF5A000    00001111111101011010000000000000    and r26,r26, 0
IMEM:0x00000153 INSTR:0x07F9A00B    00000111111110011010000000001011    add R28,r26, 11
IMEM:0x00000154 INSTR:0x27F5A000    00100111111101011010000000000000    or r26,r26, 0
IMEM:0x00000155 INSTR:0x7FB5AE00    01111111101101011010111000000000    mov r26, r26, R28 lsl
IMEM:0x00000156 INSTR:0x27F5A06D    00100111111101011010000001101101    or r26, r26, 109
IMEM:0x00000157 INSTR:0x7FB5AE00    01111111101101011010111000000000    mov r26, r26, R28 lsl
IMEM:0x00000158 INSTR:0x27F5A739    00100111111101011010011100111001    or r26, r26, 1849
IMEM:0x00000159 INSTR:0xA7E76000    10100111111001110110000000000000   	ldr r25, r27, 0		// Get the number of sticky pixels
IMEM:0x0000015A INSTR:0x77F201F4    01110111111100100000000111110100   	cmp r25, 500	// Check if we're maxed out
IMEM:0x0000015B INSTR:0x60400005    01100000010000000000000000000101   	b_eq	 5
IMEM:0x0000015C INSTR:0x07AF9C80    00000111101011111001110010000000   	add r23, r25, r25	// *= 2
IMEM:0x0000015D INSTR:0x07B57D00    00000111101101010111110100000000   	add r26, r23, r26	// Get to the next open "sticky pixel" addr
IMEM:0x0000015E INSTR:0xDFE34000    11011111111000110100000000000000   	strh r24, r26, 0	// Store the current pixel addr there
IMEM:0x0000015F INSTR:0x07F39001    00000111111100111001000000000001   	add r25, r25, 1		// Inc number of sticky pixels by one
IMEM:0x00000160 INSTR:0xCFE76000    11001111111001110110000000000000   	str r25, r27, 0		// Store the inc'ed value back
IMEM:0x00000161 INSTR:0x7FC800FF    01111111110010000000000011111111   	mov r4, 255
IMEM:0x00000162 INSTR:0x07F7B000    00000111111101111011000000000000   Not_p: add r27, r27, 0	//noop
IMEM:0x00000163 INSTR:0x7FF6000D    01111111111101100000000000001101    mov r27, 13
IMEM:0x00000164 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x00000165 INSTR:0x60C00005    01100000110000000000000000000101   	b_ne	 5	// If not, skip this code
IMEM:0x00000166 INSTR:0xD7900000    11010111100100000000000000000000   	strb r4, r0, 0		// Replace the cursor with its previous value
IMEM:0x00000167 INSTR:0x7FE60001    01111111111001100000000000000001   	mov	r19, 1	// Signal to proc_nbrhd.s to return to proc_1_generation.s
IMEM:0x00000168 INSTR:0x67C00152    01100111110000000000000101010010   	b	 338	// If so, process 1 GoL generation
IMEM:0x00000169 INSTR:0xAF900000    10101111100100000000000000000000   Done_Process_1_Gen:		ldrb r4, r0, 0
IMEM:0x0000016A INSTR:0x7FE60000    01111111111001100000000000000000   	mov	r19, 0			// Signal to proc_nbrhd.s to return to proc_1_generation.s
IMEM:0x0000016B INSTR:0x67C001BE    01100111110000000000000110111110   	b		 446	// branch to subroutine
IMEM:0x0000016C INSTR:0x07F7B000    00000111111101111011000000000000   Not_enter: 	add r27, r27, 0	//noop
IMEM:0x0000016D INSTR:0x07F7B000    00000111111101111011000000000000   Done_switch_fb_0:	add r27, r27, 0	//noop
IMEM:0x0000016E INSTR:0x07F7B000    00000111111101111011000000000000   Done_proc_nbrhd_0: 	add r27, r27, 0	//noop
IMEM:0x0000016F INSTR:0x07F7B000    00000111111101111011000000000000   Move_cursor:	add r27, r27, 0	// noop
IMEM:0x00000170 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000171 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000172 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000173 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000174 INSTR:0x27F7B06D    00100111111101111011000001101101    or r27, r27, 109
IMEM:0x00000175 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000176 INSTR:0x27F7B734    00100111111101111011011100110100    or r27, r27, 1844
IMEM:0x00000177 INSTR:0x0FF5A000    00001111111101011010000000000000    and r26,r26, 0
IMEM:0x00000178 INSTR:0x07F9A00B    00000111111110011010000000001011    add R28,r26, 11
IMEM:0x00000179 INSTR:0x27F5A000    00100111111101011010000000000000    or r26,r26, 0
IMEM:0x0000017A INSTR:0x7FB5AE00    01111111101101011010111000000000    mov r26, r26, R28 lsl
IMEM:0x0000017B INSTR:0x27F5A06D    00100111111101011010000001101101    or r26, r26, 109
IMEM:0x0000017C INSTR:0x7FB5AE00    01111111101101011010111000000000    mov r26, r26, R28 lsl
IMEM:0x0000017D INSTR:0x27F5A739    00100111111101011010011100111001    or r26, r26, 1849
IMEM:0x0000017E INSTR:0xA7E76000    10100111111001110110000000000000   	ldr r25, r27, 0			// Get the number of sticky pixels
IMEM:0x0000017F INSTR:0x77F20000    01110111111100100000000000000000   	cmp r25, 0
IMEM:0x00000180 INSTR:0x6040000A    01100000010000000000000000001010   	b_eq	 10	// If there aren't any, skip this code
IMEM:0x00000181 INSTR:0x7FEE00FF    01111111111011100000000011111111   	mov r23, 255			// Make the pinned pixels WHITE
IMEM:0x00000182 INSTR:0x7FF6FFFF    01111111111101101111111111111111   	mov r27, 65535			// 0x0FFFF
IMEM:0x00000183 INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1			// 0x10000
IMEM:0x00000184 INSTR:0x97CA0001    10010111110010100000000000000001   	tst r5, 1				// Which FB are we in?
IMEM:0x00000185 INSTR:0x78760000    01111000011101100000000000000000   	mov_eq r27, 0			// If we are in FB1, make r27 0x00000
IMEM:0x00000186 INSTR:0xB7E34000    10110111111000110100000000000000   Sticky_loop:	ldrh r24, r26, 0	// Get this sticky pixel's addr
IMEM:0x00000187 INSTR:0x27B18D80    00100111101100011000110110000000   	or r24, r24, r27		// Make sure it's in the next FB
IMEM:0x00000188 INSTR:0xD7DF0000    11010111110111110000000000000000   	strb r23, r24, 0		// Set that pixel to WHITE
IMEM:0x00000189 INSTR:0x07F5A002    00000111111101011010000000000010   	add r26, r26, 2			// Go to next sticky pixel (add 2 b/c they each take up 2 bytes)
IMEM:0x0000018A INSTR:0x37F39001    00110111111100111001000000000001   	sub r25, r25, 1			// Decrement "number of sticky pixels" to show we've processed a new one
IMEM:0x0000018B INSTR:0x60FFFFF9    01100000111111111111111111111001   	b_ne	 -7	// If not, loop
IMEM:0x0000018C INSTR:0x07F7B000    00000111111101111011000000000000   Done_sticky_pixels:	add r27, r27, 0	//noop
IMEM:0x0000018D INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8				// Shift amount
IMEM:0x0000018E INSTR:0x7FB20DA0    01111111101100100000110110100000   	mov r25, r0, r27 LSR	// Get the Y-coord
IMEM:0x0000018F INSTR:0x7FF600FF    01111111111101100000000011111111   	mov r27, 255			// Lower byte mask
IMEM:0x00000190 INSTR:0x0FB39D80    00001111101100111001110110000000   	and r25, r25, r27		// Mask off the FB bit if it was there
IMEM:0x00000191 INSTR:0x0FB40D80    00001111101101000000110110000000   	and r26, r0, r27		// Get the X-coord
IMEM:0x00000192 INSTR:0x7FF00001    01111111111100000000000000000001   	mov r24, 1
IMEM:0x00000193 INSTR:0x7FF600DE    01111111111101100000000011011110   	mov r27, 222
IMEM:0x00000194 INSTR:0x77B38000    01110111101100111000000000000000   	cmp r25, r24		// Compare Y-coord to TOP of board
IMEM:0x00000195 INSTR:0x05F3B000    00000101111100111011000000000000   	add_lt	r25, r27, 0	// If Y-coord is above boundary, wrap to bottom
IMEM:0x00000196 INSTR:0x77B3B000    01110111101100111011000000000000   	cmp r25, r27		// Compare Y-coord to BOTTOM of board
IMEM:0x00000197 INSTR:0x06738000    00000110011100111000000000000000   	add_gt	r25, r24, 0	// If below bottom, wrap to top
IMEM:0x00000198 INSTR:0x7FF000FE    01111111111100000000000011111110   	mov r24, 254
IMEM:0x00000199 INSTR:0x7FF60001    01111111111101100000000000000001   	mov r27, 1
IMEM:0x0000019A INSTR:0x77B58000    01110111101101011000000000000000   	cmp r26, r24
IMEM:0x0000019B INSTR:0x0675B000    00000110011101011011000000000000   	add_gt	r26, r27, 0	// If X-coord is right of boundary, wrap to left
IMEM:0x0000019C INSTR:0x77B5B000    01110111101101011011000000000000   	cmp r26, r27
IMEM:0x0000019D INSTR:0x05F58000    00000101111101011000000000000000   	add_lt	r26, r24, 0	// If left of boundary, wrap to right
IMEM:0x0000019E INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8			// Shift amount
IMEM:0x0000019F INSTR:0x7FB19D80    01111111101100011001110110000000   	mov r24, r25, r27 LSL
IMEM:0x000001A0 INSTR:0x07818D00    00000111100000011000110100000000   	add r0, r24, r26	// r0 has [Y][X]
IMEM:0x000001A1 INSTR:0x7FF4FFFF    01111111111101001111111111111111   	mov r26, 65535		// r26 has 0x0FFFF
IMEM:0x000001A2 INSTR:0x07F7A001    00000111111101111010000000000001   	add r27, r26, 1		// r27 has 0x10000
IMEM:0x000001A3 INSTR:0x77CA0001    01110111110010100000000000000001   	cmp r5, 1			// In FB2?
IMEM:0x000001A4 INSTR:0x00000D80    00000000000000000000110110000000   	add_eq r0, r0, r27	// If so, add 0x10000
IMEM:0x000001A5 INSTR:0xD7906000    11010111100100000110000000000000   	strb r4, r3, 0
IMEM:0x000001A6 INSTR:0x07C60000    00000111110001100000000000000000   	add r3, r0, 0
IMEM:0x000001A7 INSTR:0xAF900000    10101111100100000000000000000000   	ldrb r4, r0, 0 	//pixel's current value
IMEM:0x000001A8 INSTR:0x0FF64001    00001111111101100100000000000001   	and r27, r4, 1	// get bottom bit
IMEM:0x000001A9 INSTR:0x77F60000    01110111111101100000000000000000   	cmp r27, 0	
IMEM:0x000001AA INSTR:0x7870000F    01111000011100000000000000001111   	mov_eq r24, 15
IMEM:0x000001AB INSTR:0x77F60000    01110111111101100000000000000000   	cmp r27, 0
IMEM:0x000001AC INSTR:0x78F00031    01111000111100000000000000110001   	mov_ne r24, 49
IMEM:0x000001AD INSTR:0xD7E00000    11010111111000000000000000000000   	strb r24, r0, 0
IMEM:0x000001AE INSTR:0x77CC0000    01110111110011000000000000000000   	cmp r6, 0	
IMEM:0x000001AF INSTR:0x60C00006    01100000110000000000000000000110   	b_ne	 6
IMEM:0x000001B0 INSTR:0xAFED400F    10101111111011010100000000001111   	ldrb r27, r10, 15
IMEM:0x000001B1 INSTR:0x97F60002    10010111111101100000000000000010   	tst r27, 2 				// is 2 set?
IMEM:0x000001B2 INSTR:0x607FFEE5    01100000011111111111111011100101   	b_eq	 -283		// if not, continue looping
IMEM:0x000001B3 INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x000001B4 INSTR:0xD7ED400F    11010111111011010100000000001111   	strb r27, r10, 15
IMEM:0x000001B5 INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x000001B6 INSTR:0x67FFFEB5    01100111111111111111111010110101   	b  -331
IMEM:0x000001B7 INSTR:0xAFED400F    10101111111011010100000000001111   Not_infinite_loop:	ldrb r27, r10, 15
IMEM:0x000001B8 INSTR:0x97F60002    10010111111101100000000000000010   	tst r27, 2 				// is 2 set?
IMEM:0x000001B9 INSTR:0x78CDFFFF    01111000110011011111111111111111   	mov_ne r6, -1					// if so, reset repeat counter
IMEM:0x000001BA INSTR:0x97F60002    10010111111101100000000000000010   	tst r27, 2 				// is 2 set?
IMEM:0x000001BB INSTR:0x60FFFEB0    01100000111111111111111010110000   	b_ne	 -336				// if so, break out of loop
IMEM:0x000001BC INSTR:0x37CC6001    00110111110011000110000000000001   	sub r6, r6, 1			// Decrement repeat counter
IMEM:0x000001BD INSTR:0x60FFFEDA    01100000111111111111111011011010   	b_ne	 -294
IMEM:0x000001BE INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x000001BF INSTR:0x67FFFEAC    01100111111111111111111010101100   	b  -340
IMEM:0x000001C0 INSTR:0x67FFFE3E    01100111111111111111111000111110   	b	 -450
IMEM:0x000001C1 INSTR:0x0FF5A000    00001111111101011010000000000000    and r26,r26, 0
IMEM:0x000001C2 INSTR:0x07F9A00B    00000111111110011010000000001011    add R28,r26, 11
IMEM:0x000001C3 INSTR:0x27F5A000    00100111111101011010000000000000    or r26,r26, 0
IMEM:0x000001C4 INSTR:0x7FB5AE00    01111111101101011010111000000000    mov r26, r26, R28 lsl
IMEM:0x000001C5 INSTR:0x27F5A060    00100111111101011010000001100000    or r26, r26, 96
IMEM:0x000001C6 INSTR:0x7FB5AE00    01111111101101011010111000000000    mov r26, r26, R28 lsl
IMEM:0x000001C7 INSTR:0x27F5A410    00100111111101011010010000010000    or r26, r26, 1040
IMEM:0x000001C8 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001C9 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001CA INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001CB INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001CC INSTR:0x27F7B060    00100111111101111011000001100000    or r27, r27, 96
IMEM:0x000001CD INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001CE INSTR:0x27F7B59B    00100111111101111011010110011011    or r27, r27, 1435
IMEM:0x000001CF INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001D0 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001D1 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001D2 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001D3 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001D4 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001D5 INSTR:0x27F7B060    00100111111101111011000001100000    or r27, r27, 96
IMEM:0x000001D6 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001D7 INSTR:0x27F7B6DF    00100111111101111011011011011111    or r27, r27, 1759
IMEM:0x000001D8 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001D9 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001DA INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001DB INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001DC INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001DD INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001DE INSTR:0x27F7B061    00100111111101111011000001100001    or r27, r27, 97
IMEM:0x000001DF INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001E0 INSTR:0x27F7B7DF    00100111111101111011011111011111    or r27, r27, 2015
IMEM:0x000001E1 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001E2 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001E3 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001E4 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001E5 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001E6 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001E7 INSTR:0x27F7B062    00100111111101111011000001100010    or r27, r27, 98
IMEM:0x000001E8 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001E9 INSTR:0x27F7B030    00100111111101111011000000110000    or r27, r27, 48
IMEM:0x000001EA INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001EB INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001EC INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001ED INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001EE INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001EF INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001F0 INSTR:0x27F7B062    00100111111101111011000001100010    or r27, r27, 98
IMEM:0x000001F1 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001F2 INSTR:0x27F7B0D9    00100111111101111011000011011001    or r27, r27, 217
IMEM:0x000001F3 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001F4 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001F5 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001F6 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000001F7 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000001F8 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001F9 INSTR:0x27F7B062    00100111111101111011000001100010    or r27, r27, 98
IMEM:0x000001FA INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000001FB INSTR:0x27F7B55D    00100111111101111011010101011101    or r27, r27, 1373
IMEM:0x000001FC INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000001FD INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000001FE INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000001FF INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000200 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000201 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000202 INSTR:0x27F7B062    00100111111101111011000001100010    or r27, r27, 98
IMEM:0x00000203 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000204 INSTR:0x27F7B654    00100111111101111011011001010100    or r27, r27, 1620
IMEM:0x00000205 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000206 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000207 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000208 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000209 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000020A INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000020B INSTR:0x27F7B062    00100111111101111011000001100010    or r27, r27, 98
IMEM:0x0000020C INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000020D INSTR:0x27F7B7BC    00100111111101111011011110111100    or r27, r27, 1980
IMEM:0x0000020E INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x0000020F INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000210 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000211 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000212 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000213 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000214 INSTR:0x27F7B062    00100111111101111011000001100010    or r27, r27, 98
IMEM:0x00000215 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000216 INSTR:0x27F7B7D1    00100111111101111011011111010001    or r27, r27, 2001
IMEM:0x00000217 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000218 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000219 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000021A INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000021B INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000021C INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000021D INSTR:0x27F7B063    00100111111101111011000001100011    or r27, r27, 99
IMEM:0x0000021E INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000021F INSTR:0x27F7B08E    00100111111101111011000010001110    or r27, r27, 142
IMEM:0x00000220 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000221 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000222 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000223 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000224 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000225 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000226 INSTR:0x27F7B064    00100111111101111011000001100100    or r27, r27, 100
IMEM:0x00000227 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000228 INSTR:0x27F7B627    00100111111101111011011000100111    or r27, r27, 1575
IMEM:0x00000229 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x0000022A INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x0000022B INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000022C INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000022D INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000022E INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000022F INSTR:0x27F7B066    00100111111101111011000001100110    or r27, r27, 102
IMEM:0x00000230 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000231 INSTR:0x27F7B34A    00100111111101111011001101001010    or r27, r27, 842
IMEM:0x00000232 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000233 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000234 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000235 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000236 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000237 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000238 INSTR:0x27F7B066    00100111111101111011000001100110    or r27, r27, 102
IMEM:0x00000239 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000023A INSTR:0x27F7B6FB    00100111111101111011011011111011    or r27, r27, 1787
IMEM:0x0000023B INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x0000023C INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x0000023D INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000023E INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000023F INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000240 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000241 INSTR:0x27F7B066    00100111111101111011000001100110    or r27, r27, 102
IMEM:0x00000242 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000243 INSTR:0x27F7B755    00100111111101111011011101010101    or r27, r27, 1877
IMEM:0x00000244 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000245 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000246 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000247 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000248 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000249 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000024A INSTR:0x27F7B067    00100111111101111011000001100111    or r27, r27, 103
IMEM:0x0000024B INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000024C INSTR:0x27F7B265    00100111111101111011001001100101    or r27, r27, 613
IMEM:0x0000024D INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x0000024E INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x0000024F INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000250 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000251 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000252 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000253 INSTR:0x27F7B067    00100111111101111011000001100111    or r27, r27, 103
IMEM:0x00000254 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000255 INSTR:0x27F7B28C    00100111111101111011001010001100    or r27, r27, 652
IMEM:0x00000256 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000257 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000258 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000259 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000025A INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000025B INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000025C INSTR:0x27F7B067    00100111111101111011000001100111    or r27, r27, 103
IMEM:0x0000025D INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000025E INSTR:0x27F7B36D    00100111111101111011001101101101    or r27, r27, 877
IMEM:0x0000025F INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000260 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000261 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000262 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000263 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000264 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000265 INSTR:0x27F7B067    00100111111101111011000001100111    or r27, r27, 103
IMEM:0x00000266 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000267 INSTR:0x27F7B646    00100111111101111011011001000110    or r27, r27, 1606
IMEM:0x00000268 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000269 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x0000026A INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000026B INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000026C INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000026D INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000026E INSTR:0x27F7B068    00100111111101111011000001101000    or r27, r27, 104
IMEM:0x0000026F INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000270 INSTR:0x27F7B0C4    00100111111101111011000011000100    or r27, r27, 196
IMEM:0x00000271 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000272 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000273 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000274 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000275 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000276 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000277 INSTR:0x27F7B068    00100111111101111011000001101000    or r27, r27, 104
IMEM:0x00000278 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000279 INSTR:0x27F7B6B1    00100111111101111011011010110001    or r27, r27, 1713
IMEM:0x0000027A INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x0000027B INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x0000027C INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000027D INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000027E INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000027F INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000280 INSTR:0x27F7B069    00100111111101111011000001101001    or r27, r27, 105
IMEM:0x00000281 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000282 INSTR:0x27F7B335    00100111111101111011001100110101    or r27, r27, 821
IMEM:0x00000283 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000284 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000285 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000286 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000287 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000288 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000289 INSTR:0x27F7B069    00100111111101111011000001101001    or r27, r27, 105
IMEM:0x0000028A INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000028B INSTR:0x27F7B6B9    00100111111101111011011010111001    or r27, r27, 1721
IMEM:0x0000028C INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x0000028D INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x0000028E INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000028F INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000290 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000291 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000292 INSTR:0x27F7B06A    00100111111101111011000001101010    or r27, r27, 106
IMEM:0x00000293 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000294 INSTR:0x27F7B1F2    00100111111101111011000111110010    or r27, r27, 498
IMEM:0x00000295 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x00000296 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x00000297 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x00000298 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000299 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x0000029A INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000029B INSTR:0x27F7B06A    00100111111101111011000001101010    or r27, r27, 106
IMEM:0x0000029C INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x0000029D INSTR:0x27F7B2E7    00100111111101111011001011100111    or r27, r27, 743
IMEM:0x0000029E INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x0000029F INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000002A0 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000002A1 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000002A2 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000002A3 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000002A4 INSTR:0x27F7B06A    00100111111101111011000001101010    or r27, r27, 106
IMEM:0x000002A5 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000002A6 INSTR:0x27F7B5F6    00100111111101111011010111110110    or r27, r27, 1526
IMEM:0x000002A7 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000002A8 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000002A9 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000002AA INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000002AB INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000002AC INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000002AD INSTR:0x27F7B06B    00100111111101111011000001101011    or r27, r27, 107
IMEM:0x000002AE INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000002AF INSTR:0x27F7B114    00100111111101111011000100010100    or r27, r27, 276
IMEM:0x000002B0 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000002B1 INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000002B2 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000002B3 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000002B4 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000002B5 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000002B6 INSTR:0x27F7B06C    00100111111101111011000001101100    or r27, r27, 108
IMEM:0x000002B7 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000002B8 INSTR:0x27F7B3A4    00100111111101111011001110100100    or r27, r27, 932
IMEM:0x000002B9 INSTR:0xCFEF4000    11001111111011110100000000000000   	str		r27, r26, 0
IMEM:0x000002BA INSTR:0x07F5A00F    00000111111101011010000000001111   	add		r26, r26, 15
IMEM:0x000002BB INSTR:0x67FFFD7E    01100111111111111111110101111110   	b	 -642		// Return from subroutine
IMEM:0x000002BC INSTR:0x07F7B000    00000111111101111011000000000000   Process_1_Gen:	add r27, r27, 0	//noop
IMEM:0x000002BD INSTR:0x07EA0000    00000111111010100000000000000000   	add r21, r0, 0
IMEM:0x000002BE INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8			// Shift value
IMEM:0x000002BF INSTR:0x7FB25D80    01111111101100100101110110000000   	mov r25, r5, r27 LSL	// Shift the FB bit to 0x100
IMEM:0x000002C0 INSTR:0x07F39002    00000111111100111001000000000010   	add r25, r25, 2
IMEM:0x000002C1 INSTR:0x7FF40002    01111111111101000000000000000010   	mov r26, 2
IMEM:0x000002C2 INSTR:0x7F819D80    01111111100000011001110110000000   	mov r0, r25, r27 LSL	// Shift FB-bit & Y-coord over a byte
IMEM:0x000002C3 INSTR:0x07800D00    00000111100000000000110100000000   	add r0, r0, r26			// Add in the X-coord to bottom byte
IMEM:0x000002C4 INSTR:0x7FE200FD    01111111111000100000000011111101   	mov r17, 253
IMEM:0x000002C5 INSTR:0x7FF400DD    01111111111101000000000011011101   	mov r26, 221
IMEM:0x000002C6 INSTR:0x7FA45D80    01111111101001000101110110000000   	mov r18, r5, r27 LSL	// Shift FB-bit to 0x100 or 0x000
IMEM:0x000002C7 INSTR:0x07A52D00    00000111101001010010110100000000   	add r18, r18, r26		// Add Bottom y-coord to it
IMEM:0x000002C8 INSTR:0x7FA52D80    01111111101001010010110110000000   	mov r18, r18, r27 LSL	// Shift them over a byte
IMEM:0x000002C9 INSTR:0x07A52880    00000111101001010010100010000000   	add r18, r18, r17		// r18 has bottom right corner
IMEM:0x000002CA INSTR:0xA7E94016    10100111111010010100000000010110   Generation_loop:	ldr r26, r10, 22
IMEM:0x000002CB INSTR:0x97F40002    10010111111101000000000000000010   	tst r26, 2
IMEM:0x000002CC INSTR:0x6040000B    01100000010000000000000000001011   	b_eq	 11	// USE nbrhd ops
IMEM:0x000002CD INSTR:0x67C00027    01100111110000000000000000100111   	b		 39	// do NOT use them
IMEM:0x000002CE INSTR:0x07F7B000    00000111111101111011000000000000   Done_proc_nbrhd_1:	add r27, r27, 0	//noop
IMEM:0x000002CF INSTR:0x7FF600FF    01111111111101100000000011111111   	mov r27, 255		// 0x00FF
IMEM:0x000002D0 INSTR:0x0FB40D80    00001111101101000000110110000000   	and r26, r0, r27	// Grab X-coord
IMEM:0x000002D1 INSTR:0x77B51000    01110111101101010001000000000000   	cmp r26, r17		// Check if we're at the right border
IMEM:0x000002D2 INSTR:0x00400005    00000000010000000000000000000101   	add_eq r0, r0, 5	// If so, add MARGIN amount to get to beginning of next row
IMEM:0x000002D3 INSTR:0x77B51000    01110111101101010001000000000000   	cmp r26, r17		
IMEM:0x000002D4 INSTR:0x00C00001    00000000110000000000000000000001   	add_ne r0, r0, 1	// If not, increment by 1
IMEM:0x000002D5 INSTR:0x77812000    01110111100000010010000000000000   	cmp r0, r18			// Are we out of the board?
IMEM:0x000002D6 INSTR:0x66FFFFF2    01100110111111111111111111110010   	b_le	 -14
IMEM:0x000002D7 INSTR:0x07C15000    00000111110000010101000000000000   	add r0, r21, 0
IMEM:0x000002D8 INSTR:0x67FFFE8F    01100111111111111111111010001111   	b  -369
IMEM:0x000002D9 INSTR:0x07F7B000    00000111111101111011000000000000   Process_this_nbrhd_0: add r27, r27, 0	//noop
IMEM:0x000002DA INSTR:0xE7E40000    11100111111001000000000000000000   	ldneighbor r25, r0, 0	// get this neighborhood
IMEM:0x000002DB INSTR:0x0FB39780    00001111101100111001011110000000   	and r25, r25, r15			// and it with summing mask (masks out all but
IMEM:0x000002DC INSTR:0x0FB5A780    00001111101101011010011110000000   	and r26, r26, r15			// 		bit0 of each pixel)
IMEM:0x000002DD INSTR:0x47B19D00    01000111101100011001110100000000   	accumbytes r24, r25, r26	// get the nbrhd sum
IMEM:0x000002DE INSTR:0x7FF6FFFF    01111111111101101111111111111111   	mov r27, 65535
IMEM:0x000002DF INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1
IMEM:0x000002E0 INSTR:0x07A80D80    00000111101010000000110110000000   	add r20, r0, r27		// add 0x10000 to pixel address
IMEM:0x000002E1 INSTR:0x7FF4FFFF    01111111111101001111111111111111   	mov r26, 65535
IMEM:0x000002E2 INSTR:0x07B7AD80    00000111101101111010110110000000   	add r27, r26, r27		// r27 has 0x1FFFF
IMEM:0x000002E3 INSTR:0x0FA94D80    00001111101010010100110110000000   	and r20, r20, r27		// mask pixel address to stay within the two FBs
IMEM:0x000002E4 INSTR:0xAFE68000    10101111111001101000000000000000   	ldrb	r25, r20, 0		// Get pixel value in other FB
IMEM:0x000002E5 INSTR:0xAFEC0000    10101111111011000000000000000000   	ldrb	r27, r0, 0		// Get current pixel value
IMEM:0x000002E6 INSTR:0x97F60001    10010111111101100000000000000001   	tst		r27, 1			// Check bit0
IMEM:0x000002E7 INSTR:0x60400005    01100000010000000000000000000101   	b_eq	 5
IMEM:0x000002E8 INSTR:0x0FF59FFE    00001111111101011001111111111110   Was_alive_0:	and r26, r25, -2	// Default to dead (-2 = 0x1111110)
IMEM:0x000002E9 INSTR:0x77F00003    01110111111100000000000000000011   	cmp r24, 3
IMEM:0x000002EA INSTR:0x2075A001    00100000011101011010000000000001   	or_eq r26, r26, 1			// stays alive
IMEM:0x000002EB INSTR:0x77F00004    01110111111100000000000000000100   	cmp r24, 4
IMEM:0x000002EC INSTR:0x2075A001    00100000011101011010000000000001   	or_eq r26, r26, 1			// stays alive
IMEM:0x000002ED INSTR:0x67C00002    01100111110000000000000000000010   	b	 2
IMEM:0x000002EE INSTR:0x0FF59FFE    00001111111101011001111111111110   Was_dead_0:	and r26, r25, -2	// Default to dead (-2 = 0x1111110)
IMEM:0x000002EF INSTR:0x77F00003    01110111111100000000000000000011   	cmp r24, 3
IMEM:0x000002F0 INSTR:0x2075A001    00100000011101011010000000000001   	or_eq r26, r26, 1			// stays alive
IMEM:0x000002F1 INSTR:0xD7EA8000    11010111111010101000000000000000   Store_cell_0:	strb r26, r20, 0	// store result in other FB
IMEM:0x000002F2 INSTR:0x0FF73001    00001111111101110011000000000001   	and r27, r19, 1
IMEM:0x000002F3 INSTR:0x77F60000    01110111111101100000000000000000   	cmp r27, 0
IMEM:0x000002F4 INSTR:0x607FFE78    01100000011111111111111001111000   	b_eq	 -392	// exit subroutine w/ 1st option
IMEM:0x000002F5 INSTR:0x67FFFFD7    01100111111111111111111111010111   	b		 -41	// exit subroutine w/ 2nd option
IMEM:0x000002F6 INSTR:0x07F7B000    00000111111101111011000000000000   Process_this_nbrhd_1: add r27, r27, 0	//noop
IMEM:0x000002F7 INSTR:0x7FF00000    01111111111100000000000000000000   		mov r24, 0			// Accumulation
IMEM:0x000002F8 INSTR:0xAFEC1EFF    10101111111011000001111011111111   		ldrb r27, r0, -257	// upper left pixel
IMEM:0x000002F9 INSTR:0x97F60001    10010111111101100000000000000001   		tst r27, 1
IMEM:0x000002FA INSTR:0x00F18001    00000000111100011000000000000001   		add_ne r24, r24, 1	// If it was alive, inc the accum
IMEM:0x000002FB INSTR:0xAFEC1F00    10101111111011000001111100000000   		ldrb r27, r0, -256	// upper middle pixel
IMEM:0x000002FC INSTR:0x97F60001    10010111111101100000000000000001   		tst r27, 1
IMEM:0x000002FD INSTR:0x00F18001    00000000111100011000000000000001   		add_ne r24, r24, 1	// If it was alive, inc the accum
IMEM:0x000002FE INSTR:0xAFEC1F01    10101111111011000001111100000001   		ldrb r27, r0, -255	// upper right pixel
IMEM:0x000002FF INSTR:0x97F60001    10010111111101100000000000000001   		tst r27, 1
IMEM:0x00000300 INSTR:0x00F18001    00000000111100011000000000000001   		add_ne r24, r24, 1	// If it was alive, inc the accum
IMEM:0x00000301 INSTR:0xAFEC1FFF    10101111111011000001111111111111   		ldrb r27, r0, -1	// middle left pixel
IMEM:0x00000302 INSTR:0x97F60001    10010111111101100000000000000001   		tst r27, 1
IMEM:0x00000303 INSTR:0x00F18001    00000000111100011000000000000001   		add_ne r24, r24, 1	// If it was alive, inc the accum
IMEM:0x00000304 INSTR:0xAFEC0001    10101111111011000000000000000001   		ldrb r27, r0, 1		// middle right pixel
IMEM:0x00000305 INSTR:0x97F60001    10010111111101100000000000000001   		tst r27, 1
IMEM:0x00000306 INSTR:0x00F18001    00000000111100011000000000000001   		add_ne r24, r24, 1	// If it was alive, inc the accum
IMEM:0x00000307 INSTR:0xAFEC00FF    10101111111011000000000011111111   		ldrb r27, r0, 255	// bottom left pixel
IMEM:0x00000308 INSTR:0x97F60001    10010111111101100000000000000001   		tst r27, 1
IMEM:0x00000309 INSTR:0x00F18001    00000000111100011000000000000001   		add_ne r24, r24, 1	// If it was alive, inc the accum
IMEM:0x0000030A INSTR:0xAFEC0100    10101111111011000000000100000000   		ldrb r27, r0, 256	// bottom middle pixel
IMEM:0x0000030B INSTR:0x97F60001    10010111111101100000000000000001   		tst r27, 1
IMEM:0x0000030C INSTR:0x00F18001    00000000111100011000000000000001   		add_ne r24, r24, 1	// If it was alive, inc the accum
IMEM:0x0000030D INSTR:0xAFEC0101    10101111111011000000000100000001   		ldrb r27, r0, 257	// bottom right pixel
IMEM:0x0000030E INSTR:0x97F60001    10010111111101100000000000000001   		tst r27, 1
IMEM:0x0000030F INSTR:0x00F18001    00000000111100011000000000000001   		add_ne r24, r24, 1	// If it was alive, inc the accum
IMEM:0x00000310 INSTR:0xAFEC0000    10101111111011000000000000000000   		ldrb r27, r0, 0		// center pixel
IMEM:0x00000311 INSTR:0x97F60001    10010111111101100000000000000001   		tst r27, 1
IMEM:0x00000312 INSTR:0x00F18001    00000000111100011000000000000001   		add_ne r24, r24, 1	// If it was alive, inc the accum
IMEM:0x00000313 INSTR:0x7FF2FFFF    01111111111100101111111111111111   	mov r25, 65535
IMEM:0x00000314 INSTR:0x07F39001    00000111111100111001000000000001   	add r25, r25, 1
IMEM:0x00000315 INSTR:0x07A80C80    00000111101010000000110010000000   	add r20, r0, r25		// add 0x10000 to pixel address
IMEM:0x00000316 INSTR:0x7FF4FFFF    01111111111101001111111111111111   	mov r26, 65535
IMEM:0x00000317 INSTR:0x07B3AC80    00000111101100111010110010000000   	add r25, r26, r25		// r25 has 0x1FFFF
IMEM:0x00000318 INSTR:0x0FA94C80    00001111101010010100110010000000   	and r20, r20, r25		// mask pixel address to stay within the two FBs
IMEM:0x00000319 INSTR:0xAFE68000    10101111111001101000000000000000   	ldrb	r25, r20, 0		// Get pixel value in other FB
IMEM:0x0000031A INSTR:0x97F60001    10010111111101100000000000000001   	tst		r27, 1			// Check bit0
IMEM:0x0000031B INSTR:0x60400005    01100000010000000000000000000101   	b_eq	 5
IMEM:0x0000031C INSTR:0x0FF59FFE    00001111111101011001111111111110   Was_alive_1:	and r26, r25, -2	// Default to dead (-2 = 0x1111110)
IMEM:0x0000031D INSTR:0x77F00003    01110111111100000000000000000011   	cmp r24, 3
IMEM:0x0000031E INSTR:0x2075A001    00100000011101011010000000000001   	or_eq r26, r26, 1			// stays alive
IMEM:0x0000031F INSTR:0x77F00004    01110111111100000000000000000100   	cmp r24, 4
IMEM:0x00000320 INSTR:0x2075A001    00100000011101011010000000000001   	or_eq r26, r26, 1			// stays alive
IMEM:0x00000321 INSTR:0x67C00002    01100111110000000000000000000010   	b	 2
IMEM:0x00000322 INSTR:0x0FF59FFE    00001111111101011001111111111110   Was_dead_1:	and r26, r25, -2	// Default to dead (-2 = 0x1111110)
IMEM:0x00000323 INSTR:0x77F00003    01110111111100000000000000000011   	cmp r24, 3
IMEM:0x00000324 INSTR:0x2075A001    00100000011101011010000000000001   	or_eq r26, r26, 1			// stays alive
IMEM:0x00000325 INSTR:0xD7EA8000    11010111111010101000000000000000   Store_cell_1:	strb r26, r20, 0	// store result in other FB
IMEM:0x00000326 INSTR:0x0FF73001    00001111111101110011000000000001   	and r27, r19, 1
IMEM:0x00000327 INSTR:0x77F60000    01110111111101100000000000000000   	cmp r27, 0
IMEM:0x00000328 INSTR:0x607FFE44    01100000011111111111111001000100   	b_eq	 -444	// exit subroutine w/ 1st option
IMEM:0x00000329 INSTR:0x67FFFFA3    01100111111111111111111110100011   	b		 -93	// exit subroutine w/ 2nd option
IMEM:0x0000032A INSTR:0x67FFFCD4    01100111111111111111110011010100   	b  -812
IMEM:0x0000032B INSTR:0x07CA5001    00000111110010100101000000000001   Switch_fb: 	add r5, r5, 1
IMEM:0x0000032C INSTR:0x0FCA5001    00001111110010100101000000000001   	and r5, r5, 1
IMEM:0x0000032D INSTR:0x07CA5002    00000111110010100101000000000010   	add r5, r5, 2	// Set to color mode
IMEM:0x0000032E INSTR:0xD7954000    11010111100101010100000000000000   	strb r5, r10, 0
IMEM:0x0000032F INSTR:0x0FCA5001    00001111110010100101000000000001   	and r5, r5, 1	// Get rid of the extra bit
IMEM:0x00000330 INSTR:0x7FF4FFFF    01111111111101001111111111111111   	mov r26, 65535		// r26 has 0x0FFFF
IMEM:0x00000331 INSTR:0x07F7A001    00000111111101111010000000000001   	add r27, r26, 1		// r27 has 0x10000
IMEM:0x00000332 INSTR:0x77CA0001    01110111110010100000000000000001   	cmp r5, 1				// Switch to FB2 or FB1?
IMEM:0x00000333 INSTR:0x60400001    01100000010000000000000000000001   	b_eq  1	// Was in FB1
IMEM:0x00000334 INSTR:0x0F800D00    00001111100000000000110100000000   Switch_to_FB1:		and r0, r0, r26	// if FB1, clear bit 0x1....
IMEM:0x00000335 INSTR:0x67C00000    01100111110000000000000000000000   	b  0
IMEM:0x00000336 INSTR:0x27800D80    00100111100000000000110110000000   Switch_to_FB2:		or	r0, r0, r27	// if FB2, set bit 0x1....
IMEM:0x00000337 INSTR:0x97E60002    10010111111001100000000000000010   Done_switching:		tst r19, 2
IMEM:0x00000338 INSTR:0x67FFFE33    01100111111111111111111000110011   	b		 -461	// exit subroutine w/ 1st option
IMEM:0x00000339 INSTR:0x67FFFCC5    01100111111111111111110011000101   	b  -827
IMEM:0x0000033A INSTR:0x07EA0000    00000111111010100000000000000000   Set_fb:	add r21, r0, 0	// Store the old "current cursor"
IMEM:0x0000033B INSTR:0x07F7B000    00000111111101111011000000000000   	add r27, r27, 0		// noop
IMEM:0x0000033C INSTR:0x07F7B000    00000111111101111011000000000000   	add r27, r27, 0		// noop
IMEM:0x0000033D INSTR:0x7FE8F000    01111111111010001111000000000000   	mov r20, 61440
IMEM:0x0000033E INSTR:0x77F00000    01110111111100000000000000000000   	cmp r24, 0
IMEM:0x0000033F INSTR:0x60400019    01100000010000000000000000011001   	b_eq	 25	// If 0 was input, set the screen to rainbow colors
IMEM:0x00000340 INSTR:0xA7ED4004    10100111111011010100000000000100   	ldr r27, r10, 4
IMEM:0x00000341 INSTR:0x77F00001    01110111111100000000000000000001   	cmp r24, 1	// 1?
IMEM:0x00000342 INSTR:0x0071B000    00000000011100011011000000000000   	add_eq r24, r27, 0	// Get random if so
IMEM:0x00000343 INSTR:0x97F000FE    10010111111100000000000011111110   	tst r24, 254	// Is it black?
IMEM:0x00000344 INSTR:0x787000FF    01111000011100000000000011111111   	mov_eq	r24, 255	// If it would've been black, make it white
IMEM:0x00000345 INSTR:0x7FECFFFF    01111111111011001111111111111111   	mov r22, 65535	// 0x0FFFF
IMEM:0x00000346 INSTR:0x07F56001    00000111111101010110000000000001   	add r26, r22, 1	// 0x10000
IMEM:0x00000347 INSTR:0x0FB60D00    00001111101101100000110100000000   	and r27, r0, r26	// get 0x00000 or 0x10000 depending on current cursor
IMEM:0x00000348 INSTR:0xAFDF6000    10101111110111110110000000000000   Set_fb_loop:	ldrb r23, r27, 0
IMEM:0x00000349 INSTR:0x97EE0001    10010111111011100000000000000001   	tst r23, 1				// Was it alive?
IMEM:0x0000034A INSTR:0x20F18001    00100000111100011000000000000001   	or_ne	r24, r24, 1		// If so, set r24 to alive
IMEM:0x0000034B INSTR:0x97EE0001    10010111111011100000000000000001   	tst r23, 1				// Was it alive?
IMEM:0x0000034C INSTR:0x08718FFE    00001000011100011000111111111110   	and_eq	r24, r24, -2	// If not, set r24 to dead
IMEM:0x0000034D INSTR:0xD7E36000    11010111111000110110000000000000   	strb r24, r27, 0		// Store the new pixel
IMEM:0x0000034E INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1
IMEM:0x0000034F INSTR:0x0FA56D80    00001111101001010110110110000000   	and r18, r22, r27	// Mask off the FB bit
IMEM:0x00000350 INSTR:0x77A54000    01110111101001010100000000000000   	cmp r18, r20		// check if we are at the end of the FB
IMEM:0x00000351 INSTR:0x66FFFFF5    01100110111111111111111111110101   	b_le  -11
IMEM:0x00000352 INSTR:0x67FFFFFF    01100111111111111111111111111111   	b	 -1
IMEM:0x00000353 INSTR:0x7FC80000    01111111110010000000000000000000   Set_wrapup:		mov r4, 0
IMEM:0x00000354 INSTR:0x07C15000    00000111110000010101000000000000   	add r0, r21, 0
IMEM:0x00000355 INSTR:0x97E60142    10010111111001100000000101000010   	tst r19, 322
IMEM:0x00000356 INSTR:0x60FFFDCA    01100000111111111111110111001010   	b_ne	 -566		// exit subroutine w/ 3rd option
IMEM:0x00000357 INSTR:0x97E60020    10010111111001100000000000100000   	tst r19, 32
IMEM:0x00000358 INSTR:0x607FFCE4    01100000011111111111110011100100   	b_eq	 -796		// exit subroutine w/ 1st option
IMEM:0x00000359 INSTR:0x67FFFCE3    01100111111111111111110011100011   	b		 -797		// exit subroutine w/ 1st option
IMEM:0x0000035A INSTR:0x07EA0000    00000111111010100000000000000000   Set_fb_rainbow:	add r21, r0, 0	// Store the old "current cursor"
IMEM:0x0000035B INSTR:0x7FECFFFF    01111111111011001111111111111111   	mov r22, 65535	// 0x0FFFF
IMEM:0x0000035C INSTR:0x07F56001    00000111111101010110000000000001   	add r26, r22, 1	// 0x10000
IMEM:0x0000035D INSTR:0x0FB60D00    00001111101101100000110100000000   	and r27, r0, r26	// get 0x00000 or 0x10000 depending on current cursor
IMEM:0x0000035E INSTR:0x7FF00002    01111111111100000000000000000010   	mov r24, 2
IMEM:0x0000035F INSTR:0xAFDF6000    10101111110111110110000000000000   Set_fb_loop_rainbow:	ldrb r23, r27, 0
IMEM:0x00000360 INSTR:0x97EE0001    10010111111011100000000000000001   	tst r23, 1				// Was it alive?
IMEM:0x00000361 INSTR:0x20F18001    00100000111100011000000000000001   	or_ne	r24, r24, 1		// If so, set r24 to alive
IMEM:0x00000362 INSTR:0x97EE0001    10010111111011100000000000000001   	tst r23, 1				// Was it alive?
IMEM:0x00000363 INSTR:0x08718FFE    00001000011100011000111111111110   	and_eq	r24, r24, -2	// If not, set r24 to dead
IMEM:0x00000364 INSTR:0xD7E36000    11010111111000110110000000000000   	strb r24, r27, 0		// Store the new pixel
IMEM:0x00000365 INSTR:0x07F18002    00000111111100011000000000000010   	add r24, r24, 2		// Increment our rainbow color
IMEM:0x00000366 INSTR:0x97F000FE    10010111111100000000000011111110   	tst r24, 254	// Is it black?
IMEM:0x00000367 INSTR:0x78700002    01111000011100000000000000000010   	mov_eq	r24, 2	// If it would've been black, make it white
IMEM:0x00000368 INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1
IMEM:0x00000369 INSTR:0x0FA56D80    00001111101001010110110110000000   	and r18, r22, r27	// Mask off the FB bit
IMEM:0x0000036A INSTR:0x77A54000    01110111101001010100000000000000   	cmp r18, r20		// check if we are at the end of the FB
IMEM:0x0000036B INSTR:0x60FFFFF2    01100000111111111111111111110010   	b_ne  -14
IMEM:0x0000036C INSTR:0x67FFFFE5    01100111111111111111111111100101   	b	 -27
IMEM:0x0000036D INSTR:0x67FFFC91    01100111111111111111110010010001   	b  -879
IMEM:0x0000036E INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000036F INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x00000370 INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000371 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000372 INSTR:0x27F7B06D    00100111111101111011000001101101    or r27, r27, 109
IMEM:0x00000373 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000374 INSTR:0x27F7B734    00100111111101111011011100110100    or r27, r27, 1844
IMEM:0x00000375 INSTR:0x7FF40000    01111111111101000000000000000000   	mov r26, 0
IMEM:0x00000376 INSTR:0xCFEB6000    11001111111010110110000000000000   	str r26, r27, 0		// Set numStickyPixels to 0
IMEM:0x00000377 INSTR:0x07EA0000    00000111111010100000000000000000   Delete_board:	add r21, r0, 0	// Store the old "current cursor"
IMEM:0x00000378 INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8
IMEM:0x00000379 INSTR:0x7FEC00FE    01111111111011000000000011111110   	mov r22, 254
IMEM:0x0000037A INSTR:0x7FF400DE    01111111111101000000000011011110   	mov r26, 222
IMEM:0x0000037B INSTR:0x7FAE5D80    01111111101011100101110110000000   	mov r23, r5, r27 LSL	// Shift FB-bit to 0x100 or 0x000
IMEM:0x0000037C INSTR:0x07AF7D00    00000111101011110111110100000000   	add r23, r23, r26		// Add Bottom y-coord to it
IMEM:0x0000037D INSTR:0x7FAF7D80    01111111101011110111110110000000   	mov r23, r23, r27 LSL	// Shift them over a byte
IMEM:0x0000037E INSTR:0x07AF7B00    00000111101011110111101100000000   	add r23, r23, r22		// r23 has bottom right corner
IMEM:0x0000037F INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8			// Shift value
IMEM:0x00000380 INSTR:0x7FB25D80    01111111101100100101110110000000   	mov r25, r5, r27 LSL	// Shift the FB bit to 0x100
IMEM:0x00000381 INSTR:0x07F39001    00000111111100111001000000000001   	add r25, r25, 1
IMEM:0x00000382 INSTR:0x7FF40001    01111111111101000000000000000001   	mov r26, 1
IMEM:0x00000383 INSTR:0x7F819D80    01111111100000011001110110000000   	mov r0, r25, r27 LSL	// Shift FB-bit & Y-coord over a byte
IMEM:0x00000384 INSTR:0x07800D00    00000111100000000000110100000000   	add r0, r0, r26			// Add in the X-coord to bottom byte
IMEM:0x00000385 INSTR:0xAFEC0000    10101111111011000000000000000000   Clear_board_loop:		ldrb r27, r0, 0	// Grab the current pixel
IMEM:0x00000386 INSTR:0x0FF1BFFE    00001111111100011011111111111110   	and r24, r27, -2	// Turn off bit0
IMEM:0x00000387 INSTR:0xD7E00000    11010111111000000000000000000000   	strb r24, r0, 0		// Store the new dead pixel
IMEM:0x00000388 INSTR:0x7FF600FF    01111111111101100000000011111111   	mov r27, 255		// 0x00FF
IMEM:0x00000389 INSTR:0x0FB40D80    00001111101101000000110110000000   	and r26, r0, r27	// Grab X-coord
IMEM:0x0000038A INSTR:0x77B56000    01110111101101010110000000000000   	cmp r26, r22		// Check if we're at the right border
IMEM:0x0000038B INSTR:0x00400003    00000000010000000000000000000011   	add_eq r0, r0, 3	// If so, add MARGIN amount to get to beginning of next row
IMEM:0x0000038C INSTR:0x77B56000    01110111101101010110000000000000   	cmp r26, r22		
IMEM:0x0000038D INSTR:0x00C00001    00000000110000000000000000000001   	add_ne r0, r0, 1	// If not, increment by 1
IMEM:0x0000038E INSTR:0x77817000    01110111100000010111000000000000   	cmp r0, r23			// Are we out of the board?
IMEM:0x0000038F INSTR:0x66FFFFF4    01100110111111111111111111110100   	b_le	 -12
IMEM:0x00000390 INSTR:0x07C15000    00000111110000010101000000000000   	add r0, r21, 0
IMEM:0x00000391 INSTR:0x97E60004    10010111111001100000000000000100   	tst r19, 4
IMEM:0x00000392 INSTR:0x607FFDA0    01100000011111111111110110100000   	b_eq	 -608	// exit subroutine w/ 1st option
IMEM:0x00000393 INSTR:0x67FFFDA0    01100111111111111111110110100000   	b		 -608	// exit subroutine w/ 2nd option
IMEM:0x00000394 INSTR:0x67FFFC6A    01100111111111111111110001101010   	b  -918
IMEM:0x00000395 INSTR:0x07F7B000    00000111111101111011000000000000   Copy_fb: 	add r27, r27, 0	//noop
IMEM:0x00000396 INSTR:0x7FF0FFFF    01111111111100001111111111111111   	mov r24, 65535		// r26 has 0x0FFFF
IMEM:0x00000397 INSTR:0x07F78001    00000111111101111000000000000001   	add r27, r24, 1		// r27 has 0x10000
IMEM:0x00000398 INSTR:0x7FF0EFFF    01111111111100001110111111111111   	mov r24, 61439
IMEM:0x00000399 INSTR:0x7FF20000    01111111111100100000000000000000   	mov r25, 0			// initialize this addr to 0
IMEM:0x0000039A INSTR:0x7FF40000    01111111111101000000000000000000   	mov r26, 0			// initialize that addr to 0
IMEM:0x0000039B INSTR:0x97CA0001    10010111110010100000000000000001   	tst r5, 1			// Are we in FB2?
IMEM:0x0000039C INSTR:0x00F3B000    00000000111100111011000000000000   	add_ne r25, r27, 0	// If so, this addr gets 0x10000
IMEM:0x0000039D INSTR:0x97CA0001    10010111110010100000000000000001   	tst r5, 1			// Are we in FB2?
IMEM:0x0000039E INSTR:0x0075B000    00000000011101011011000000000000   	add_eq r26, r27, 0	// If not, that addr gets 0x10000
IMEM:0x0000039F INSTR:0xAFEF2000    10101111111011110010000000000000   Copy_loop:	ldrb r27, r25, 0	// Get this pixel
IMEM:0x000003A0 INSTR:0xD7EF4000    11010111111011110100000000000000   	strb r27, r26, 0			// Store into that pixel
IMEM:0x000003A1 INSTR:0x07F39001    00000111111100111001000000000001   	add r25, r25, 1
IMEM:0x000003A2 INSTR:0x07F5A001    00000111111101011010000000000001   	add r26, r26, 1
IMEM:0x000003A3 INSTR:0x7FF6FFFF    01111111111101101111111111111111   	mov r27, 65535
IMEM:0x000003A4 INSTR:0x0FAF9D80    00001111101011111001110110000000   	and r23, r25, r27	// Mask off the FB bit
IMEM:0x000003A5 INSTR:0x77AF8000    01110111101011111000000000000000   	cmp r23, r24		// Done?
IMEM:0x000003A6 INSTR:0x60FFFFF7    01100000111111111111111111110111   	b_ne	 -9	// If not, continue looping
IMEM:0x000003A7 INSTR:0x97E600A2    10010111111001100000000010100010   	tst r19, 162
IMEM:0x000003A8 INSTR:0x60FFFD7B    01100000111111111111110101111011   	b_ne	 -645	// exit subroutine w/ 3rd option
IMEM:0x000003A9 INSTR:0x97E60010    10010111111001100000000000010000   	tst r19, 16
IMEM:0x000003AA INSTR:0x607FFD26    01100000011111111111110100100110   	b_eq	 -730	// exit subroutine w/ 1st option
IMEM:0x000003AB INSTR:0x67FFFC9E    01100111111111111111110010011110   	b		 -866	// exit subroutine w/ 2nd option
IMEM:0x000003AC INSTR:0x67FFFC52    01100111111111111111110001010010   	b	 -942
IMEM:0x000003AD INSTR:0xD7900000    11010111100100000000000000000000   Plot_obj:	strb r4, r0, 0		// Replace the cursor with its previous value
IMEM:0x000003AE INSTR:0x07E80000    00000111111010000000000000000000   	add r20, r0, 0				// Store original r0
IMEM:0x000003AF INSTR:0x07E41000    00000111111001000001000000000000   	add r18, r1, 0				// Store the original key
IMEM:0x000003B0 INSTR:0x77C20000    01110111110000100000000000000000   	cmp r1, 0					// If index is 0, don't bother "multiplying"
IMEM:0x000003B1 INSTR:0x60400005    01100000010000000000000000000101   	b_eq	 5
IMEM:0x000003B2 INSTR:0x7FF4000F    01111111111101000000000000001111   	mov r26, 15		// Counter to do it 15 times
IMEM:0x000003B3 INSTR:0x7FF60000    01111111111101100000000000000000   	mov r27, 0		// Accumulation of the "multiplication" result
IMEM:0x000003B4 INSTR:0x07B61D80    00000111101101100001110110000000   Mult_by_15_loop:	add r27, r1, r27
IMEM:0x000003B5 INSTR:0x37F5A001    00110111111101011010000000000001   	sub r26, r26, 1	// Dec counter
IMEM:0x000003B6 INSTR:0x60FFFFFC    01100000111111111111111111111100   	b_ne	 -4
IMEM:0x000003B7 INSTR:0x07C3B000    00000111110000111011000000000000   	add r1, r27, 0	// Mov the offset into r1
IMEM:0x000003B8 INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x000003B9 INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x000003BA INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x000003BB INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000003BC INSTR:0x27F7B060    00100111111101111011000001100000    or r27, r27, 96
IMEM:0x000003BD INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x000003BE INSTR:0x27F7B406    00100111111101111011010000000110    or r27, r27, 1030
IMEM:0x000003BF INSTR:0x07B7B080    00000111101101111011000010000000   	add r27, r27, r1	// Move to this object's offset within LUT
IMEM:0x000003C0 INSTR:0xA7D76000    10100111110101110110000000000000   	ldr	r21, r27, 0		// WIDTH
IMEM:0x000003C1 INSTR:0xA7DB6005    10100111110110110110000000000101   	ldr	r22, r27, 5		// HEIGHT
IMEM:0x000003C2 INSTR:0xA7DF600A    10100111110111110110000000001010   	ldr	r23, r27, 10	// OBJECT ADDRESS
IMEM:0x000003C3 INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8				// Shift value
IMEM:0x000003C4 INSTR:0x7FB56D80    01111111101101010110110110000000   	mov r26, r22, r27 LSL	// Shift obj#Height over to Y-byte
IMEM:0x000003C5 INSTR:0x07B3AA80    00000111101100111010101010000000   	add r25, r26, r21		// r25 has distance from upper-left to lower-right
IMEM:0x000003C6 INSTR:0x07B20C80    00000111101100100000110010000000   	add r25, r0, r25		// Add the pixel addr to get addr of lower-right
IMEM:0x000003C7 INSTR:0x7FF60101    01111111111101100000000100000001   	mov r27, 257
IMEM:0x000003C8 INSTR:0x37B39D80    00110111101100111001110110000000   	sub r25, r25, r27		// Move it up a row and left a column to fix off-by-one indexing
IMEM:0x000003C9 INSTR:0x77E4001A    01110111111001000000000000011010   	cmp r18, 26	// If plotting game of life text, don't do boundary case
IMEM:0x000003CA INSTR:0x65400011    01100101010000000000000000010001   	b_ge	 17
IMEM:0x000003CB INSTR:0x0FF400FF    00001111111101000000000011111111   	and r26, r0, 255		//  get x-coord
IMEM:0x000003CC INSTR:0x07B55D00    00000111101101010101110100000000   	add r26, r21, r26		// add the obj width to the x-coord
IMEM:0x000003CD INSTR:0x37F7A0FE    00110111111101111010000011111110   	sub r27, r26, 254
IMEM:0x000003CE INSTR:0x65C00003    01100101110000000000000000000011   	b_lt	 3	// Don't need to adjust if there's enough space
IMEM:0x000003CF INSTR:0x37C00001    00110111110000000000000000000001   X_adjust_loop: sub r0, r0, 1	// Move left a pixel
IMEM:0x000003D0 INSTR:0x37F39001    00110111111100111001000000000001   	sub r25, r25, 1				// Move "lower left of where we want the new obj" left a pixel
IMEM:0x000003D1 INSTR:0x37F7B001    00110111111101111011000000000001   	sub r27, r27, 1				// Decrement the counter (started as how far over the cursor was)
IMEM:0x000003D2 INSTR:0x60FFFFFB    01100000111111111111111111111011   	b_ne	 -5
IMEM:0x000003D3 INSTR:0x7FF60008    01111111111101100000000000001000   Skip_x_adjust:	mov r27, 8		// Shift val
IMEM:0x000003D4 INSTR:0x7FB40DA0    01111111101101000000110110100000   	mov r26, r0, r27 LSR		// Shift the cursor down
IMEM:0x000003D5 INSTR:0x0FF5A0FF    00001111111101011010000011111111   	and r26, r26, 255			// get y-coord
IMEM:0x000003D6 INSTR:0x07B56D00    00000111101101010110110100000000   	add r26, r22, r26			// add the obj height to the y-coord
IMEM:0x000003D7 INSTR:0x37F7A0DE    00110111111101111010000011011110   	sub r27, r26, 222	// Is it past the bottom of the board?
IMEM:0x000003D8 INSTR:0x66C00003    01100110110000000000000000000011   	b_le	 3		// Don't need to adjust if there's enough space
IMEM:0x000003D9 INSTR:0x37C00100    00110111110000000000000100000000   Y_adjust_loop: sub r0, r0, 256	// Move up a pixel
IMEM:0x000003DA INSTR:0x37F39100    00110111111100111001000100000000   	sub r25, r25, 256			// Move "lower left of where we want the new obj" up a pixel
IMEM:0x000003DB INSTR:0x37F7B001    00110111111101111011000000000001   	sub r27, r27, 1				// Decrement the counter (started as how far past bottom the cursor was)
IMEM:0x000003DC INSTR:0x60FFFFFB    01100000111111111111111111111011   	b_ne	 -5
IMEM:0x000003DD INSTR:0x7FF40000    01111111111101000000000000000000   Skip_y_adjust:	mov r26, 0
IMEM:0x000003DE INSTR:0xAFE2E000    10101111111000101110000000000000   Plot_obj_loop:	ldrb r24, r23, 0	// Get obj value at this location
IMEM:0x000003DF INSTR:0xAFC80000    10101111110010000000000000000000   	ldrb r18, r0, 0					// Get old pixel value
IMEM:0x000003E0 INSTR:0x0FE52FFE    00001111111001010010111111111110   	and r18, r18, -2				// Default to dead
IMEM:0x000003E1 INSTR:0x97F00001    10010111111100000000000000000001   	tst r24, 1						// Should it be alive?
IMEM:0x000003E2 INSTR:0x20E52001    00100000111001010010000000000001   	or_ne r18, r18, 1				// If so, set alive bit to 1
IMEM:0x000003E3 INSTR:0xD7C80000    11010111110010000000000000000000   	strb r18, r0, 0					// Place it in the FB
IMEM:0x000003E4 INSTR:0x07F5A001    00000111111101011010000000000001   	add r26, r26, 1		// Count within row
IMEM:0x000003E5 INSTR:0x77B55000    01110111101101010101000000000000   	cmp r26, r21		// Check if we ran off the end of this row
IMEM:0x000003E6 INSTR:0x78740000    01111000011101000000000000000000   	mov_eq r26, 0		// If so, reset to 0
IMEM:0x000003E7 INSTR:0x7FF60100    01111111111101100000000100000000   	mov r27, 256
IMEM:0x000003E8 INSTR:0x77F40000    01110111111101000000000000000000   	cmp r26, 0
IMEM:0x000003E9 INSTR:0x00000D80    00000000000000000000110110000000   	add_eq r0, r0, r27	// Move down a row
IMEM:0x000003EA INSTR:0x77F40000    01110111111101000000000000000000   	cmp r26, 0
IMEM:0x000003EB INSTR:0x30000A80    00110000000000000000101010000000   	sub_eq r0, r0, r21	// Get back to the left side of the obj
IMEM:0x000003EC INSTR:0x07C00001    00000111110000000000000000000001   	add r0, r0, 1
IMEM:0x000003ED INSTR:0x07EF7001    00000111111011110111000000000001   	add r23, r23, 1				// Increment our location in the obj dmem
IMEM:0x000003EE INSTR:0x77819000    01110111100000011001000000000000   	cmp r0, r25					// Are we past the end of the obj? (i.e. done)
IMEM:0x000003EF INSTR:0x66FFFFED    01100110111111111111111111101101   	b_le	 -19		// If not, continue looping
IMEM:0x000003F0 INSTR:0x07C14000    00000111110000010100000000000000   	add r0, r20, 0		// Restore original r0
IMEM:0x000003F1 INSTR:0xAF900000    10101111100100000000000000000000   	ldrb r4, r0, 0		// Reload cursor loc's value
IMEM:0x000003F2 INSTR:0x97E60A02    10010111111001100000101000000010   	tst r19, 2562
IMEM:0x000003F3 INSTR:0x60FFFC50    01100000111111111111110001010000   	b_ne	 -944
IMEM:0x000003F4 INSTR:0x97E60100    10010111111001100000000100000000   	tst r19, 256
IMEM:0x000003F5 INSTR:0x607FFC52    01100000011111111111110001010010   	b_eq	 -942
IMEM:0x000003F6 INSTR:0x67FFFD48    01100111111111111111110101001000   	b		 -696
IMEM:0x000003F7 INSTR:0x67FFFC07    01100111111111111111110000000111   	b  -1017
IMEM:0x000003F8 INSTR:0x7FF0003F    01111111111100000000000000111111   Menu_setup: 	mov r24, 63	// Base color to make the menu
IMEM:0x000003F9 INSTR:0x7FF2F000    01111111111100101111000000000000   	mov r25, 61440	// End of FB1 (stop at row 240)
IMEM:0x000003FA INSTR:0x7FF6FFFF    01111111111101101111111111111111   	mov r27, 65535
IMEM:0x000003FB INSTR:0x07B59D80    00000111101101011001110110000000   	add r26, r25, r27
IMEM:0x000003FC INSTR:0x37F39001    00110111111100111001000000000001   Paint_menu_fb1_loop: sub r25, r25, 1
IMEM:0x000003FD INSTR:0xD7E32000    11010111111000110010000000000000   	strb r24, r25, 0
IMEM:0x000003FE INSTR:0x77F20000    01110111111100100000000000000000   	cmp r25, 0
IMEM:0x000003FF INSTR:0x60FFFFFB    01100000111111111111111111111011   	b_ne	 -5
IMEM:0x00000400 INSTR:0x7FF000C1    01111111111100000000000011000001   	mov r24, 193
IMEM:0x00000401 INSTR:0xD7E34000    11010111111000110100000000000000   Paint_menu_fb2_loop: strb r24, r26, 0
IMEM:0x00000402 INSTR:0x37F5A001    00110111111101011010000000000001   	sub r26, r26, 1
IMEM:0x00000403 INSTR:0x77B5B000    01110111101101011011000000000000   	cmp r26, r27		// Is it at 0x0FFFF yet?
IMEM:0x00000404 INSTR:0x60FFFFFB    01100000111111111111111111111011   	b_ne	 -5
IMEM:0x00000405 INSTR:0x0FF5A000    00001111111101011010000000000000    and r26,r26, 0
IMEM:0x00000406 INSTR:0x07F9A00B    00000111111110011010000000001011    add R28,r26, 11
IMEM:0x00000407 INSTR:0x27F5A000    00100111111101011010000000000000    or r26,r26, 0
IMEM:0x00000408 INSTR:0x7FB5AE00    01111111101101011010111000000000    mov r26, r26, R28 lsl
IMEM:0x00000409 INSTR:0x27F5A05E    00100111111101011010000001011110    or r26, r26, 94
IMEM:0x0000040A INSTR:0x7FB5AE00    01111111101101011010111000000000    mov r26, r26, R28 lsl
IMEM:0x0000040B INSTR:0x27F5A000    00100111111101011010000000000000    or r26, r26, 0
IMEM:0x0000040C INSTR:0xA7EB4000    10100111111010110100000000000000   	ldr r26, r26, 0
IMEM:0x0000040D INSTR:0x0FF7B000    00001111111101111011000000000000    and r27,r27, 0
IMEM:0x0000040E INSTR:0x07F9B00B    00000111111110011011000000001011    add R28,r27, 11
IMEM:0x0000040F INSTR:0x27F7B000    00100111111101111011000000000000    or r27,r27, 0
IMEM:0x00000410 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000411 INSTR:0x27F7B05E    00100111111101111011000001011110    or r27, r27, 94
IMEM:0x00000412 INSTR:0x7FB7BE00    01111111101101111011111000000000    mov r27, r27, R28 lsl
IMEM:0x00000413 INSTR:0x27F7B005    00100111111101111011000000000101    or r27, r27, 5
IMEM:0x00000414 INSTR:0x7FDC000F    01111111110111000000000000001111   	mov r14, 15
IMEM:0x00000415 INSTR:0x7FE80031    01111111111010000000000000110001   	mov r20, 49
IMEM:0x00000416 INSTR:0x7FEA0009    01111111111010100000000000001001   	mov r21, 9
IMEM:0x00000417 INSTR:0x7FEC000F    01111111111011000000000000001111   	mov r22, 15
IMEM:0x00000418 INSTR:0x7FEE00C9    01111111111011100000000011001001   	mov r23, 201
IMEM:0x00000419 INSTR:0x7FF00031    01111111111100000000000000110001   	mov r24, 49
IMEM:0x0000041A INSTR:0x07F7B000    00000111111101111011000000000000   Set_menu_pixels_loop:	add r27, r27, 0
IMEM:0x0000041B INSTR:0xAFE76002    10101111111001110110000000000010   	ldrb r25, r27, 2	// Get the pixel location and color
IMEM:0x0000041C INSTR:0x7FDE000F    01111111110111100000000000001111   	mov r15, 15
IMEM:0x0000041D INSTR:0x97F20001    10010111111100100000000000000001   	tst r25, 1		// bit0 set?
IMEM:0x0000041E INSTR:0x78DE0031    01111000110111100000000000110001   	mov_ne r15, 49
IMEM:0x0000041F INSTR:0x7FE0000F    01111111111000000000000000001111   	mov r16, 15
IMEM:0x00000420 INSTR:0x97F20002    10010111111100100000000000000010   	tst r25, 2		// bit1 set?
IMEM:0x00000421 INSTR:0x78E00031    01111000111000000000000000110001   	mov_ne r16, 49
IMEM:0x00000422 INSTR:0xB7C76000    10110111110001110110000000000000   	ldrh	r17, r27, 0	// ldrh gets 2 bytes
IMEM:0x00000423 INSTR:0x07F7B000    00000111111101111011000000000000   	add r27, r27, 0	//noop
IMEM:0x00000424 INSTR:0xD7BE2000    11010111101111100010000000000000   	strb	r15, r17, 0	// Store the appropriate color into FB1
IMEM:0x00000425 INSTR:0x7FF2FFFF    01111111111100101111111111111111   	mov r25, 65535
IMEM:0x00000426 INSTR:0x07F39001    00000111111100111001000000000001   	add r25, r25, 1		// 0x1000 - offset for FB2
IMEM:0x00000427 INSTR:0x07A31C80    00000111101000110001110010000000   	add r17, r17, r25	// Move the dest addr to FB2
IMEM:0x00000428 INSTR:0xD7C22000    11010111110000100010000000000000   	strb r16, r17, 0	// Store the appropriate color into FB2
IMEM:0x00000429 INSTR:0x07F7B000    00000111111101111011000000000000   	add r27, r27, 0	//noop
IMEM:0x0000042A INSTR:0x07F7B003    00000111111101111011000000000011   	add r27, r27, 3		// Move the addr to the next menu item in dmem
IMEM:0x0000042B INSTR:0x37F5A001    00110111111101011010000000000001   	sub r26, r26, 1		// Decrement the counter for how many items we've written
IMEM:0x0000042C INSTR:0x60FFFFEC    01100000111111111111111111101100   	b_ne	 -20	// Loop until it's 0
IMEM:0x0000042D INSTR:0x97E61000    10010111111001100001000000000000   	tst r19, 4096
IMEM:0x0000042E INSTR:0x607FFBDB    01100000011111111111101111011011   	b_eq 	 -1061
IMEM:0x0000042F INSTR:0x67FFFCE8    01100111111111111111110011101000   	b		 -792
IMEM:0x00000430 INSTR:0x67FFFBCE    01100111111111111111101111001110   	b	 -1074	//DON'T START PROGRAM WITH SUBROUTINE
IMEM:0x00000431 INSTR:0x7FF6FFFF    01111111111101101111111111111111   Bcd_to_bin:	mov r27, 65535	// 0xFFFF
IMEM:0x00000432 INSTR:0x0F8C6D80    00001111100011000110110110000000   	and r6, r6, r27			// Mask it down to 4-digits
IMEM:0x00000433 INSTR:0x7FF6000F    01111111111101100000000000001111   	mov r27, 15				// Digit mask
IMEM:0x00000434 INSTR:0x7FF403E8    01111111111101000000001111101000   	mov r26, 1000			// Multiplicand (aka number of times to loop)
IMEM:0x00000435 INSTR:0x7FF2000C    01111111111100100000000000001100   	mov r25, 12				// Shift amount
IMEM:0x00000436 INSTR:0x7FB06CA0    01111111101100000110110010100000   	mov r24, r6, r25 LSR	// BCD >> 12
IMEM:0x00000437 INSTR:0x0FB18D80    00001111101100011000110110000000   	and r24, r24, r27		// (" ") & 0x0f
IMEM:0x00000438 INSTR:0x7FEE0000    01111111111011100000000000000000   	mov r23, 0					// Accum
IMEM:0x00000439 INSTR:0x07AF8B80    00000111101011111000101110000000   Bcd_digit3:	add r23, r24, r23	// add r24 to itself 1000 times to immitate "*1000"
IMEM:0x0000043A INSTR:0x37F5A001    00110111111101011010000000000001   	sub r26, r26, 1
IMEM:0x0000043B INSTR:0x60FFFFFC    01100000111111111111111111111100   	b_ne  -4			// If not 0, continue looping
IMEM:0x0000043C INSTR:0x7FF40064    01111111111101000000000001100100   	mov r26, 100			// Multiplicand (aka number of times to loop)
IMEM:0x0000043D INSTR:0x7FF20008    01111111111100100000000000001000   	mov r25, 8				// Shift amount
IMEM:0x0000043E INSTR:0x7FB06CA0    01111111101100000110110010100000   	mov r24, r6, r25 LSR	// BCD >> 8
IMEM:0x0000043F INSTR:0x0FB18D80    00001111101100011000110110000000   	and r24, r24, r27		// (" ") & 0x0f
IMEM:0x00000440 INSTR:0x07AF8B80    00000111101011111000101110000000   Bcd_digit2:	add r23, r24, r23	// add r24 to itself 100 times to immitate "*100"
IMEM:0x00000441 INSTR:0x37F5A001    00110111111101011010000000000001   	sub r26, r26, 1
IMEM:0x00000442 INSTR:0x60FFFFFC    01100000111111111111111111111100   	b_ne  -4		// If not 0, continue looping
IMEM:0x00000443 INSTR:0x7FF4000A    01111111111101000000000000001010   	mov r26, 10				// Multiplicand (aka number of times to loop)
IMEM:0x00000444 INSTR:0x7FF20004    01111111111100100000000000000100   	mov r25, 4				// Shift amount
IMEM:0x00000445 INSTR:0x7FB06CA0    01111111101100000110110010100000   	mov r24, r6, r25 LSR	// BCD >> 4
IMEM:0x00000446 INSTR:0x0FB18D80    00001111101100011000110110000000   	and r24, r24, r27		// (" ") & 0x0f
IMEM:0x00000447 INSTR:0x07AF8B80    00000111101011111000101110000000   Bcd_digit1:	add r23, r24, r23	// add r24 to itself 10 times to immitate "*10"
IMEM:0x00000448 INSTR:0x37F5A001    00110111111101011010000000000001   	sub r26, r26, 1
IMEM:0x00000449 INSTR:0x60FFFFFC    01100000111111111111111111111100   	b_ne  -4		// If not 0, continue looping
IMEM:0x0000044A INSTR:0x0FB06D80    00001111101100000110110110000000   	and r24, r6, r27		// (" ") & 0x0f
IMEM:0x0000044B INSTR:0x078D8B80    00000111100011011000101110000000   Bcd_digit0:	add r6, r24, r23	// += (BCD)&0x0f
IMEM:0x0000044C INSTR:0x97E60400    10010111111001100000010000000000   	tst r19, 1024
IMEM:0x0000044D INSTR:0x607FFC49    01100000011111111111110001001001   	b_eq	 -951	// Exit subroutine to GoL
IMEM:0x0000044E INSTR:0x67C0005D    01100111110000000000000001011101   	b		 93	// Exit subroutine to image proc
IMEM:0x0000044F INSTR:0x67FFFBAF    01100111111111111111101110101111   	b  -1105
IMEM:0x00000450 INSTR:0x07E80000    00000111111010000000000000000000   Make_border:	add r20, r0, 0	// Store the cursor
IMEM:0x00000451 INSTR:0x7FC00000    01111111110000000000000000000000   	mov r0, 0	// Move the cursor to the upper left corner
IMEM:0x00000452 INSTR:0x7FF2FFFF    01111111111100101111111111111111   	mov r25, 65535
IMEM:0x00000453 INSTR:0x07F39001    00000111111100111001000000000001   	add r25, r25, 1	// 0x10000
IMEM:0x00000454 INSTR:0x27AA0C80    00100111101010100000110010000000   	or r21, r0, r25	// r21 has the cursor addr in FB2
IMEM:0x00000455 INSTR:0x7FECEFFF    01111111111011001110111111111111   	mov r22, 61439	// Bottom of visible FB
IMEM:0x00000456 INSTR:0x7FF600FF    01111111111101100000000011111111   	mov r27, 255	// Subtract amount
IMEM:0x00000457 INSTR:0x37AF6D80    00110111101011110110110110000000   	sub r23, r22, r27	// Bottom left corner
IMEM:0x00000458 INSTR:0xAFE40000    10101111111001000000000000000000   Set_left_border_loop:	ldrb r25, r0, 0	// Get the current value
IMEM:0x00000459 INSTR:0x27F39001    00100111111100111001000000000001   	or r25, r25, 1		// Turn the pixel on
IMEM:0x0000045A INSTR:0xD7E40000    11010111111001000000000000000000   	strb r25, r0, 0		// Store in FB1
IMEM:0x0000045B INSTR:0xD7E6A000    11010111111001101010000000000000   	strb r25, r21, 0	// Store in FB2
IMEM:0x0000045C INSTR:0x07EB5100    00000111111010110101000100000000   	add r21, r21, 256	// Move FB2 addr down a row
IMEM:0x0000045D INSTR:0x07C00100    00000111110000000000000100000000   	add r0, r0, 256		// Move FB1 addr down a row
IMEM:0x0000045E INSTR:0x77817000    01110111100000010111000000000000   	cmp r0, r23			// Are we at bottom left corner?
IMEM:0x0000045F INSTR:0x60FFFFF7    01100000111111111111111111110111   	b_ne	 -9
IMEM:0x00000460 INSTR:0x07EF7100    00000111111011110111000100000000   	add r23, r23, 256	// r23 has Bottom right corner
IMEM:0x00000461 INSTR:0xAFE40000    10101111111001000000000000000000   Set_bottom_border_loop:	ldrb r25, r0, 0	// Get the current value
IMEM:0x00000462 INSTR:0x27F39001    00100111111100111001000000000001   	or r25, r25, 1		// Turn the pixel on
IMEM:0x00000463 INSTR:0xD7E40000    11010111111001000000000000000000   	strb r25, r0, 0		// Store in FB1
IMEM:0x00000464 INSTR:0xD7E6A000    11010111111001101010000000000000   	strb r25, r21, 0	// Store in FB2
IMEM:0x00000465 INSTR:0x07EB5001    00000111111010110101000000000001   	add r21, r21, 1		// Move FB2 addr right a column
IMEM:0x00000466 INSTR:0x07C00001    00000111110000000000000000000001   	add r0, r0, 1		// Move Fb1 addr right a column
IMEM:0x00000467 INSTR:0x77817000    01110111100000010111000000000000   	cmp r0, r23			// Are we at the bottom right corner?
IMEM:0x00000468 INSTR:0x60FFFFF7    01100000111111111111111111110111   	b_ne	 -9
IMEM:0x00000469 INSTR:0x7FEE00FF    01111111111011100000000011111111   	mov r23, 255		// r23 has top right corner
IMEM:0x0000046A INSTR:0x37C00001    00110111110000000000000000000001   	sub r0, r0, 1		// Move back to the lower right corner
IMEM:0x0000046B INSTR:0xAFE40000    10101111111001000000000000000000   Set_right_border_loop:	ldrb r25, r0, 0	// Get the current value
IMEM:0x0000046C INSTR:0x27F39001    00100111111100111001000000000001   	or r25, r25, 1		// Turn the pixel on
IMEM:0x0000046D INSTR:0xD7E40000    11010111111001000000000000000000   	strb r25, r0, 0		// Store in FB1
IMEM:0x0000046E INSTR:0xD7E6A000    11010111111001101010000000000000   	strb r25, r21, 0	// Store in FB2
IMEM:0x0000046F INSTR:0x37EB5100    00110111111010110101000100000000   	sub r21, r21, 256	// Move FB2 addr up a row
IMEM:0x00000470 INSTR:0x37C00100    00110111110000000000000100000000   	sub r0, r0, 256		// Move Fb1 addr up a row
IMEM:0x00000471 INSTR:0x77817000    01110111100000010111000000000000   	cmp r0, r23			// Are we at the upper right corner?
IMEM:0x00000472 INSTR:0x60FFFFF7    01100000111111111111111111110111   	b_ne	 -9
IMEM:0x00000473 INSTR:0x7FEE0000    01111111111011100000000000000000   	mov r23, 0			// r23 has top left corner
IMEM:0x00000474 INSTR:0xAFE40000    10101111111001000000000000000000   Set_top_border_loop:	ldrb r25, r0, 0	// Get the current value
IMEM:0x00000475 INSTR:0x27F39001    00100111111100111001000000000001   	or r25, r25, 1		// Turn the pixel on
IMEM:0x00000476 INSTR:0xD7E40000    11010111111001000000000000000000   	strb r25, r0, 0		// Store in FB1
IMEM:0x00000477 INSTR:0xD7E6A000    11010111111001101010000000000000   	strb r25, r21, 0	// Store in FB2
IMEM:0x00000478 INSTR:0x37EB5001    00110111111010110101000000000001   	sub r21, r21, 1		// Move FB2 addr left a column
IMEM:0x00000479 INSTR:0x37C00001    00110111110000000000000000000001   	sub r0, r0, 1		// Move Fb1 addr left a column
IMEM:0x0000047A INSTR:0x77817000    01110111100000010111000000000000   	cmp r0, r23			// Are we at the upper right corner?
IMEM:0x0000047B INSTR:0x60FFFFF7    01100000111111111111111111110111   	b_ne	 -9
IMEM:0x0000047C INSTR:0x7FF60008    01111111111101100000000000001000   	mov r27, 8			// Shift val
IMEM:0x0000047D INSTR:0x7F818D80    01111111100000011000110110000000   	mov r0, r24, r27 LSL	// Shift the specific row number over to y-coord
IMEM:0x0000047E INSTR:0xAFE40000    10101111111001000000000000000000   Set_specific_line_loop:	ldrb r25, r0, 0	// Get the current value
IMEM:0x0000047F INSTR:0x27F39001    00100111111100111001000000000001   	or r25, r25, 1		// Turn the pixel on
IMEM:0x00000480 INSTR:0xD7E40000    11010111111001000000000000000000   	strb r25, r0, 0		// Store in FB1
IMEM:0x00000481 INSTR:0xD7E6A000    11010111111001101010000000000000   	strb r25, r21, 0	// Store in FB2
IMEM:0x00000482 INSTR:0x07EB5001    00000111111010110101000000000001   	add r21, r21, 1		// Move FB2 addr right a column
IMEM:0x00000483 INSTR:0x07C00001    00000111110000000000000000000001   	add r0, r0, 1		// Move Fb1 addr right a column
IMEM:0x00000484 INSTR:0x97C000FF    10010111110000000000000011111111   	tst r0, 255			// Tst agains 0xFF ... if x-coord is 0, we're done
IMEM:0x00000485 INSTR:0x60FFFFF7    01100000111111111111111111110111   	b_ne	 -9
IMEM:0x00000486 INSTR:0x77E60200    01110111111001100000001000000000   	cmp r19, 512
IMEM:0x00000487 INSTR:0x67FFFBB8    01100111111111111111101110111000   	b		 -1096	// Retun to gol code
IMEM:0x00000488 INSTR:0xFF800000    11111111100000000000000000000000    halt
IMEM:0x00000489 INSTR:0x67FFFB75    01100111111111111111101101110101   	b	 -1163		// start with Main_menu 
IMEM:0x0000048A INSTR:0x7FF40FFF    01111111111101000000111111111111   Start_image_proc:	MOV R26,	4095
IMEM:0x0000048B INSTR:0x7FF6001C    01111111111101100000000000011100   	MOV R27,	28
IMEM:0x0000048C INSTR:0x7FA3AD80    01111111101000111010110110000000   	MOV R17,	R26, R27 LSL		// R17 <- _INIT << _SHIFT
IMEM:0x0000048D INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x0000048E INSTR:0x7FCA0001    01111111110010100000000000000001   	mov r5, 1	// FB2, bw mode
IMEM:0x0000048F INSTR:0xD7962000    11010111100101100010000000000000   	strb r5, r17, 0
IMEM:0x00000490 INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x00000491 INSTR:0xD7EE2010    11010111111011100010000000010000   	strb r27, r17, 16 
IMEM:0x00000492 INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0			// Signal to return here
IMEM:0x00000493 INSTR:0x67C0003C    01100111110000000000000000111100   	b  60
IMEM:0x00000494 INSTR:0xAFEE200F    10101111111011100010000000001111   Img_Wait_kbd: ldrb r27, r17, 15
IMEM:0x00000495 INSTR:0x97F60002    10010111111101100000000000000010   	tst r27, 2 // is 2 set?
IMEM:0x00000496 INSTR:0x607FFFFC    01100000011111111111111111111100   	b_eq  -4
IMEM:0x00000497 INSTR:0x7FF60002    01111111111101100000000000000010   	mov r27, 2
IMEM:0x00000498 INSTR:0xD7EE200F    11010111111011100010000000001111   	strb r27, r17, 15
IMEM:0x00000499 INSTR:0xAF862012    10101111100001100010000000010010   	ldrb r1, r17, 18	// get the key
IMEM:0x0000049A INSTR:0x7FF60030    01111111111101100000000000110000    mov r27, 48
IMEM:0x0000049B INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000049C INSTR:0x65C0000A    01100101110000000000000000001010   	b_lt	 10
IMEM:0x0000049D INSTR:0x7FF60039    01111111111101100000000000111001    mov r27, 57
IMEM:0x0000049E INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x0000049F INSTR:0x66400007    01100110010000000000000000000111   	b_gt	 7
IMEM:0x000004A0 INSTR:0x7FF6000F    01111111111101100000000000001111   	mov r27, 15			// 0x0F
IMEM:0x000004A1 INSTR:0x0FAA1D80    00001111101010100001110110000000   	and r21, r1, r27	// bottom hex digit of number (0-9)
IMEM:0x000004A2 INSTR:0x77CDFFFF    01110111110011011111111111111111   	cmp r6, -1			// Was it set to -1?
IMEM:0x000004A3 INSTR:0x784C0000    01111000010011000000000000000000   	mov_eq r6, 0		// If so, set r6 to 0
IMEM:0x000004A4 INSTR:0x7FF20004    01111111111100100000000000000100   	mov r25, 4			// Shift amount
IMEM:0x000004A5 INSTR:0x7FB46C80    01111111101101000110110010000000   	mov r26, r6, r25 LSL	// r26 <- Previous number << 4
IMEM:0x000004A6 INSTR:0x078DAA80    00000111100011011010101010000000   	add r6, r26, r21
IMEM:0x000004A7 INSTR:0x67FFFFEB    01100111111111111111111111101011   	b		 -21
IMEM:0x000004A8 INSTR:0x07F5A000    00000111111101011010000000000000   imgNot_a_number: add r26, r26, 0	//noop
IMEM:0x000004A9 INSTR:0x77CDFFFF    01110111110011011111111111111111   	cmp r6, -1			// Was it set to -1?
IMEM:0x000004AA INSTR:0x784C0001    01111000010011000000000000000001   	mov_eq r6, 1		// If so, set r6 to 1
IMEM:0x000004AB INSTR:0x7FE60400    01111111111001100000010000000000   	mov r19, 1024
IMEM:0x000004AC INSTR:0x67FFFF83    01100111111111111111111110000011   	b	 -125
IMEM:0x000004AD INSTR:0x07F7B000    00000111111101111011000000000000   Done_bcd_to_bin_1: add r27, r27, 0 //noop
IMEM:0x000004AE INSTR:0x07F7B000    00000111111101111011000000000000   imgRepeatKey_loop:	add r27, r27, 0	//noop
IMEM:0x000004AF INSTR:0x7FF6001B    01111111111101100000000000011011    mov r27, 27
IMEM:0x000004B0 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000004B1 INSTR:0x607FFB4D    01100000011111111111101101001101   	b_eq	 -1203	// branch to subroutine that returns to main menu, in ross's code
IMEM:0x000004B2 INSTR:0x7FF60014    01111111111101100000000000010100    mov r27, 20
IMEM:0x000004B3 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000004B4 INSTR:0x784A0001    01111000010010100000000000000001   	mov_eq r5, 1	// FB2, bw mode
IMEM:0x000004B5 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000004B6 INSTR:0xD0162000    11010000000101100010000000000000   	strb_eq r5, r17, 0
IMEM:0x000004B7 INSTR:0x7FF60012    01111111111101100000000000010010    mov r27, 18
IMEM:0x000004B8 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000004B9 INSTR:0x784A0000    01111000010010100000000000000000   	mov_eq r5, 0	// FB1, bw mode
IMEM:0x000004BA INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000004BB INSTR:0xD0162000    11010000000101100010000000000000   	strb_eq r5, r17, 0
IMEM:0x000004BC INSTR:0x7FF60061    01111111111101100000000001100001    mov r27, 97
IMEM:0x000004BD INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000004BE INSTR:0x60400031    01100000010000000000000000110001   	b_eq  49 //avg filter
IMEM:0x000004BF INSTR:0x7FF60074    01111111111101100000000001110100    mov r27, 116
IMEM:0x000004C0 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000004C1 INSTR:0x604000E3    01100000010000000000000011100011   	b_eq  227 //threshold function
IMEM:0x000004C2 INSTR:0x7FF6006D    01111111111101100000000001101101    mov r27, 109
IMEM:0x000004C3 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000004C4 INSTR:0x60400050    01100000010000000000000001010000   	b_eq  80 //median filter
IMEM:0x000004C5 INSTR:0x7FF6006E    01111111111101100000000001101110    mov r27, 110
IMEM:0x000004C6 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000004C7 INSTR:0x60400094    01100000010000000000000010010100   	b_eq  148 //add noise to the image 
IMEM:0x000004C8 INSTR:0x7FF60067    01111111111101100000000001100111    mov r27, 103
IMEM:0x000004C9 INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000004CA INSTR:0x604000B1    01100000010000000000000010110001   	b_eq  177 //add gaussian noise to the image 
IMEM:0x000004CB INSTR:0x7FF60072    01111111111101100000000001110010    mov r27, 114
IMEM:0x000004CC INSTR:0x7FE60000    01111111111001100000000000000000   	mov r19, 0
IMEM:0x000004CD INSTR:0x7783B000    01110111100000111011000000000000   	cmp r1, r27
IMEM:0x000004CE INSTR:0x60400001    01100000010000000000000000000001   	b_eq  1 //resets the image to the original
IMEM:0x000004CF INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x000004D0 INSTR:0x67FFFFC2    01100111111111111111111111000010   	b  -62 //didn't press a valid key
IMEM:0x000004D1 INSTR:0x0FF18000    00001111111100011000000000000000    and r24,r24, 0
IMEM:0x000004D2 INSTR:0x07F9800B    00000111111110011000000000001011    add R28,r24, 11
IMEM:0x000004D3 INSTR:0x27F18000    00100111111100011000000000000000    or r24,r24, 0
IMEM:0x000004D4 INSTR:0x7FB18E00    01111111101100011000111000000000    mov r24, r24, R28 lsl
IMEM:0x000004D5 INSTR:0x27F1806D    00100111111100011000000001101101    or r24, r24, 109
IMEM:0x000004D6 INSTR:0x7FB18E00    01111111101100011000111000000000    mov r24, r24, R28 lsl
IMEM:0x000004D7 INSTR:0x27F1872F    00100111111100011000011100101111    or r24, r24, 1839
IMEM:0x000004D8 INSTR:0xA7E30000    10100111111000110000000000000000   	      ldr r24,r24,0 
IMEM:0x000004D9 INSTR:0x0FEB5000    00001111111010110101000000000000    and r21,r21, 0
IMEM:0x000004DA INSTR:0x07F9500B    00000111111110010101000000001011    add R28,r21, 11
IMEM:0x000004DB INSTR:0x27EB5000    00100111111010110101000000000000    or r21,r21, 0
IMEM:0x000004DC INSTR:0x7FAB5E00    01111111101010110101111000000000    mov r21, r21, R28 lsl
IMEM:0x000004DD INSTR:0x27EB5020    00100111111010110101000000100000    or r21, r21, 32
IMEM:0x000004DE INSTR:0x7FAB5E00    01111111101010110101111000000000    mov r21, r21, R28 lsl
IMEM:0x000004DF INSTR:0x27EB5000    00100111111010110101000000000000    or r21, r21, 0
IMEM:0x000004E0 INSTR:0x0FED6000    00001111111011010110000000000000    and r22,r22, 0
IMEM:0x000004E1 INSTR:0x07F9600B    00000111111110010110000000001011    add R28,r22, 11
IMEM:0x000004E2 INSTR:0x27ED6000    00100111111011010110000000000000    or r22,r22, 0
IMEM:0x000004E3 INSTR:0x7FAD6E00    01111111101011010110111000000000    mov r22, r22, R28 lsl
IMEM:0x000004E4 INSTR:0x27ED6040    00100111111011010110000001000000    or r22, r22, 64
IMEM:0x000004E5 INSTR:0x7FAD6E00    01111111101011010110111000000000    mov r22, r22, R28 lsl
IMEM:0x000004E6 INSTR:0x27ED6000    00100111111011010110000000000000    or r22, r22, 0
IMEM:0x000004E7 INSTR:0x7FF20000    01111111111100100000000000000000   	mov r25, 0			// initialize this addr to 0
IMEM:0x000004E8 INSTR:0xAFEEC000    10101111111011101100000000000000   imgCopy_loop:	ldrb r27, r22, 0	// get pixel from base
IMEM:0x000004E9 INSTR:0xD7EEA000    11010111111011101010000000000000   		strb r27, r21, 0	// Store into fb2
IMEM:0x000004EA INSTR:0x07F39001    00000111111100111001000000000001   	add r25, r25, 1 //count++
IMEM:0x000004EB INSTR:0x07EB5001    00000111111010110101000000000001   	add r21, r21, 1
IMEM:0x000004EC INSTR:0x07ED6001    00000111111011010110000000000001   	add r22, r22, 1
IMEM:0x000004ED INSTR:0x77B38000    01110111101100111000000000000000   	cmp r25, r24		// Done?
IMEM:0x000004EE INSTR:0x60FFFFF8    01100000111111111111111111111000   	b_ne	 -8	// If not, continue looping
IMEM:0x000004EF INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x000004F0 INSTR:0x67FFFFA2    01100111111111111111111110100010   	b	 -94 //return to input loop 
IMEM:0x000004F1 INSTR:0x0FC00000    00001111110000000000000000000000    and r0,r0, 0
IMEM:0x000004F2 INSTR:0x07F8000B    00000111111110000000000000001011    add R28,r0, 11
IMEM:0x000004F3 INSTR:0x27C00000    00100111110000000000000000000000    or r0,r0, 0
IMEM:0x000004F4 INSTR:0x7F800E00    01111111100000000000111000000000    mov r0, r0, R28 lsl
IMEM:0x000004F5 INSTR:0x27C00020    00100111110000000000000000100000    or r0, r0, 32
IMEM:0x000004F6 INSTR:0x7F800E00    01111111100000000000111000000000    mov r0, r0, R28 lsl
IMEM:0x000004F7 INSTR:0x27C00000    00100111110000000000000000000000    or r0, r0, 0
IMEM:0x000004F8 INSTR:0x0FC21000    00001111110000100001000000000000    and r1,r1, 0
IMEM:0x000004F9 INSTR:0x07F8100B    00000111111110000001000000001011    add R28,r1, 11
IMEM:0x000004FA INSTR:0x27C21000    00100111110000100001000000000000    or r1,r1, 0
IMEM:0x000004FB INSTR:0x7F821E00    01111111100000100001111000000000    mov r1, r1, R28 lsl
IMEM:0x000004FC INSTR:0x27C21000    00100111110000100001000000000000    or r1, r1, 0
IMEM:0x000004FD INSTR:0x7F821E00    01111111100000100001111000000000    mov r1, r1, R28 lsl
IMEM:0x000004FE INSTR:0x27C21000    00100111110000100001000000000000    or r1, r1, 0
IMEM:0x000004FF INSTR:0x0FC42000    00001111110001000010000000000000    and r2,r2, 0
IMEM:0x00000500 INSTR:0x07F8200B    00000111111110000010000000001011    add R28,r2, 11
IMEM:0x00000501 INSTR:0x27C42000    00100111110001000010000000000000    or r2,r2, 0
IMEM:0x00000502 INSTR:0x7F842E00    01111111100001000010111000000000    mov r2, r2, R28 lsl
IMEM:0x00000503 INSTR:0x27C4206D    00100111110001000010000001101101    or r2, r2, 109
IMEM:0x00000504 INSTR:0x7F842E00    01111111100001000010111000000000    mov r2, r2, R28 lsl
IMEM:0x00000505 INSTR:0x27C4272A    00100111110001000010011100101010    or r2, r2, 1834
IMEM:0x00000506 INSTR:0xA7884000    10100111100010000100000000000000   	ldr r2, r2,0
IMEM:0x00000507 INSTR:0x7FDA0003    01111111110110100000000000000011   	mov r13, 3 //use for shift right by 3, which is a divide by 8
IMEM:0x00000508 INSTR:0x7FD60000    01111111110101100000000000000000   	mov r11, 0 
IMEM:0x00000509 INSTR:0xE78C0000    11100111100011000000000000000000   avgloop: ldneighbor r3, r0,0 //put neighborhood into r3 and r4
IMEM:0x0000050A INSTR:0xAF940000    10101111100101000000000000000000   	ldrb r5,r0,0 //get the center alone
IMEM:0x0000050B INSTR:0x478C3200    01000111100011000011001000000000   	accumbytes r6 , r3,r4
IMEM:0x0000050C INSTR:0x378C6280    00110111100011000110001010000000      	sub r6,r6,r5 //subtract the center
IMEM:0x0000050D INSTR:0x7F8C66A0    01111111100011000110011010100000   	mov r6,r6, r13 LSR //divide by 8
IMEM:0x0000050E INSTR:0xD7982000    11010111100110000010000000000000   	strb r6, r1,0 //store averaged byte to bottom half 
IMEM:0x0000050F INSTR:0x07C00001    00000111110000000000000000000001   	add r0,r0,1
IMEM:0x00000510 INSTR:0x07C21001    00000111110000100001000000000001   	add r1,r1,1 
IMEM:0x00000511 INSTR:0x07D6B001    00000111110101101011000000000001   	add r11,r11,1
IMEM:0x00000512 INSTR:0x7784B000    01110111100001001011000000000000   	cmp r2, r11
IMEM:0x00000513 INSTR:0x60FFFFF4    01100000111111111111111111110100   	b_ne  -12 //have we gone over all the pixels yet?
IMEM:0x00000514 INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x00000515 INSTR:0x67FFFF7D    01100111111111111111111101111101   	b  -131
IMEM:0x00000516 INSTR:0x0FC00000    00001111110000000000000000000000    and r0,r0, 0
IMEM:0x00000517 INSTR:0x07F8000B    00000111111110000000000000001011    add R28,r0, 11
IMEM:0x00000518 INSTR:0x27C00000    00100111110000000000000000000000    or r0,r0, 0
IMEM:0x00000519 INSTR:0x7F800E00    01111111100000000000111000000000    mov r0, r0, R28 lsl
IMEM:0x0000051A INSTR:0x27C00020    00100111110000000000000000100000    or r0, r0, 32
IMEM:0x0000051B INSTR:0x7F800E00    01111111100000000000111000000000    mov r0, r0, R28 lsl
IMEM:0x0000051C INSTR:0x27C00000    00100111110000000000000000000000    or r0, r0, 0
IMEM:0x0000051D INSTR:0x0FC21000    00001111110000100001000000000000    and r1,r1, 0
IMEM:0x0000051E INSTR:0x07F8100B    00000111111110000001000000001011    add R28,r1, 11
IMEM:0x0000051F INSTR:0x27C21000    00100111110000100001000000000000    or r1,r1, 0
IMEM:0x00000520 INSTR:0x7F821E00    01111111100000100001111000000000    mov r1, r1, R28 lsl
IMEM:0x00000521 INSTR:0x27C21000    00100111110000100001000000000000    or r1, r1, 0
IMEM:0x00000522 INSTR:0x7F821E00    01111111100000100001111000000000    mov r1, r1, R28 lsl
IMEM:0x00000523 INSTR:0x27C21000    00100111110000100001000000000000    or r1, r1, 0
IMEM:0x00000524 INSTR:0x0FC42000    00001111110001000010000000000000    and r2,r2, 0
IMEM:0x00000525 INSTR:0x07F8200B    00000111111110000010000000001011    add R28,r2, 11
IMEM:0x00000526 INSTR:0x27C42000    00100111110001000010000000000000    or r2,r2, 0
IMEM:0x00000527 INSTR:0x7F842E00    01111111100001000010111000000000    mov r2, r2, R28 lsl
IMEM:0x00000528 INSTR:0x27C4206D    00100111110001000010000001101101    or r2, r2, 109
IMEM:0x00000529 INSTR:0x7F842E00    01111111100001000010111000000000    mov r2, r2, R28 lsl
IMEM:0x0000052A INSTR:0x27C4272A    00100111110001000010011100101010    or r2, r2, 1834
IMEM:0x0000052B INSTR:0xA7884000    10100111100010000100000000000000   	ldr r2, r2,0
IMEM:0x0000052C INSTR:0x7FE80000    01111111111010000000000000000000   	mov r20,0 //use as count
IMEM:0x0000052D INSTR:0x7FD20008    01111111110100100000000000001000   	mov r9, 8 //shift right by 1 byte amount
IMEM:0x0000052E INSTR:0x7FE00009    01111111111000000000000000001001   	mov r16, 9
IMEM:0x0000052F INSTR:0x0FD6B000    00001111110101101011000000000000    and r11,r11, 0
IMEM:0x00000530 INSTR:0x07F8B00B    00000111111110001011000000001011    add R28,r11, 11
IMEM:0x00000531 INSTR:0x27D6B000    00100111110101101011000000000000    or r11,r11, 0
IMEM:0x00000532 INSTR:0x7F96BE00    01111111100101101011111000000000    mov r11, r11, R28 lsl
IMEM:0x00000533 INSTR:0x27D6B06D    00100111110101101011000001101101    or r11, r11, 109
IMEM:0x00000534 INSTR:0x7F96BE00    01111111100101101011111000000000    mov r11, r11, R28 lsl
IMEM:0x00000535 INSTR:0x27D6B720    00100111110101101011011100100000    or r11, r11, 1824
IMEM:0x00000536 INSTR:0xE78C0000    11100111100011000000000000000000   medianloop: ldneighbor r3, r0,0 //put neighborhood into r3 and r4 
IMEM:0x00000537 INSTR:0x07D8B000    00000111110110001011000000000000   	add r12,r11,0	//use r12 to hold incremented values of address of swapspace
IMEM:0x00000538 INSTR:0x7FD40005    01111111110101000000000000000101   	mov r10, 5 
IMEM:0x00000539 INSTR:0x0FDA40FF    00001111110110100100000011111111   bytebreakout:	and r13, r4, 255
IMEM:0x0000053A INSTR:0x0FDC30FF    00001111110111000011000011111111   		and r14, r3, 255
IMEM:0x0000053B INSTR:0x7F8844A0    01111111100010000100010010100000   		mov r4,r4, r9 LSR
IMEM:0x0000053C INSTR:0x7F8634A0    01111111100001100011010010100000   		mov r3,r3, r9 LSR
IMEM:0x0000053D INSTR:0xD7B58000    11010111101101011000000000000000   		strb r13,r12,0	
IMEM:0x0000053E INSTR:0xD7B98005    11010111101110011000000000000101   		strb r14,r12,5	
IMEM:0x0000053F INSTR:0x07D8C001    00000111110110001100000000000001   		add r12,r12,1
IMEM:0x00000540 INSTR:0x379EC580    00110111100111101100010110000000   		sub r15,r12,r11	
IMEM:0x00000541 INSTR:0x779EA000    01110111100111101010000000000000   		cmp r15,r10 //have we gone 9 times?
IMEM:0x00000542 INSTR:0x60FFFFF5    01100000111111111111111111110101   		b_ne  -11
IMEM:0x00000543 INSTR:0x07D8B000    00000111110110001011000000000000   sortstart: 	add r12,r11,0	//reset memory pointer
IMEM:0x00000544 INSTR:0x7FD40000    01111111110101000000000000000000   		mov r10, 0 //swapped flag, branch here to try another run
IMEM:0x00000545 INSTR:0x379EC580    00110111100111101100010110000000   continue:	sub r15	,r12,r11
IMEM:0x00000546 INSTR:0x779F0000    01110111100111110000000000000000   		cmp r15,r16	 //do a check to see if we should keep going in this run 
IMEM:0x00000547 INSTR:0x60400009    01100000010000000000000000001001   		b_eq  9 //branch if at the end of this pass
IMEM:0x00000548 INSTR:0xAFB58000    10101111101101011000000000000000   		ldrb r13,r12,0	
IMEM:0x00000549 INSTR:0xAFB98001    10101111101110011000000000000001   		ldrb r14,r12,1	
IMEM:0x0000054A INSTR:0x07D8C001    00000111110110001100000000000001   		add r12,r12,1	
IMEM:0x0000054B INSTR:0x779AE000    01110111100110101110000000000000   		cmp r13,r14 
IMEM:0x0000054C INSTR:0x64FFFFF7    01100100111111111111111111110111   		b_ls  -9 //r13 =< r14 don't swap
IMEM:0x0000054D INSTR:0x3F9AD700    00111111100110101101011100000000   		swp r13,r13,r14 //r13 > r14, swap
IMEM:0x0000054E INSTR:0xD7B59FFF    11010111101101011001111111111111   		strb r13,r12, -1
IMEM:0x0000054F INSTR:0xD7B98000    11010111101110011000000000000000   		strb r14,r12, 0
IMEM:0x00000550 INSTR:0x7FD40001    01111111110101000000000000000001   		mov r10,1 //set swapped flag
IMEM:0x00000551 INSTR:0x67FFFFF2    01100111111111111111111111110010   		b  -14
IMEM:0x00000552 INSTR:0x77D40000    01110111110101000000000000000000   endsorttest:	cmp r10, 0	
IMEM:0x00000553 INSTR:0x60FFFFEE    01100000111111111111111111101110   		b_ne  -18
IMEM:0x00000554 INSTR:0xAF956005    10101111100101010110000000000101   	ldrb r5,r11, 5 //this is the elusive median value 
IMEM:0x00000555 INSTR:0xD7942000    11010111100101000010000000000000   	strb r5, r1,0 //store filtered byte to destination fb
IMEM:0x00000556 INSTR:0x07C00001    00000111110000000000000000000001   	add r0,r0,1
IMEM:0x00000557 INSTR:0x07C21001    00000111110000100001000000000001   	add r1,r1,1 
IMEM:0x00000558 INSTR:0x07E94001    00000111111010010100000000000001   	add r20,r20,1
IMEM:0x00000559 INSTR:0x77854000    01110111100001010100000000000000   	cmp r2, r20
IMEM:0x0000055A INSTR:0x60FFFFDA    01100000111111111111111111011010   	b_ne  -38 
IMEM:0x0000055B INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x0000055C INSTR:0x67FFFF36    01100111111111111111111100110110   	b  -202
IMEM:0x0000055D INSTR:0x0FF18000    00001111111100011000000000000000    and r24,r24, 0
IMEM:0x0000055E INSTR:0x07F9800B    00000111111110011000000000001011    add R28,r24, 11
IMEM:0x0000055F INSTR:0x27F18000    00100111111100011000000000000000    or r24,r24, 0
IMEM:0x00000560 INSTR:0x7FB18E00    01111111101100011000111000000000    mov r24, r24, R28 lsl
IMEM:0x00000561 INSTR:0x27F1806D    00100111111100011000000001101101    or r24, r24, 109
IMEM:0x00000562 INSTR:0x7FB18E00    01111111101100011000111000000000    mov r24, r24, R28 lsl
IMEM:0x00000563 INSTR:0x27F1872A    00100111111100011000011100101010    or r24, r24, 1834
IMEM:0x00000564 INSTR:0xA7E30000    10100111111000110000000000000000           ldr r24,r24,0 
IMEM:0x00000565 INSTR:0x0FEB5000    00001111111010110101000000000000    and r21,r21, 0
IMEM:0x00000566 INSTR:0x07F9500B    00000111111110010101000000001011    add R28,r21, 11
IMEM:0x00000567 INSTR:0x27EB5000    00100111111010110101000000000000    or r21,r21, 0
IMEM:0x00000568 INSTR:0x7FAB5E00    01111111101010110101111000000000    mov r21, r21, R28 lsl
IMEM:0x00000569 INSTR:0x27EB5020    00100111111010110101000000100000    or r21, r21, 32
IMEM:0x0000056A INSTR:0x7FAB5E00    01111111101010110101111000000000    mov r21, r21, R28 lsl
IMEM:0x0000056B INSTR:0x27EB5000    00100111111010110101000000000000    or r21, r21, 0
IMEM:0x0000056C INSTR:0x7FF20000    01111111111100100000000000000000   	mov r25, 0			// initialize this addr to 0
IMEM:0x0000056D INSTR:0x7FF4000F    01111111111101000000000000001111   	mov r26, 15 //if below this number, add noise
IMEM:0x0000056E INSTR:0x7FEFFFFF    01111111111011111111111111111111   	mov r23, -1 //const
IMEM:0x0000056F INSTR:0x7FEC0000    01111111111011000000000000000000   	mov r22, 0 //const
IMEM:0x00000570 INSTR:0xAFEE2004    10101111111011100010000000000100   noiseloop:	ldrb r27, r17, 4 //random byte
IMEM:0x00000571 INSTR:0x77B7A000    01110111101101111010000000000000   		cmp r27,r26
IMEM:0x00000572 INSTR:0x66400003    01100110010000000000000000000011   		b_gt  3 
IMEM:0x00000573 INSTR:0x07F96000    00000111111110010110000000000000   		add r28, r22,0 //set to black by default
IMEM:0x00000574 INSTR:0x97F60001    10010111111101100000000000000001   		tst r27, 1 //test lsb
IMEM:0x00000575 INSTR:0x00F97000    00000000111110010111000000000000   		add_ne r28, r23,0 //set to white  
IMEM:0x00000576 INSTR:0xD7F2A000    11010111111100101010000000000000   		strb r28, r21, 0	// Store into fb2 
IMEM:0x00000577 INSTR:0x07F39001    00000111111100111001000000000001   endstorenoise:	add r25, r25, 1 //count++
IMEM:0x00000578 INSTR:0x07EB5001    00000111111010110101000000000001   		add r21,r21,1
IMEM:0x00000579 INSTR:0x77B38000    01110111101100111000000000000000   		cmp r25, r24		// Done?
IMEM:0x0000057A INSTR:0x60FFFFF4    01100000111111111111111111110100   		b_ne	 -12	// If not, continue looping
IMEM:0x0000057B INSTR:0x7FCDFFFF    01111111110011011111111111111111   		mov r6, -1
IMEM:0x0000057C INSTR:0x67FFFF16    01100111111111111111111100010110   		b  -234 //return to input loop 
IMEM:0x0000057D INSTR:0x0FF18000    00001111111100011000000000000000    and r24,r24, 0
IMEM:0x0000057E INSTR:0x07F9800B    00000111111110011000000000001011    add R28,r24, 11
IMEM:0x0000057F INSTR:0x27F18000    00100111111100011000000000000000    or r24,r24, 0
IMEM:0x00000580 INSTR:0x7FB18E00    01111111101100011000111000000000    mov r24, r24, R28 lsl
IMEM:0x00000581 INSTR:0x27F1806D    00100111111100011000000001101101    or r24, r24, 109
IMEM:0x00000582 INSTR:0x7FB18E00    01111111101100011000111000000000    mov r24, r24, R28 lsl
IMEM:0x00000583 INSTR:0x27F1872A    00100111111100011000011100101010    or r24, r24, 1834
IMEM:0x00000584 INSTR:0xA7E30000    10100111111000110000000000000000           ldr r24,r24,0 
IMEM:0x00000585 INSTR:0x0FEB5000    00001111111010110101000000000000    and r21,r21, 0
IMEM:0x00000586 INSTR:0x07F9500B    00000111111110010101000000001011    add R28,r21, 11
IMEM:0x00000587 INSTR:0x27EB5000    00100111111010110101000000000000    or r21,r21, 0
IMEM:0x00000588 INSTR:0x7FAB5E00    01111111101010110101111000000000    mov r21, r21, R28 lsl
IMEM:0x00000589 INSTR:0x27EB5020    00100111111010110101000000100000    or r21, r21, 32
IMEM:0x0000058A INSTR:0x7FAB5E00    01111111101010110101111000000000    mov r21, r21, R28 lsl
IMEM:0x0000058B INSTR:0x27EB5000    00100111111010110101000000000000    or r21, r21, 0
IMEM:0x0000058C INSTR:0x7FF20000    01111111111100100000000000000000   	mov r25, 0			// initialize this addr to 0
IMEM:0x0000058D INSTR:0x7FF4000F    01111111111101000000000000001111   	mov r26, 15 //if below this number, add noise
IMEM:0x0000058E INSTR:0xAFEE2004    10101111111011100010000000000100   gnoiseloop:	ldrb r27, r17, 4 //random byte
IMEM:0x0000058F INSTR:0x77B7A000    01110111101101111010000000000000   		cmp r27,r26
IMEM:0x00000590 INSTR:0x6640000E    01100110010000000000000000001110   		b_gt  14 
IMEM:0x00000591 INSTR:0xAFEE2004    10101111111011100010000000000100   		ldrb r27, r17, 4 //spin for a random while
IMEM:0x00000592 INSTR:0x07F7B001    00000111111101111011000000000001   		add r27, r27, 1
IMEM:0x00000593 INSTR:0x07C00000    00000111110000000000000000000000   gnoisespin:	add r0,r0,0
IMEM:0x00000594 INSTR:0x07C00000    00000111110000000000000000000000   		add r0,r0,0
IMEM:0x00000595 INSTR:0x07C00000    00000111110000000000000000000000   		add r0,r0,0
IMEM:0x00000596 INSTR:0x37F7B001    00110111111101111011000000000001   		sub r27,r27,1	
IMEM:0x00000597 INSTR:0x60FFFFFA    01100000111111111111111111111010   		b_ne  -6	
IMEM:0x00000598 INSTR:0x07C21000    00000111110000100001000000000000   		add r1,r1,0
IMEM:0x00000599 INSTR:0x07C42000    00000111110001000010000000000000   		add r2,r2,0
IMEM:0x0000059A INSTR:0xAFEE2004    10101111111011100010000000000100   		ldrb r27, r17, 4
IMEM:0x0000059B INSTR:0x07C21000    00000111110000100001000000000000   		add r1,r1,0
IMEM:0x0000059C INSTR:0x07C42000    00000111110001000010000000000000   		add r2,r2,0
IMEM:0x0000059D INSTR:0x07C63000    00000111110001100011000000000000   		add r3,r3,0
IMEM:0x0000059E INSTR:0x07C84000    00000111110010000100000000000000   		add r4,r4,0
IMEM:0x0000059F INSTR:0xD7EEA000    11010111111011101010000000000000   		strb r27, r21, 0	// Store into fb2 
IMEM:0x000005A0 INSTR:0x07F39001    00000111111100111001000000000001   gendstorenoise:	add r25, r25, 1 //count++
IMEM:0x000005A1 INSTR:0x07EB5001    00000111111010110101000000000001   		add r21,r21,1
IMEM:0x000005A2 INSTR:0x77B38000    01110111101100111000000000000000   		cmp r25, r24		// Done?
IMEM:0x000005A3 INSTR:0x60FFFFE9    01100000111111111111111111101001   		b_ne	 -23	// If not, continue looping
IMEM:0x000005A4 INSTR:0x7FCDFFFF    01111111110011011111111111111111   		mov r6, -1
IMEM:0x000005A5 INSTR:0x67FFFEED    01100111111111111111111011101101   		b  -275 //return to input loop 
IMEM:0x000005A6 INSTR:0x0FF18000    00001111111100011000000000000000    and r24,r24, 0
IMEM:0x000005A7 INSTR:0x07F9800B    00000111111110011000000000001011    add R28,r24, 11
IMEM:0x000005A8 INSTR:0x27F18000    00100111111100011000000000000000    or r24,r24, 0
IMEM:0x000005A9 INSTR:0x7FB18E00    01111111101100011000111000000000    mov r24, r24, R28 lsl
IMEM:0x000005AA INSTR:0x27F1806D    00100111111100011000000001101101    or r24, r24, 109
IMEM:0x000005AB INSTR:0x7FB18E00    01111111101100011000111000000000    mov r24, r24, R28 lsl
IMEM:0x000005AC INSTR:0x27F1872A    00100111111100011000011100101010    or r24, r24, 1834
IMEM:0x000005AD INSTR:0xA7E30000    10100111111000110000000000000000   		ldr r24,r24,0 
IMEM:0x000005AE INSTR:0x0FE94000    00001111111010010100000000000000    and r20,r20, 0
IMEM:0x000005AF INSTR:0x07F9400B    00000111111110010100000000001011    add R28,r20, 11
IMEM:0x000005B0 INSTR:0x27E94000    00100111111010010100000000000000    or r20,r20, 0
IMEM:0x000005B1 INSTR:0x7FA94E00    01111111101010010100111000000000    mov r20, r20, R28 lsl
IMEM:0x000005B2 INSTR:0x27E94000    00100111111010010100000000000000    or r20, r20, 0
IMEM:0x000005B3 INSTR:0x7FA94E00    01111111101010010100111000000000    mov r20, r20, R28 lsl
IMEM:0x000005B4 INSTR:0x27E94000    00100111111010010100000000000000    or r20, r20, 0
IMEM:0x000005B5 INSTR:0x0FEB5000    00001111111010110101000000000000    and r21,r21, 0
IMEM:0x000005B6 INSTR:0x07F9500B    00000111111110010101000000001011    add R28,r21, 11
IMEM:0x000005B7 INSTR:0x27EB5000    00100111111010110101000000000000    or r21,r21, 0
IMEM:0x000005B8 INSTR:0x7FAB5E00    01111111101010110101111000000000    mov r21, r21, R28 lsl
IMEM:0x000005B9 INSTR:0x27EB5020    00100111111010110101000000100000    or r21, r21, 32
IMEM:0x000005BA INSTR:0x7FAB5E00    01111111101010110101111000000000    mov r21, r21, R28 lsl
IMEM:0x000005BB INSTR:0x27EB5000    00100111111010110101000000000000    or r21, r21, 0
IMEM:0x000005BC INSTR:0x7FF20000    01111111111100100000000000000000   		mov r25, 0			// initialize this addr to 0
IMEM:0x000005BD INSTR:0xAFEEA000    10101111111011101010000000000000   thresh_loop:	ldrb r27, r21, 0	
IMEM:0x000005BE INSTR:0x7FF800FF    01111111111110000000000011111111   		mov r28, 255 //all white if passes (the binarization)
IMEM:0x000005BF INSTR:0x77B66000    01110111101101100110000000000000   		cmp r27,r6
IMEM:0x000005C0 INSTR:0x7DF80000    01111101111110000000000000000000   		mov_lt r28, 0 //store a 0 if the byte is not above threshold 
IMEM:0x000005C1 INSTR:0xD7F28000    11010111111100101000000000000000   		strb r28, r20, 0	// Store into fb2
IMEM:0x000005C2 INSTR:0x07F39001    00000111111100111001000000000001   	add r25, r25, 1 //count++
IMEM:0x000005C3 INSTR:0x07EB5001    00000111111010110101000000000001   	add r21, r21, 1
IMEM:0x000005C4 INSTR:0x07E94001    00000111111010010100000000000001   	add r20, r20, 1
IMEM:0x000005C5 INSTR:0x77B38000    01110111101100111000000000000000   	cmp r25, r24		// Done?
IMEM:0x000005C6 INSTR:0x60FFFFF5    01100000111111111111111111110101   	b_ne	 -11	// If not, continue looping
IMEM:0x000005C7 INSTR:0x7FCDFFFF    01111111110011011111111111111111   	mov r6, -1
IMEM:0x000005C8 INSTR:0x67FFFECA    01100111111111111111111011001010   	b  -310 //return to input loop 
IMEM:0x000005C9 INSTR:0x67FFFA35    01100111111111111111101000110101   	b  -1483
IMEM:0x000005CA INSTR:0x07EA0000    00000111111010100000000000000000   Invert_board:	add r21, r0, 0	// Store the old "current cursor"
IMEM:0x000005CB INSTR:0xD7906000    11010111100100000110000000000000   	strb r4, r3, 0
IMEM:0x000005CC INSTR:0x7FC0DEFE    01111111110000001101111011111110   	mov r0, 57086
IMEM:0x000005CD INSTR:0x7FF6FFFF    01111111111101101111111111111111   	mov r27, 65535			// 0x0FFFF
IMEM:0x000005CE INSTR:0x07F7B001    00000111111101111011000000000001   	add r27, r27, 1			// 0x10000
IMEM:0x000005CF INSTR:0x07B40D80    00000111101101000000110110000000   	add r26, r0, r27		// r26 gets FB2 addr
IMEM:0x000005D0 INSTR:0xAFE74000    10101111111001110100000000000000   Invert_loop:	ldrb r25, r26, 0	// Get value in FB2
IMEM:0x000005D1 INSTR:0x27F79001    00100111111101111001000000000001   	or r27, r25, 1
IMEM:0x000005D2 INSTR:0x97F20001    10010111111100100000000000000001   	tst r25, 1				// Is it alive?
IMEM:0x000005D3 INSTR:0x08F79FFE    00001000111101111001111111111110   	and_ne r27, r25, -2		// If so, kill it
IMEM:0x000005D4 INSTR:0xD7EF4000    11010111111011110100000000000000   	strb r27, r26, 0		// Store inverted value to FB2 loc
IMEM:0x000005D5 INSTR:0xAFE40000    10101111111001000000000000000000   	ldrb r25, r0, 0			// Get value in FB1
IMEM:0x000005D6 INSTR:0x27F79001    00100111111101111001000000000001   	or r27, r25, 1
IMEM:0x000005D7 INSTR:0x97F20001    10010111111100100000000000000001   	tst r25, 1				// Is it alive?
IMEM:0x000005D8 INSTR:0x08F79FFE    00001000111101111001111111111110   	and_ne r27, r25, -2		// If so, kill it
IMEM:0x000005D9 INSTR:0xD7EC0000    11010111111011000000000000000000   	strb r27, r0, 0			// Store inverted value to FB1 loc
IMEM:0x000005DA INSTR:0x37F5A001    00110111111101011010000000000001   	sub r26, r26, 1			// Dec FB2 loc
IMEM:0x000005DB INSTR:0x37C00001    00110111110000000000000000000001   	sub r0, r0, 1			// Dec FB1 loc
IMEM:0x000005DC INSTR:0x0FF600FF    00001111111101100000000011111111   	and r27, r0, 255		// Get x-coord
IMEM:0x000005DD INSTR:0x77F60000    01110111111101100000000000000000   	cmp r27, 0
IMEM:0x000005DE INSTR:0x3075A002    00110000011101011010000000000010   	sub_eq	r26, r26, 2
IMEM:0x000005DF INSTR:0x77F60000    01110111111101100000000000000000   	cmp r27, 0
IMEM:0x000005E0 INSTR:0x30400002    00110000010000000000000000000010   	sub_eq	r0, r0, 2
IMEM:0x000005E1 INSTR:0x77C00101    01110111110000000000000100000001   	cmp r0, 257
IMEM:0x000005E2 INSTR:0x657FFFEC    01100101011111111111111111101100   	b_ge	 -20
IMEM:0x000005E3 INSTR:0x07C15000    00000111110000010101000000000000   	add r0, r21, 0
IMEM:0x000005E4 INSTR:0x07C60000    00000111110001100000000000000000   	add r3, r0, 0
IMEM:0x000005E5 INSTR:0xAF900000    10101111100100000000000000000000   	ldrb r4, r0, 0 	//pixel's current value
IMEM:0x000005E6 INSTR:0x67FFFAEF    01100111111111111111101011101111   	b		 -1297	// exit subroutine
IMEM:0x000005E7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005E8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005E9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005EA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005EB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005EC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005ED INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005EE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005EF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005F0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005F1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005F2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005F3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005F4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005F5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005F6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005F7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005F8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005F9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005FA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005FB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005FC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005FD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005FE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000005FF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000600 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000601 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000602 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000603 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000604 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000605 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000606 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000607 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000608 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000609 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000060A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000060B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000060C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000060D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000060E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000060F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000610 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000611 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000612 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000613 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000614 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000615 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000616 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000617 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000618 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000619 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000061A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000061B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000061C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000061D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000061E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000061F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000620 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000621 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000622 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000623 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000624 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000625 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000626 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000627 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000628 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000629 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000062A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000062B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000062C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000062D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000062E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000062F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000630 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000631 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000632 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000633 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000634 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000635 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000636 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000637 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000638 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000639 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000063A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000063B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000063C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000063D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000063E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000063F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000640 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000641 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000642 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000643 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000644 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000645 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000646 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000647 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000648 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000649 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000064A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000064B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000064C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000064D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000064E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000064F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000650 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000651 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000652 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000653 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000654 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000655 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000656 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000657 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000658 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000659 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000065A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000065B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000065C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000065D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000065E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000065F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000660 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000661 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000662 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000663 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000664 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000665 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000666 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000667 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000668 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000669 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000066A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000066B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000066C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000066D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000066E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000066F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000670 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000671 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000672 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000673 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000674 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000675 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000676 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000677 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000678 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000679 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000067A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000067B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000067C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000067D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000067E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000067F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000680 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000681 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000682 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000683 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000684 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000685 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000686 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000687 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000688 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000689 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000068A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000068B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000068C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000068D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000068E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000068F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000690 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000691 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000692 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000693 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000694 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000695 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000696 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000697 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000698 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000699 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000069A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000069B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000069C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000069D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000069E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000069F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006A0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006A1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006A2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006A3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006A4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006A5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006A6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006A7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006A8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006A9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006AA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006AB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006AC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006AD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006AE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006AF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006B0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006B1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006B2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006B3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006B4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006B5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006B6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006B7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006B8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006B9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006BA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006BB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006BC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006BD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006BE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006BF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006C0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006C1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006C2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006C3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006C4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006C5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006C6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006C7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006C8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006C9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006CA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006CB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006CC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006CD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006CE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006CF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006D0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006D1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006D2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006D3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006D4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006D5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006D6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006D7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006D8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006D9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006DA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006DB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006DC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006DD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006DE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006DF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006E0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006E1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006E2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006E3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006E4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006E5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006E6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006E7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006E8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006E9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006EA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006EB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006EC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006ED INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006EE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006EF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006F0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006F1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006F2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006F3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006F4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006F5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006F6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006F7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006F8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006F9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006FA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006FB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006FC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006FD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006FE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000006FF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000700 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000701 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000702 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000703 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000704 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000705 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000706 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000707 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000708 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000709 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000070A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000070B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000070C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000070D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000070E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000070F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000710 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000711 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000712 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000713 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000714 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000715 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000716 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000717 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000718 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000719 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000071A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000071B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000071C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000071D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000071E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000071F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000720 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000721 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000722 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000723 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000724 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000725 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000726 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000727 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000728 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000729 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000072A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000072B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000072C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000072D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000072E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000072F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000730 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000731 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000732 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000733 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000734 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000735 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000736 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000737 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000738 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000739 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000073A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000073B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000073C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000073D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000073E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000073F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000740 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000741 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000742 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000743 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000744 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000745 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000746 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000747 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000748 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000749 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000074A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000074B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000074C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000074D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000074E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000074F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000750 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000751 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000752 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000753 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000754 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000755 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000756 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000757 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000758 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000759 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000075A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000075B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000075C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000075D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000075E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000075F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000760 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000761 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000762 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000763 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000764 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000765 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000766 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000767 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000768 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000769 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000076A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000076B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000076C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000076D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000076E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000076F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000770 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000771 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000772 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000773 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000774 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000775 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000776 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000777 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000778 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000779 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000077A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000077B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000077C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000077D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000077E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000077F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000780 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000781 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000782 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000783 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000784 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000785 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000786 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000787 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000788 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000789 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000078A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000078B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000078C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000078D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000078E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000078F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000790 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000791 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000792 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000793 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000794 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000795 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000796 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000797 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000798 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x00000799 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000079A INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000079B INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000079C INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000079D INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000079E INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x0000079F INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007A0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007A1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007A2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007A3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007A4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007A5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007A6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007A7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007A8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007A9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007AA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007AB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007AC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007AD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007AE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007AF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007B0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007B1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007B2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007B3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007B4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007B5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007B6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007B7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007B8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007B9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007BA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007BB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007BC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007BD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007BE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007BF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007C0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007C1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007C2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007C3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007C4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007C5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007C6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007C7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007C8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007C9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007CA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007CB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007CC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007CD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007CE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007CF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007D0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007D1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007D2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007D3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007D4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007D5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007D6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007D7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007D8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007D9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007DA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007DB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007DC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007DD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007DE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007DF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007E0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007E1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007E2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007E3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007E4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007E5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007E6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007E7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007E8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007E9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007EA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007EB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007EC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007ED INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007EE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007EF INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007F0 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007F1 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007F2 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007F3 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007F4 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007F5 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007F6 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007F7 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007F8 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007F9 INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007FA INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007FB INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007FC INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007FD INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007FE INSTR:0xFF800000    11111111100000000000000000000000   
IMEM:0x000007FF INSTR:0xFF800000    11111111100000000000000000000000   
